<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>它夏了夏天</title>
  
  <subtitle>生命中有一种遇见，就让它美如行云流水，然后一生去回味。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tokyle.com/"/>
  <updated>2018-10-12T07:27:58.878Z</updated>
  <id>http://tokyle.com/</id>
  
  <author>
    <name>Kyle</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【转】linux系统内存基础知识</title>
    <link href="http://tokyle.com/2018/10/11/%E3%80%90%E8%BD%AC%E3%80%91linux%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://tokyle.com/2018/10/11/【转】linux系统内存基础知识/</id>
    <published>2018-10-11T07:19:44.000Z</published>
    <updated>2018-10-12T07:27:58.878Z</updated>
    
    <content type="html"><![CDATA[<p>计算机基础之:Linux内存基础，转自来自万能的互联网网友，我只是搬运工，感谢原作者！</p><a id="more"></a><p>在Linux系统中，我们经常用free命令来查看系统内存的使用状态。类似：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          15885        3898        1069           7       10917       11584</span><br><span class="line">Swap:          6143         178        5965</span><br></pre></td></tr></table></figure></p><p>显示的单位是M，当然也可以<code>free -g</code>显示单位是G而已。这个命令几乎是每一个使用过Linux的人必会的命令，但越是这样的命令，似乎真正明白的人越少（我是说比例越少）。一般情况下，对此命令输出的理解可以分这几个层次：</p><ol><li><p>不了解。这样的人的第一反应是：天啊，内存用了好多，70个多G，可是我几乎没有运行什么大程序啊？为什么会这样？Linux好占内存！</p></li><li><p>自以为很了解。这样的人一般评估过会说：嗯，根据我专业的眼光看的出来，内存才用了17G左右，还有很多剩余内存可用。buffers/cache占用的较多，说明系统中有进程曾经读写过文件，但是不要紧，这部分内存是当空闲来用的。</p></li><li><p>真的很了解。这种人的反应反而让人感觉最不懂Linux，他们的反应是：free显示的是这样，好吧我知道了。神马？你问我这些内存够不够，我当然不知道啦！我特么怎么知道你程序怎么写的？</p></li></ol><p>根据目前网络上技术文档的内容，我相信绝大多数了解一点Linux的人应该处在第二种层次。大家普遍认为，buffers和cached所占用的内存空间是可以在内存压力较大的时候被释放当做空闲空间用的。但真的是这样么？在论证这个题目之前，我们先简要介绍一下buffers和cached是什么意思：</p><h3 id="什么是buffer-cache？"><a href="#什么是buffer-cache？" class="headerlink" title="什么是buffer/cache？"></a>什么是buffer/cache？</h3><p>buffer和cache是两个在计算机技术中被用滥的名词，放在不通语境下会有不同的意义。在Linux的内存管理中，这里的buffer指Linux内存的：Buffer cache。这里的cache指Linux内存中的：Page cache。翻译成中文可以叫做缓冲区缓存和页面缓存。在历史上，它们一个（buffer）被用来当成对io设备写的缓存，而另一个（cache）被用来当作对io设备的读缓存，这里的io设备，主要指的是块设备文件和文件系统上的普通文件。但是现在，它们的意义已经不一样了。在当前的内核中，page cache顾名思义就是针对内存页的缓存，说白了就是，如果有内存是以page进行分配管理的，都可以使用page cache作为其缓存来管理使用。当然，不是所有的内存都是以页（page）进行管理的，也有很多是针对块（block）进行管理的，这部分内存使用如果要用到cache功能，则都集中到buffer cache中来使用。（从这个角度出发，是不是buffer cache改名叫做block cache更好？）然而，也不是所有块（block）都有固定长度，系统上块的长度主要是根据所使用的块设备决定的，而页长度在X86上无论是32位还是64位都是4k。</p><p>明白了这两套缓存系统的区别，就可以理解它们究竟都可以用来做什么了。</p><h4 id="什么是page-cache？"><a href="#什么是page-cache？" class="headerlink" title="什么是page cache？"></a>什么是page cache？</h4><p>Page cache主要用来作为文件系统上的文件数据的缓存来用，尤其是针对当进程对文件有read／write操作的时候。如果你仔细想想的话，作为可以映射文件到内存的系统调用：mmap是不是很自然的也应该用到page cache？在当前的系统实现里，page cache也被作为其它文件类型的缓存设备来用，所以事实上page cache也负责了大部分的块设备文件的缓存工作。</p><h4 id="什么是buffer-cache"><a href="#什么是buffer-cache" class="headerlink" title="什么是buffer cache"></a>什么是buffer cache</h4><p>Buffer cache则主要是设计用来在系统对块设备进行读写的时候，对块进行数据缓存的系统来使用。这意味着某些对块的操作会使用buffer cache进行缓存，比如我们在格式化文件系统的时候。一般情况下两个缓存系统是一起配合使用的，比如当我们对一个文件进行写操作的时候，page cache的内容会被改变，而buffer cache则可以用来将page标记为不同的缓冲区，并记录是哪一个缓冲区被修改了。这样，内核在后续执行脏数据的回写（writeback）时，就不用将整个page写回，而只需要写回修改的部分即可。</p><h3 id="如何回收cache？"><a href="#如何回收cache？" class="headerlink" title="如何回收cache？"></a>如何回收cache？</h3><p>Linux内核会在内存将要耗尽的时候，触发内存回收的工作，以便释放出内存给急需内存的进程使用。一般情况下，这个操作中主要的内存释放都来自于对buffer／cache的释放。尤其是被使用更多的cache空间。既然它主要用来做缓存，只是在内存够用的时候加快进程对文件的读写速度，那么在内存压力较大的情况下，当然有必要清空释放cache，作为free空间分给相关进程使用。所以一般情况下，我们认为buffer/cache空间可以被释放，这个理解是正确的。</p><p>但是这种清缓存的工作也并不是没有成本。理解cache是干什么的就可以明白清缓存必须保证cache中的数据跟对应文件中的数据一致，才能对cache进行释放。所以伴随着cache清除的行为的，一般都是系统IO飙高。因为内核要对比cache中的数据和对应硬盘文件上的数据是否一致，如果不一致需要写回，之后才能回收。</p><p>在系统中除了内存将被耗尽的时候可以清缓存以外，我们还可以使用下面这个文件来人工触发缓存清除的操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /proc/sys/vm/drop_caches </span><br><span class="line">0</span><br></pre></td></tr></table></figure></p><p>方法是：</p><p><code>echo 1 &gt; /proc/sys/vm/drop_caches</code></p><p>当然，这个文件可以设置的值分别为1、2、3。它们所表示的含义为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/vm/drop_caches:表示清除pagecache。</span><br><span class="line"></span><br><span class="line">echo 2 &gt; /proc/sys/vm/drop_caches:表示清除回收slab分配器中的对象（包括目录项缓存和inode缓存）。slab分配器是内核中管理内存的一种机制，其中很多缓存数据实现都是用的pagecache。</span><br><span class="line"></span><br><span class="line">echo 3 &gt; /proc/sys/vm/drop_caches:表示清除pagecache和slab分配器中的缓存对象。</span><br></pre></td></tr></table></figure></p><h3 id="参考blog"><a href="#参考blog" class="headerlink" title="参考blog"></a>参考blog</h3><blockquote><p><a href="https://www.cnblogs.com/rocky-AGE-24/p/7629500.html" target="_blank" rel="noopener">Linux中Cache内存占用过高解决办法</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机基础之:Linux内存基础，转自来自万能的互联网网友，我只是搬运工，感谢原作者！&lt;/p&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="http://tokyle.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Linux" scheme="http://tokyle.com/tags/Linux/"/>
    
      <category term="buff/cache" scheme="http://tokyle.com/tags/buff-cache/"/>
    
  </entry>
  
  <entry>
    <title>【转】聊一聊职业发展</title>
    <link href="http://tokyle.com/2018/10/09/%E3%80%90%E8%BD%AC%E3%80%91%E8%81%8A%E4%B8%80%E8%81%8A%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95/"/>
    <id>http://tokyle.com/2018/10/09/【转】聊一聊职业发展/</id>
    <published>2018-10-10T01:56:09.000Z</published>
    <updated>2018-10-10T01:57:23.620Z</updated>
    
    <content type="html"><![CDATA[<p>【转】老生常谈，再谈谈测试职业发展</p><p>转自Testerhome，看的挺有感触，感谢作者！转来自己blog，时时共勉。</p><a id="more"></a><p>有这么个普遍现象<br>测试招聘者，特别是一、二线互联网公司的招聘者最苦恼的事儿就是招人。想找到一个合适的人难于上青天，每天各种撒网，简历看几百份，面大几十人，能捞到一个中意的小伙伴就谢天谢地了。但同时很多测试小伙伴发现找工作很难，特别是进大一点的厂，他们特别挑：代码要会写，要有软件架构能力，问一大坨平时根本用不到的技术问题，还挑经验，挑沟通能力，挑这挑那，有时候还特么挑学历、挑年龄。。。 供求总难以匹配起来，造成了双方都很痛苦。</p><h3 id="Why？"><a href="#Why？" class="headerlink" title="Why？"></a>Why？</h3><p>能力要求不匹配是最核心的问题。软件、互联网近20年来飞速成长，其实也经历了很多阶段。行业软件兴盛阶段和外包兴盛阶段（2000-2010年）行业进入了大量的测试人员，当时最主流的测试实践是：重心放在系统验收阶段。测试人员的主要工作基本都投入在了基于业务的黑盒测试上，对代码能力、系统理解的能力要求不多。2010年后，互联网行业的真正兴起让国内软件开发模式开始缓慢调头，快速迭代的模式逐步兴起，开发周期越来越短，迭代越来越快，但系统越来越越庞大、复杂。原来的测试工作模式和工作范围越来越无法满足要求了。但大量从业人员技能范围转变是一件很难的事情，行业是有巨大惯性的。从宏观上看大量QA技能转变跟不上需求转变是造成市场供求不匹配的主要原因。</p><h3 id="So-What"><a href="#So-What" class="headerlink" title="So What?"></a>So What?</h3><p>三个观点：1. 只做手工测试，不懂系统实现的测试工程师的职业发展会越来越受限。2. 能够转型成适应市场需求的同学将在近几年的时间获得超额回报（因为市场供不应求，企业不得不抬高价格来寻找这样的人）。3.对于个体来说，自我成长永远最重要，自己永远要对自己的发展负责，别依赖外部环境，自己想办法变成市场的香饽饽才靠谱。</p><h3 id="到底什么样的人抢手？"><a href="#到底什么样的人抢手？" class="headerlink" title="到底什么样的人抢手？"></a>到底什么样的人抢手？</h3><p>按照我一点理解讲一讲什么样子的人会抢手吧，限于篇幅会偏重技术角度来讲。个人之见，欢迎讨论和拍砖。</p><h4 id="测试的底子-项目经验"><a href="#测试的底子-项目经验" class="headerlink" title="测试的底子-项目经验"></a>测试的底子-项目经验</h4><p>有比较复杂系统的测试实战经验，你就超过了50%以上的应聘者。什么叫做比较复杂系统呢？投入50人年开发出来的系统就可以称作一个复杂系统了。因此，复杂系统并不是很罕见。但是，如果你只接触一个简单的模块，甚至只是测试一个稳定模块的维护性开发，而不是通盘理解，不能说是测试过复杂系统。有从头到尾接触一个完整项目的经历很宝贵。</p><h4 id="测试的底子-基础知识"><a href="#测试的底子-基础知识" class="headerlink" title="测试的底子-基础知识"></a>测试的底子-基础知识</h4><p>对照三本书：《ISTQB基础教程》 《高级软件测试设计》 《高级软件测试管理》（后两本是ISTQB的高级认证教程）。这里边的内容你都能熟练应用（真的是熟练应用，而不只是有概念），你就能超过80%以上的应聘者了。面试过数百人，我经常会问几个问题：如果测试时间不够，你会怎么办？ 如果让你去测试一个你完全不熟悉的系统，你会怎么办？你平时会使用那些测试设计方法？ 看似很稀松平常的问题，非常考验人。因为大部分从业者都没有经受过系统训练和学习，工作多年，依然技能不足，意识跑偏。</p><h4 id="熟练使用一门主语言"><a href="#熟练使用一门主语言" class="headerlink" title="熟练使用一门主语言"></a>熟练使用一门主语言</h4><p>满足这条，你就超过了70%的应聘者。什么叫做熟练呢？拿Java来说吧：系统学习过Java的教程，高频面试50题 这样的题可以自测一下，可以回答上35个以上；熟悉最主流的Spring框架，能够写出一个简单的网站，实现基础的Restful 服务；读懂过一个测试框架，如mockito或者Junit的源码；能够熟练实施接口测试（基于一些测试框架 如：rest-assured+Junit）；能够读懂开发的业务代码，对他们的代码进行Code Review；</p><h4 id="对一门语言有比较深入了解"><a href="#对一门语言有比较深入了解" class="headerlink" title="对一门语言有比较深入了解"></a>对一门语言有比较深入了解</h4><p>满足这条，你就超过了90%的应聘者。什么叫有深入了解呢？还拿Java来说吧：熟练使用Java的常见API；深入理解基于语言特性/系统特性的知识，如Collections的实现机制、类型系统、I/O、网络、多线程等；熟知设计模式（广义范围的设计模式，不局限于GOF的设计模式）；熟悉JVM的工作模式；熟练使用调试排查工具解决性能问题；熟练掌握市面上常见的脚手架；熟练掌握周边知识（OPs相关，网络知识相关）有不错的实战开发经验（做过真正被生产检验的东西）；对于测试开发，AOP，Java字节码技术是很重要的知识。。。 这是一个很长的学习list，需要几年时间来养成。做到这点，其实你可以胜任普通的开发岗位了，这也是高级测试开发岗位的技术底子。</p><h4 id="在一个领域知识有不错的了解"><a href="#在一个领域知识有不错的了解" class="headerlink" title="在一个领域知识有不错的了解"></a>在一个领域知识有不错的了解</h4><p>人不可能什么都懂，但工作几年之后，会在工作的域内一定要有积累才行。<br>例如，你测试一个核心电商系统的交易模块三年了，业务上你一定要熟练讲出来：商品列表、购物车、下单、退单、废单、支付、发货、库存、退款、优惠使用等等一坨业务流程，和可能出现的常见的坑（各类问题产生的资损、各类问题产生的服务不可用、逻辑矛盾），不然根本无法体现你经验沉淀和深入思考；技术角度上，你要能够画得出来系统的交互图，熟悉最核心的接口和最核心的参数，能够读懂开发的代码，熟练使用trace和监控工具，诊断定位线上问题到代码行。</p><h4 id="用技术保障质量的能力"><a href="#用技术保障质量的能力" class="headerlink" title="用技术保障质量的能力"></a>用技术保障质量的能力</h4><p>测试开发岗一定会问到一个问题：你能够举一个你用技术手段提高测试效率，增强测试能力的例子么？这是面试时最大的一个坎。 很多人会讲一些自动化测试回归的例子，但是真正成功的例子非常少，因为为什么做，怎么做都没有想好就照网上一个教程攒了一个，结果变成了玩具。 做好自动化，不仅仅是会使用工具、框架，其实要对被测物特性，软件生命周期有很深的理解并且有很强的开发知识才行。实际上，在环境、CI、数据、测试用例生成、数据比对的很小的一些点上，都能有不错的提效产出，从这些点能够做得好，会得到不错的加分。有一个不错的成功案例，你胜出的几率就超过了80%，没有短板，就十拿九稳了。</p><h4 id="技能以外的东西-实战案例"><a href="#技能以外的东西-实战案例" class="headerlink" title="技能以外的东西- 实战案例"></a>技能以外的东西- 实战案例</h4><p>以前的工作印证了你的能力。能够讲清楚一件特别拿得出手的工作，证明你能力的工作能力是面试时候最有用的投名状。</p><h4 id="技能意外的东西-你的个人特质"><a href="#技能意外的东西-你的个人特质" class="headerlink" title="技能意外的东西 - 你的个人特质"></a>技能意外的东西 - 你的个人特质</h4><p>一般有如下特质会大大加分：快速学习、系统性学习、学以致用、系统性思考、强大的推动力、技术思维、突出的沟通能力、条理性、抗压性、乐观精神、抗挫折能力、迅速调整的能力、迭代改进的意识、ownership、愿景和规划。 这些特性体现人的内核，有强大内核的人，做什么都行，技能暂时不足，也一定能补足。所以，在招聘的时候往往对是否录用的判断起决定性作用</p><h4 id="高段位要求（高级职位需求）"><a href="#高段位要求（高级职位需求）" class="headerlink" title="高段位要求（高级职位需求）"></a>高段位要求（高级职位需求）</h4><p>计算机领域知识的通盘理解<br>这条范围非常大，人不可能什么都懂。但最最基础的知识是不能有盲点的：<br>操作系统工作基础原理与基础操作：如linux，要通读过linux操作系统的书，熟悉最基本的概念，基本命令要熟悉，shell要能写和读；<br>网络知识特别是TCP/IP, HTTP知识：推荐两本书 《图解tcp/ip》 《图解Http》这两本书里的东西要懂。<br>数据库知识：市面常见数据库（redis，mysql，oracle）的常见DBA操作，问题排查；SQL的熟练使用；<br>Web及移动端知识：能够懂HTML，CSS，能够读懂Javascript代码，能够读懂Android或者iOS的代码，做简单开发最好。<br>安全知识：常见的安全防护方法、工具使用；基本的安全攻防原理；<br>软件工程/开发过程管理：实战中各种磨练，建议系统的学习PMP，敏捷开发的一些认证课程。</p><h4 id="在一个域的深耕"><a href="#在一个域的深耕" class="headerlink" title="在一个域的深耕"></a>在一个域的深耕</h4><p>人不可能什么都懂，但在一个领域是需要深耕的。比如，在做了四、五年移动端测试以后。android和iOS都要具备一定的开发能力了，能读懂开发的业务代码是最基础的，能够代替开发实现部分业务功能，完成部分组件开发是个非常好的自检点。能够对移动端自动化工具栈、监控工具栈（如友盟、bugly、newrelic等）、内存泄露检测、卡顿检测、耗电量、弱网、流量、埋点、灰度、版本控制、兼容性、用户体验、安全等等的质量保障方案有通盘搞定能力。<br>什么叫搞定呢？举个例子：比如，使用多种手段把崩溃率降低到千分之一以下。对于一个小团队，这是个很不容易实现的坎。做到这点，你需要了解如何收集崩溃率，如何使用一系列工具来定位核心问题，如何推动开发改动，并且预防（静态代码扫描工具引入，阻止乱用第不成熟的第三方插件，代码reivew防止常见pattern如空指针引发的崩溃，推动开发养成良好的log习惯，推动移动端防御性编程编程开发习惯，推动后端开发按照规范吐接口，帮助开发引入内存泄露、卡顿工具，趋势报表，警钟长鸣，各种灰度方式设置，线上监控。。。一个数据的改观，背后要有大量的质量相关工作）。</p><h4 id="使用综合手段来保障软件质量提升效能的能力。"><a href="#使用综合手段来保障软件质量提升效能的能力。" class="headerlink" title="使用综合手段来保障软件质量提升效能的能力。"></a>使用综合手段来保障软件质量提升效能的能力。</h4><p>听起来很抽象，举几个例子吧。<br><strong>例子1</strong>：你所在的team总在被开发抱怨测试用的时间太长。如何能缩短一下测试时间呢？<br>通过调研，发现测试小伙伴诟病的最多的就是环境不可用。环境到底多不可用呢？<br>你基于Grafana和Prometheus做了一个环境可用的监控报表，使用后，发现环境在工作日整体可用率只有35%左右，主要原因是：几个核心热点应用经常挂了没人管。<br>你拉了整个team，明确了部署责任人，约定了部署规则：只能中午饭和晚饭时间部署，并且部署后要自己看一下是不是OK。<br>一周后，环境可用度上升到了65%。再深入分析，发现2个同学不守规矩，总是他们在破坏规则，你去找他们单独谈话。<br>一周后，环境可用度上升到了80%。还是有少量人不守规矩。<br>你找SRE的同学提需求，做了部署卡点，非部署时间部署必须TL审批。<br>一周后，环境可用度上升到了85%。有些TL也不守规矩。<br>你建了个报警，环境乱部署，坏掉了，在大团队的群里@全体，告知谁搞坏了环境。<br>一周后，环境可用度达到了92%。<br>你加了一个feature：应用挂了一段时间无人响应，自动重启服务功能，仍然有问题，就自动回滚上一版本。<br>你推动了开发解决了某个应用启动时间过长的问题。<br>你推动了环境分组。<br>你推动了测试环境版本上线的规范流程实施。<br>你推动了冒烟自动化用例卡点。<br>你推动了环境部署人备份机制。<br>你推动了全员基础环境部署培训。<br>你总结了部署手册。<br>你做了。。。。。<br>最后，环境可用度稳定到了97%以上。你为测试节省了60%以上block时间（原来可用度未35%）</p><p><strong>例子2</strong>：上面的问题，除了环境，还有一个槽点：开发提测质量不高。测试的头几天，很多主流程都走不通，导致测试总是在等待，或者是跟着开发一起联调。而这段时间，已经被习惯性的认为是测试时间了，因为：提测了。</p><p>你推动了：测试提供冒烟用例，开发必须完成一定程度的自测才能提测。<br>你推动了：测试和开发做自动化同期共建，在开发过程中，核心功能就被自动化用例保护起来了。<br>你推动了：开发切分feature提测，而不是攒一个大招一下子提一坨。<br>你推动了：代码Codereview变成团队常规活动，QA在早期跟进核心代码，把问题坑杀在萌芽阶段。<br>你推动了：外部资源联调非常早的进行，不会让它在测试后期成为测试blocker。<br>。。。</p><p><strong>例子3</strong>：你发现测试时间长，QA自己也有问题。</p><p>你推动了：有明确的测试计划，并让所有干系人都有明确的预期。<br>你推动了：测试依据风险测试，最大的风险得到最快的cover，科学分配时间，明显缩短bug反馈时间弧。<br>你推动了：bug严格管理，所有重要bug都及时修复。<br>你推动了：良好的沟通和汇报机制，每天让团队主要干系人清晰的知道，距离发布还差多远。<br>你推动了。。。。</p><p>你能讲出自己做过5个以上这样的成功例子，我敢保障，你会被1线大厂疯抢。职级基本都是专家起。</p><h4 id="持续学习能力和复杂问题解决能力"><a href="#持续学习能力和复杂问题解决能力" class="headerlink" title="持续学习能力和复杂问题解决能力"></a>持续学习能力和复杂问题解决能力</h4><p><strong>例子1</strong>：<br>你近期的工作是帮助团队提升后台服务稳定性。你看到了netflix内部使用一个叫做ChaosMonkey的东西来随机对生产服务期进行攻击，而逼迫工程师提高稳定性，所以，你也实现了类似（更温和）的内部机制，推动团队稳定性的提高。<br>你怎么知道这个叫做ChaosMonkey的东西呢？ 因为你会习惯性浏览一线厂商的技术博客，参与行业大会，关注各类新技术。持续性的养成习惯。</p><p><strong>例子2</strong>：<br>做大规模接口自动化好难，外部数据依赖太难搞，参数构造太费劲，assert太难写。如果能够简单的录制回放就好了。<br>但是，外部依赖是个天坑，写操作mock也是个天坑，assert也是个天坑。<br>实际的案例是，经过几年多个团队持续不屑的填坑，阿里内部已经有应用级的录制回放工具了，数百个应用成功的是用了它，把不可能回归的任务变成了可能（上万数量级的case当天生成，当天投入使用，并可以分析覆盖率），自动化测试实施需要付出的工作时间革命性降低（不足原来付出时间的10%）。</p><p>你能讲出自己做过5个以上这样的成功例子，我敢保障，你也会被1线大厂疯抢。职级基本都是专家起。</p><h4 id="其它能力"><a href="#其它能力" class="headerlink" title="其它能力"></a>其它能力</h4><p>测试是个万金油，高阶一些的职位需要什么都要会一些 ，因为越高阶的职位需要解决的问题越综合，需要打交道的人的种类越多。不然很容易变成你职业短板，做个list吧（一定不全）：<br>很好的项目管理能力，至少与开发经理能力同级，甚至要强于他。<br>一定的软件架构能力。<br>一定的产品sense：可以跟一个资深的产品经理能够顺畅的交流，明白知道他为什么会这么想，所要实现产品的意义，路径；从产品质量方面的考虑要超过产品经理，给他输出。<br>极好的沟通能力。<br>团队管理能力（这个太重要）<br>目标管理能力<br>有一个好的内核（上面提到过）</p><h3 id="怎么转型-怎么进阶？"><a href="#怎么转型-怎么进阶？" class="headerlink" title="怎么转型/怎么进阶？"></a>怎么转型/怎么进阶？</h3><p>其实不难，没有什么高端的方法。下面这4条就够了，核心秘密就是坚持不懈。</p><p><strong>熟悉你的被测系统，熟悉你的被测系统，熟悉你的被测系统。</strong> </p><p>能够从技术、业务角度做到对被测系统熟悉是做一个好QA的最基本职业素养，也是能力提升的最主要源泉。<br>自检点：我能够画出系统的架构图么？我能够读懂开发的代码么？我熟悉常见的业务监控系统么？熟悉日志系统么？知道开发是如何调试和定位问题的么？给我一个线上问题，我能定位么？我能给别人完整的介绍这个域的核心业务么？我能自己直接动手发布上线一个系统么？知道如何回滚么？灰度是如何做的？ 我知道所有关键的技术点么，如一个交易的幂等性是如何实现的？我在团队中有：“这家伙对系统最熟”的口碑么？<br>如果自检点全部是否定答案。。。 花一年时间把它全变成肯定答案。这一过程，你一定被迫学到了很多很多，并且获得了极为长足的成长，这是进阶的必由之路，也是卡了很多人的地方。 如果说做不到，后面不用看了，前面的也全部忘掉吧。<br>方法：通读所有文档，强迫自己读代码，积极参与开发所有讨论，不懂的狂问，观察开发如何上线，如何排查问题，模仿，学习，善用搜索引擎，总结。。。</p><p><strong>找到问题解决问题，找到问题解决问题，找到问题解决问题。</strong> </p><p>你一定有一堆问题，如果你觉得自己做得挺好，没有问题要解决，那必然是你自己有巨大的问题！<br>自检点：找一支笔，写出你觉得质量方面，你的team的10个问题，做排序。排出最重要的3个。<br>方法：找到top3的问题，选一个，列个接话，去解决。如果找不出来，使劲去观察，然后去看看做的好的同行，比比你比人家差在哪里。尝试去解决这些问题，从小问题，能够见到效果的问题入手，设置一个时间点。你真正解决了5个以上问题以后，感觉一定会有。</p><p><strong>系统学习，系统学习，系统学习</strong></p><p>自检点：我系统的学过一门知识么？我能讲清楚我这么操作，我写的这行代码的原理么？<br>方法：从工作出发，确认你需要补足哪些知识。从网上找一个具体知识的学习路线图，订个计划，照着来。 参加学习小组，找到帮你解决难题的人，多请他吃饭，多请教他。获取知识后，马上回到工作中做检验。还是学以致用才能有所增长。结合工作来系统学习的效果是最好的。<br>再举个例子：<br>上家公司有个小伙伴（他应该也会泡这个社区），开始应聘的时候，他说熟悉jenkins，用的很多。所以第一份工作是：把所有CI的日常工作交给了他，并告知2个月内要全部搞定。 他一下懵逼了，原来那些不深入的理解支撑不了工作要求。后来他每天死磕，看了jenkins所有的文档（对，几乎所有文档通读了一遍），翻了无数问题的解决帖子，记录了上百个问题解决的过程，写了上百篇jenkins的小blog（现在还没公布出来）。几个月以后，他比我熟了，他的一项基础能力成长为：可以独自给一个小公司完整的搞定前端、后端、移动端的一整套CI解决方案。其实单凭这一套，就能找到不错的工作了。这是依托工作，系统性学习的结果。</p><p>看到有同学说要裸辞，去接受培训。我的建议是，别这样。裸辞你就失去了学以致用的阵地，失去了真正解决问题的机会，还失去了资金来源。依托工作，自主学习是王道。自己饶过不去坎，其实有很多网上教程和脱产培训班啊。</p><p><strong>选择有挑战的团队，选择有挑战的团队</strong> </p><p>自检点：在团队里有很多人比我强么？周围的同事都是我佩服的么？我做的事儿有挑战么？ 方法：如果这三点都是否定的，并且你处于职业生涯的早期。也许（只是也许），你该考虑一下换个团队了。<br>总结<br>偏重技能角度讲了讲市场的需求和QA如何做如何满足市场需求。行文仓促，认识有限，其实也并没有什么新东西。欢迎讨论拍砖啊：）</p><p>最后放一篇老文，前google测试总监写的，写了快10年了，但我觉得常读常新。</p><p>———————————————————–我是分割线——————————————–</p><p>经营成功的测试职业生涯<br>(James A. Whittaker）</p><h3 id="你是如何开始做测试工作的？"><a href="#你是如何开始做测试工作的？" class="headerlink" title="你是如何开始做测试工作的？"></a>你是如何开始做测试工作的？</h3><p>1989年，我在田纳西大学读研究生的时候，完成了从软件开发人员到软件测试人员的转型。而这一转型并非出于我自己的选择。我命运的改变发生在一个早晨，我的教授质问我为什么缺席那么多开发会议。我解释说因为会议被安排在星期六早上，很不方便。</p><p>而怍为一个生平第一次离开家的新入校的研究生，这个时间段有些麻烦。十分有意思的是，等待我的惩罚并不是一纸解聘通知书，而是被判罚为该小组的唯一一个测试人员，且不能与开发团队有任何交流。</p><p>对于我的职业生涯来说，这是一个意义多么重大的决定啊！正是这个决定最终成就了几十篇关于测试的论文，构建了多得连我自己也记不清的各种工具，出版了五本书，带来了无尽的快乐工作时间。测试一直就是我拥有的那份具有创造性和技术挑战性的快乐职业。不过，并不是所有人都喜欢这样。可以说我最早接触测试是在攻读研究生期问，不可否认，那时的高强度学习和工作确实让我受益匪浅。另外，我认为从初学者阶段到专家阶段之间存在着一个“测试的山峰”，人们需要通过一系列个人辅导、获取信息和接受常规指导来翻越山峰。成为一个测试初学者是很容易的，成为职业的测试人员也并不艰难。本章的重点正是讨论如何翻越那座位于职业测试人员和测试专家之间的山峰。</p><h3 id="回到未来"><a href="#回到未来" class="headerlink" title="回到未来"></a>回到未来</h3><p>在软件测试领域，时间似乎已经停滞了。我们在21世纪做事的方法与上个世纪几乎完全相同。Bill Hetzel在1972年出版的测试知识丛书至今仍然相当有价值。而我自己所写，于2002年首次出版的How to Break Software(如何攻破软件)系列，到今天仍被作为实用软件测试技术主要资源的代名词。</p><p>确实，如果我们可以把20世纪70年代的测试人员转换时空用在今日，我猜想他们的的技巧足够应付现代软件的测试。当然，他们需要学习网络和各种网络协议，但是他们拥有的实际测试技术将能得到很好的应用。如果从20世纪90年代找一个测试人员，则不几乎不需要任何训练。</p><p>对于开发人员来说，却不是这样，他们所掌握的那些上世纪的技巧几乎已经完全过 时。让一个有一段时间不写代码的人重新开始编程，看看会有什么样的反应。让我感到很不安的是，我们可以从马路上直接雇用人手，而雇来的这些人从第一天起就能够测试，就能够有收获。事情真的有那么简单吗？或者是我们的期望值只有那么低？让我更加不安的是，我们没有任何可预测的方式将合适的测试人才从胜任工作状态训练为测试专。测试真的就那么困难吗？</p><p>这又是那个山峰了。门槛很低，但通往精通的道路却很艰难。</p><p>在通往测试山峰的入口，我们倚仗的是这样一个事实：测试的很多方面都很容易掌握。大多数人都可以学得有模有样。甚至只要将一点点常识应用于输入的选择,就可以找出缺陷。这个层次的测试就如同在桶里钓鱼，简单到足以让任何人都认为自己很聪明。然而过了入口以后，道路迅速陡峭起来，而测试知识变得越来越晦涩难懂。我们发现有人擅长于此，我们称这些人为“有天赋的人”，并欣赏他们的本能。</p><p>难道一定要依靠本能么？对于那些看起来不具备特长的人们，是否存在着一条翻越山峰的途径？是否可以以某种方法传授测试技能以培养出更多的专家呢？为认为这座山峰是可以通行的，而这一章正是我关于应该如何走这条路的笔记，你可以在自己的职业生涯中加以应用。这并不是一份食谱配方，一份职业生涯烹调书。不过你可以做一些事情来加速你的职业成长。但是，正如你可能已经猜到的，真正是说来容易，做起来难。</p><h4 id="上山"><a href="#上山" class="headerlink" title="上山"></a>上山</h4><p>测试职业的早期阶段主要是为征服测试山峰的漫长攀登做准备。我所能给出的最好的建议是从两个方面来思考问题。对于你参与的每一个项目，都有两部分（不一定相等）的任务。第一部分的任务是保证当前的测试项目获得成功。而第二部分的任务是学习你应该做些什么以便使下一个测试项目更加容易。我把它称为“测试今天的项目，准备明天的项目”。如果你做每一个项目把它都分割成为上述的两半，那么几乎可以保证你能持续获得进步。这样，你就可以随着每一个参与的项目逐渐成长为更优秀的测试人员。</p><p>现在就让我们来关注第二部分的任务——为下一个项目做准备。我们需要注意三个概念：重复、技术和漏洞。</p><h5 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h5><p>做任何一件事，绝不要重复两次而不意识到或质疑这其实是个问题。我希望所有年轻的测试人员都牢记这一点。我见过很多初学者，他们在单调的任务上浪费了太多的时间，比如，设置测试机器，配置测试环境，在实验室里安装待测试的应用程序，选择一个产品版本来测试-这些任务列表可以变得很长，最后你会发现真正花在测试软件上的时间少得可怜。</p><p>这是许多新手常犯的错误。他们没能看到他们日复一日所做的工作的重复本质，儿当他们意识到这种重复时，几个小时已经过去了，而在这几个小时内他们没有做任何实际的测试工作。关注这些重复劳动，并且留意由此造成的真正的软件测试工作时间的流逝。为了能翻过测试的山峰，必须做一个测试人员应该做的工作，而不是实验室管理员或者测试机管理员的工作。</p><p>测试自动化是解决重复劳动的方案，也是本章稍后的主题。</p><h5 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h5><p>测试人员常常会对软件失效进行分析。分析缺陷时，我们从开发人员的失败中学习如何编写可靠的代码。我们也分析那些被我们忽略的缺陷。在应用程序上市以后，客户就会开始报告缺陷，我们将要面对处理一大堆失效的情形并寻找其中的重要缺陷。用户报告的每一个缺陷都说明我们的流程有问题，我们的测试知识还不够完善。</p><p>但是分析我们的成功也同样重要，儿许多新入职的测试人员却没能利用这个唾手可得的资源。我们在测试中找到的每一个缺陷都说明我们的的测试流程正在有效工作，都是一次成功。我们需要紧紧抓住这种绝好的机会，只有这样才能使成功不断的重复下去。</p><p>运动队常常这样做，他们会观看比赛录像，并分析每一个动作为什么奏效或者为什么不奏效。我清楚地记得一个小故事，我的一个朋友拍下了我儿子踢足球的一些照片。其中一张照片记录了她踢球的瞬间，那个球超过对方守门员成功进球了。当我把它给我儿子看时，我之处他站立的那条腿的姿势非常完美，他踢球的脚尖紧绷且出球点在鞋带间恰到好处的位置上。他盯着那张照片很长时间，从那以后他很少用不正确的姿势踢球。他那次得分可能只是碰巧做对了，但从此以后他有意识的运用这些技术使之接近完美。</p><p>现在回到新手测试人员的课程上来。我们每一个人都会有得意的时刻。我们找到重要的漏洞或发现优先级很高的缺陷，并为此雀跃不已。不过先花点时间考虑一下整体状况。我们使用什么技术找到了那个缺陷？我们是否可以创建一种方法来找到更多这类缺陷？我们是否可以记住…些实际的测试经验并不断地加以应用来帮助提高我们的工作效率？软件的哪些症状可以提示我们它具有缺陷？我们将来能否从那些症状中得到更多的警示？换句话说，这不仅仅是一个缺陷或是一次成功，这个缺陷教会了我们什么，是否使得我们将来成为更好的测试人员正如我儿子的进球一样，尽管第一个缺陷是偶然间发现的，但它不代表其余的成功都是偶然。理解我们成功的原因很重要，只有这样做，成功才能被复制。对于测试人员来说，这种保证成功的原因就是一系列的测试技术、建议和工具，它们可以提高我们在未来项目中的工作效率。</p><h5 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h5><p>测试人员最终都会变得很擅长寻找缺陷，但是要翻过测试的高峰，我们必须更快并且更有效率：高速低阻。换句话说，我们必须拥有一种本身不含缺陷的缺陷查找技术！</p><p>我喜欢这样来考虑问题：测试人员检视自己的工作时也需要发挥那种寻找缺陷的能力。我们必须使用和寻找产品缺陷一样的流程来寻找我们自己的测试流程，测试过程中的缺陷。我的测试流程是不是有问题？这里面是否有缺陷？这里是否存在着妨碍我提高效率的障碍？</p><p>你必须一直寻找更好的方法。有意识地去确定那些限制能力、阻碍前进、减缓速度的东西。就像缺陷限制了软件满足用户需求的能力一样，是什么限制了测试的能力？使用你拥有的测试能力来最优化自己的测试流程，这会帮助你在测试的山峰上快速攀登并增加你翻越山峰后成为专家的机会。</p><p>测试山峰的巅峰处是一个美好的地方。如果你成功地到了那里，恭喜你．但这并不是最终日标。这表示你已经成为一个杰出的测试人员。而此时的下坡路就是用你的洞察力和专家知识来帮助周围的人也成为优秀的测试人员。自己一个人登顶是一回事，帮助其他人（那些能力不如你的人）登顶却完全是另外一回事。</p><p>一般来说，那些成功登上测试巅峰的人会成为使用工具的大师。那些商业工具、开开源免费工具,和自己写的工具（我个人最喜欢的工具）是极好地提高工作产出、增加工作成效的方法。不过，工具只是实现该目标的一种方法，但在许多其他方面它反而是一种限制，因为太多的人看不到工具的功能之外的东西。他们被限制在工具能为他们所做的事情中，没能看到或理解对工具还有更多的需求。登顶需要真正掌握的是“信息”。因为很多工具能处理信息，并使得信息的获取更加容易，所以测试人员变得过于依赖于他们的工具。但是信息本身以及如何利用这些信息才是真正的成功关键。</p><p>熟练掌握信息，指理解有哪些信息，这些信息将如何影响测试，保证最大限度地利用这些影响。有几类信息是测试登顶者必须关注的。这里我要谈的是其中两种：来自应用程序的信息和来自之前测试的信息。</p><p>来自应用程序的信息包括需求、体系结构、代码结构、源代码……甚至是关于应用程序在执行时做了哪些事情的运行信息。在编写和执行测试用例时，需要考虑这类信息，但信息的多寡在很大程度上取决于测试人员的能力，这是一种能够使测试更高效的能力。在测试中使用这类信息越多，测试就越偏向于工程而不是猜测。</p><p>在微软，我们有一个游戏测试组织（Games Test Organization,GTO），负责Xbox和PC游戏的测试。谈到利用应用程序的信息，他们是最优秀的。游戏是难以想象的丰富，测试起来非常复杂。游戏中很多可测试的内容都是隐藏的（因为让那些玩家找寻可以交换的物品正是游戏的乐趣之一）o如果GTO的测试人员所做的仅仅是玩游戏，那么他们找到的问题不会比最终用户更多。为了能做得更好，他们与游戏的开发人员合作创建了一些信息控制板，这些控制板暴露了一些基本上可以算得上作弊的信息给测试人员。这样，测试人员就能提前知道怪物会被投放在何处、物品被隐藏在哪里，他们可以看到墙的另一边，可以控制敌方的某些行为。他们的作弊工具（即测试工具）基本上使他们成为游戏里的神，让他们可以控制看到的信息以便更快更巧妙地测试。这个例子给有测试人员都上了一课。</p><p>来自测试的信息意味着你必须关注在测试时所做的一切，并使用获得的信息来影响今后的测试。你是否知道你的测试是如何与需求结合的，知道何时某一特定需求已经得到足够的测试？你是否使用代码覆盖率来影响未来的测试？你知道当代码更新或缺陷修复时那些测试会受到影响，还是知识重新运行所有的测试？理解测试进行到什么程度并随着测试调整测试策略，这是测试成熟的标志。</p><p>我以前曾在微软的Visual Studio的一个小组工作过，我们大量使用代码改动量（由于添加新特性或修复缺陷而改变的代码）和代码覆盖来影响我们的测试。我们花了很大的力气将代码覆盖和代码改动量通知测试人员，帮助他们理解哪些测试用例对覆盖率有贡献，帮助他们测试改动过的或修改过的组件。最终的结果是在代码确实被改动时，我们清楚地知道哪些测试会被影响而只重新运行那些测试。我们还知道每个新的测试用例是如何对总体的接口，特性和代码覆盖率产生作用的，从而指导我们的测试人员，让团队中的每个人在他们所创建的所有测试用例基础上，写出更有意义的测试。</p><p>你用哪些信息来指导你的测试？你如何保证信息是可获取的，以便在测试中随时可以得到？你如何使得信息变得有用，以便它能以良好的方式影响你的测试？这些问题的答案将决定你在走下专家测试山峰时的前进速度。</p><h4 id="下山"><a href="#下山" class="headerlink" title="下山"></a>下山</h4><p>到达测试山峰的顶峰的时候，你已经成为一个十分能干的测试人员了，能力也许相当于你组里所有同事能力的总和。无论你在做什么，请不要试图做得比你的整个团队都好，不管你对此感觉有多好，或是你的老板对你遏得有多紧。一旦你走在下坡的路上，就不要再去争取“找到最多缺陷的人”或是“找到最有意义缺陷的人”这样的荣誉头衔。反而我推荐你减少花在测试上的时间，而把创新作为你的首要任务。</p><p>在测试上创新指不急于向前，而是仔细观察、洞察先机、找到瓶颈并改进团队中所有其他人的工作方式。你的工作变为帮助其他人进步。在微软，我们有一个专门为此而设的正式职位——测试架构师。不过，不要因为缺少一个很酷的头衔而让你沮丧。无论别人怎么称呼你，当你在“下坡的路上，你能做的最好的事就是尽量保证更多的人能成功地爬上山峰的另一侧。</p><h3 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h3><blockquote><p><a href="https://testerhome.com/topics/16354" target="_blank" rel="noopener">聊一聊职业发展</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【转】老生常谈，再谈谈测试职业发展&lt;/p&gt;
&lt;p&gt;转自Testerhome，看的挺有感触，感谢作者！转来自己blog，时时共勉。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://tokyle.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="lives" scheme="http://tokyle.com/tags/lives/"/>
    
  </entry>
  
  <entry>
    <title>使用Grafana展示Jmeter数据</title>
    <link href="http://tokyle.com/2018/09/27/%E4%BD%BF%E7%94%A8Grafana%E5%B1%95%E7%A4%BAJmeter%E6%95%B0%E6%8D%AE/"/>
    <id>http://tokyle.com/2018/09/27/使用Grafana展示Jmeter数据/</id>
    <published>2018-09-28T02:29:39.000Z</published>
    <updated>2018-09-28T02:31:56.356Z</updated>
    
    <content type="html"><![CDATA[<p>Jmeter对接Grafana</p><a id="more"></a><p>使用jmeter进行压测，压测过程中的测试结果，直接使用<code>聚合报告</code>的话，看的不是很直观，jmeter自带的插件，出的图和zabbix原生的图一样的很丑。。。所以，在万能的互联网上找了找使用<code>Grafana</code>展示jmeter结果的方案</p><h3 id="Jmeter-Influxdb-Grafana"><a href="#Jmeter-Influxdb-Grafana" class="headerlink" title="Jmeter + Influxdb + Grafana"></a>Jmeter + Influxdb + Grafana</h3><p>整个方案，就是讲jmeter产出的结果，存储到Influxdb中，然后用Grafana展示Influxdb的数据。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>Influxdb和Grafana的安装就不说了，之前写过；直接说配置</p><h5 id="Influxdb"><a href="#Influxdb" class="headerlink" title="Influxdb"></a>Influxdb</h5><p>Influxdb配置文件在<code>/etc/influxdb</code>下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/influxdb/influxdb.conf</span><br></pre></td></tr></table></figure></p><p>找到<code>graphite</code>项，修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[[graphite]]</span><br><span class="line">  # Determines whether the graphite endpoint is enabled.</span><br><span class="line">  enabled = true</span><br><span class="line">  database = &quot;jmeter&quot;</span><br><span class="line">  # retention-policy = &quot;&quot;</span><br><span class="line">  bind-address = &quot;:2003&quot;</span><br><span class="line">  protocol = &quot;tcp&quot;</span><br><span class="line">  consistency-level = &quot;one&quot;</span><br></pre></td></tr></table></figure></p><p>重启influxdb,<code>systemctl restart influxd</code></p><p>新建jmeter数据库，在<code>chronograf</code>中或者进服务器，<code>influx</code>进influxdb控制台手工创建：<code>CREATE DATABASE &quot;jmeter&quot;</code>,<br>在grafana中添加上这个influxdb即可</p><h5 id="Jmeter"><a href="#Jmeter" class="headerlink" title="Jmeter"></a>Jmeter</h5><p>Jmeter其他脚本步骤和之前一样，线程组中添加一个组件：<code>监听器-Backend Listener</code>，修改<code>graphiteHost</code>地址为influxdb的IP，其他值可以默认</p><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>执行一次请求，可以到influxdb数据库中查看是否生效<br><code>use jmeter;</code>,<code>show measurements</code>即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost zabbix_agentd.d]# influx</span><br><span class="line">Connected to http://localhost:8086 version 1.6.1</span><br><span class="line">InfluxDB shell version: 1.6.1</span><br><span class="line">&gt; use jmeter;</span><br><span class="line">Using database jmeter</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; show measurements;</span><br><span class="line">name: measurements</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">jmeter.all.a.avg</span><br><span class="line">jmeter.all.a.count</span><br><span class="line">jmeter.all.a.max</span><br><span class="line">jmeter.all.a.min</span><br><span class="line">jmeter.all.a.pct90</span><br><span class="line">jmeter.all.a.pct95</span><br><span class="line">jmeter.all.a.pct99</span><br><span class="line">jmeter.all.h.count</span><br><span class="line">jmeter.all.ko.count</span><br><span class="line">jmeter.all.ok.avg</span><br><span class="line">jmeter.all.ok.count</span><br><span class="line">jmeter.all.ok.max</span><br><span class="line">jmeter.all.ok.min</span><br><span class="line">jmeter.all.ok.pct90</span><br><span class="line">jmeter.all.ok.pct95</span><br><span class="line">jmeter.all.ok.pct99</span><br><span class="line">jmeter.test.endedT</span><br><span class="line">jmeter.test.maxAT</span><br><span class="line">jmeter.test.meanAT</span><br><span class="line">jmeter.test.minAT</span><br><span class="line">jmeter.test.startedT</span><br></pre></td></tr></table></figure></p><p>这样就成功将数据加到influxdb里了</p><h5 id="grafana配置"><a href="#grafana配置" class="headerlink" title="grafana配置"></a>grafana配置</h5><p>添加dashboard，正常添加图形，数据库选择influxdb中jmeter的数据库,SELECT项选择想要展现的栏即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jmeter.all.h.count所有请求的TPS</span><br><span class="line">jmeter.&lt;请求名称&gt;.h.count 对应&lt;请求名称&gt;的TPS</span><br><span class="line">jmeter.all.ok.pct9090%的请求响应时间</span><br><span class="line">jmeter.&lt;请求名称&gt;.ok.pct99 对应&lt;请求名称&gt;99%的请求响应时间</span><br><span class="line">jmeter.all.test.startedT线程数</span><br></pre></td></tr></table></figure></p><p><a href="https://www.cnblogs.com/yyhh/p/5990228.html" target="_blank" rel="noopener">参考Blog</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jmeter对接Grafana&lt;/p&gt;
    
    </summary>
    
      <category term="性能测试" scheme="http://tokyle.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Jmeter" scheme="http://tokyle.com/tags/Jmeter/"/>
    
  </entry>
  
  <entry>
    <title>Centos7搭建单机Redis</title>
    <link href="http://tokyle.com/2018/09/26/Centos7%E6%90%AD%E5%BB%BA%E5%8D%95%E6%9C%BARedis/"/>
    <id>http://tokyle.com/2018/09/26/Centos7搭建单机Redis/</id>
    <published>2018-09-26T09:14:06.000Z</published>
    <updated>2018-09-26T09:15:26.490Z</updated>
    
    <content type="html"><![CDATA[<p>Centos7搭建单机版Redis</p><a id="more"></a><p>工作需要，需要一个redis服务器来做缓存数据库，作为一个当下风靡的工具，至少还是应该知道怎么搭建<br>本次介绍内容为单机版搭建过程，集群部分，还没实践过，，</p><h3 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h3><p>首先Centos7服务器，然后装个<code>wget</code>，开始</p><h4 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h4><p><code>https://redis.io/download</code>官网下有很多版本，正常下载稳定版即可，当然，Beta版可能也有很多优化可以装了试试。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-4.0.11.tar.gz</span><br></pre></td></tr></table></figure></p><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-4.0.11.tar.gz</span><br><span class="line"></span><br><span class="line">cd redis-4.0.11</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>安装完之后，根据内部既定的shell脚本，会在<code>/usr/bin</code>目录下自动创建好redis的可执行文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-rwxr-xr-x. 1 root root 2450840 Sep 26 16:04 redis-benchmark</span><br><span class="line">-rwxr-xr-x. 1 root root 5742360 Sep 26 16:04 redis-check-aof</span><br><span class="line">-rwxr-xr-x. 1 root root 5742360 Sep 26 16:04 redis-check-rdb</span><br><span class="line">-rwxr-xr-x. 1 root root 2605120 Sep 26 16:04 redis-cli</span><br><span class="line">lrwxrwxrwx. 1 root root      12 Sep 26 16:04 redis-sentinel -&gt; redis-server</span><br><span class="line">-rwxr-xr-x. 1 root root 5742360 Sep 26 16:04 redis-server</span><br></pre></td></tr></table></figure></p><p>redis的启动和很简单，在<code>/usr/bin</code>目录下执行<code>redis-server</code>即可启动；<code>redis-cli SHUTDOWN</code>即可停止</p><h3 id="服务化"><a href="#服务化" class="headerlink" title="服务化"></a>服务化</h3><p>通常在Linux下启动都原因是使用服务的方式启动，比如启动nginx和MySQL：<code>systemctl start nginx</code>和<code>systemctl start mysql</code>那也可以把redis配置到服务中，使用类似的方式来启动redis</p><h4 id="chkconfig"><a href="#chkconfig" class="headerlink" title="chkconfig"></a>chkconfig</h4><p>linux的服务通过<code>chkconfig</code>来管理，可以先执行下<code>chkconfig</code>来查看当前系统已有的服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@izuf65tvx7it01x88bzbp5z ~]# chkconfig</span><br><span class="line"></span><br><span class="line">Note: This output shows SysV services only and does not include native</span><br><span class="line">      systemd services. SysV configuration data might be overridden by native</span><br><span class="line">      systemd configuration.</span><br><span class="line"></span><br><span class="line">      If you want to list systemd services use &apos;systemctl list-unit-files&apos;.</span><br><span class="line">      To see services enabled on particular target use</span><br><span class="line">      &apos;systemctl list-dependencies [target]&apos;.</span><br><span class="line"></span><br><span class="line">aegis          0:off1:off2:on3:on4:on5:on6:off</span><br><span class="line">agentwatch     0:off1:off2:on3:on4:on5:on6:off</span><br><span class="line">cloudmonitor   0:off1:off2:on3:on4:on5:on6:off</span><br><span class="line">netconsole     0:off1:off2:off3:off4:off5:off6:off</span><br><span class="line">network        0:off1:off2:on3:on4:on5:on6:off</span><br></pre></td></tr></table></figure></p><h4 id="redis服务化"><a href="#redis服务化" class="headerlink" title="redis服务化"></a>redis服务化</h4><p>想要将redis服务化，就需要将redis 的启动脚本加到系统服务中去，而系统服务的脚本存储路径是<code>/etc/init.d</code>，也就是，只需要将redis的启动脚本加到<code>/etc/init.d</code>文件夹下，再添加到<code>chkconfig</code>即可。</p><p>在之前下载的redis源码下有个初始化脚本文件<code>redis_init_script</code>（路径：路径/redis-4.0.11/utils），将这个文件拷贝到<code>/etc/init.d</code>下并且命名为<code>redis_自定义的端口</code>（例如redis_6379）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /路径/redis-4.0.11/utils/redis_init_script /etc/init.d/redis_6379</span><br></pre></td></tr></table></figure></p><p>然后进入<code>/etc/init.d</code>目录，修改初始化脚本<code>vim redis_6379</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">增加（头部，第3行后增加即可）</span><br><span class="line"></span><br><span class="line"># chkconfig: 2345 90 10 </span><br><span class="line"># description: Redis is a persistent key-value database</span><br><span class="line"></span><br><span class="line">修改</span><br><span class="line"></span><br><span class="line">REDISPORT=6379   （大约第六行）</span><br></pre></td></tr></table></figure></p><p>效果差不多是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#!/bin/sh</span><br><span class="line">#</span><br><span class="line"># Simple Redis init.d script conceived to work on Linux systems</span><br><span class="line"># chkconfig: 2345 90 10 </span><br><span class="line"># description: Redis is a persistent key-value database</span><br><span class="line"># as it does use of the /proc filesystem.</span><br><span class="line"></span><br><span class="line">REDISPORT=6379</span><br></pre></td></tr></table></figure></p><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>首先创建放置配置文件的文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/redis</span><br><span class="line"></span><br><span class="line">cd /var</span><br><span class="line">mkdir -p ./redis/6379(端口号)</span><br></pre></td></tr></table></figure></p><p>将源文件下配置文件模板<code>路径/redis-4.0.11/redis.conf</code>复制到<code>/etc/redis</code>目录下，并且以端口号重命名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp 路径/redis-4.0.11/redis.conf /etc/redis/6379.conf</span><br></pre></td></tr></table></figure></p><p>修改配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">port 6636  （第92行）</span><br><span class="line">daemonize yes  （第136行）</span><br><span class="line">pidfile /var/run/redis_6636.pid  （第158行）</span><br><span class="line">dir /var/redis/6379   (第263行)</span><br></pre></td></tr></table></figure></p><p>保存退出。</p><h4 id="添加服务"><a href="#添加服务" class="headerlink" title="添加服务"></a>添加服务</h4><p>一条命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig redis_6379 on</span><br></pre></td></tr></table></figure></p><p>这样就可以使用<code>service redis_6379 start</code>来启动redis了，同样<code>service redis_6379 stop</code></p><p>效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis]# service redis_6636 start</span><br><span class="line">Starting Redis server...</span><br><span class="line">120037:C 26 Sep 16:18:04.701 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">120037:C 26 Sep 16:18:04.701 # Redis version=4.0.2, bits=64, commit=00000000, modified=0, pid=120037, just started</span><br><span class="line">120037:C 26 Sep 16:18:04.701 # Configuration loaded</span><br></pre></td></tr></table></figure></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>其实，用服务启动redis，就是使用将启动脚本加到chkconfig，启动<code>/etc/init.d</code>下的<code>redis_6379</code>脚本，根据脚本中的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EXEC=/usr/local/bin/redis-server</span><br><span class="line">CLIEXEC=/usr/local/bin/redis-cli</span><br><span class="line"></span><br><span class="line">PIDFILE=/var/run/redis_$&#123;REDISPORT&#125;.pid</span><br><span class="line">CONF=&quot;/etc/redis/$&#123;REDISPORT&#125;.conf&quot;</span><br></pre></td></tr></table></figure></p><p>真正的server启动目录：/usr/local/bin/redis-server<br>配置文件路径：/etc/redis/${REDISPORT}.conf<br>再根据<code>/etc/redis/6379.conf</code>内的配置，启动相应的端口，保存到相应的目录等</p><h3 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h3><blockquote><p><a href="https://www.jellythink.com/archives/379" target="_blank" rel="noopener">Redis集群搭建</a><br><a href="https://www.cnblogs.com/renzhicai/p/7773080.html" target="_blank" rel="noopener">Centos下redis搭建</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Centos7搭建单机版Redis&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://tokyle.com/categories/Devops/"/>
    
    
      <category term="Centos7" scheme="http://tokyle.com/tags/Centos7/"/>
    
      <category term="Redis" scheme="http://tokyle.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Linux查看端口使用情况</title>
    <link href="http://tokyle.com/2018/09/20/Linux%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/"/>
    <id>http://tokyle.com/2018/09/20/Linux查看端口使用情况/</id>
    <published>2018-09-21T02:27:47.000Z</published>
    <updated>2018-09-21T02:32:01.313Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 查看监听端口</p><a id="more"></a><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p>netstat命令常用参数说明（有事没事<code>man netstat</code>查看完整参数）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-n：直接使用ip地址，而不通过域名服务器</span><br><span class="line"></span><br><span class="line">-l：仅显示监控中的服务器的Socket</span><br><span class="line"></span><br><span class="line">-p：显示进程PID和进程名称</span><br><span class="line"></span><br><span class="line">-t：显示TCP端口</span><br><span class="line"></span><br><span class="line">-u：显示UDP端口</span><br></pre></td></tr></table></figure></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>配合grep可以很方便查看当前服务器上监听的端口，方便查询服务是否正常启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -npl | grep 5001</span><br></pre></td></tr></table></figure></p><p>查看<code>5001</code>端口使用情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nplt</span><br></pre></td></tr></table></figure><p>查看所所有TCP协议端口使用情况</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux 查看监听端口&lt;/p&gt;
    
    </summary>
    
      <category term="skill" scheme="http://tokyle.com/categories/skill/"/>
    
    
      <category term="linux" scheme="http://tokyle.com/tags/linux/"/>
    
      <category term="netstat" scheme="http://tokyle.com/tags/netstat/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter分布式环境搭建</title>
    <link href="http://tokyle.com/2018/09/17/Jmeter%E5%88%86%E5%B8%83%E5%BC%8F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://tokyle.com/2018/09/17/Jmeter分布式环境搭建/</id>
    <published>2018-09-17T09:50:56.000Z</published>
    <updated>2018-09-17T09:58:31.439Z</updated>
    
    <content type="html"><![CDATA[<p>Jmeter分布式环境搭建</p><a id="more"></a><p>本地机器配置限制，并发线程数达不到性能要求时候，就要考虑搭建jmeter分布式环境来进行压测</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>1、Jmeter分布式测试时，选择其中一台作为调度机(master)，其它机器做为执行机(slave)。</p><p>2、执行时，master会把脚本发送到每台slave上，slave 拿到脚本后就开始执行，slave执行时不需要启动GUI，我理解它应该是通过命令行模式执行的。</p><p>3、执行完成后，slave会把结果回传给master，master会收集所有slave的信息并汇总。</p><p>示例有三台机器，ip分别为：192.168.3.1,192.168.3.2,192.168.3.3；其中192.168.3.3作为调度机，启动GUI界面</p><h3 id="执行机（slave）配置"><a href="#执行机（slave）配置" class="headerlink" title="执行机（slave）配置"></a>执行机（slave）配置</h3><p>前提条件是执行机所在服务器已经搭建好jmeter执行环境，并且有安装jmeter（建议执行机和调度机jmeter版本完全一致，省的麻烦）<br>进行执行机中（192.168.3.1,192.168.3.2）jmeter安装目录<br>1，编辑<code>jmeter.properties</code>，找到<code>server_port=1099</code>，以及<code>server.rmi.localport=1099</code>修改端口；该端口就是启动<code>jmeter-server.bat</code>之后，控制台显示的端口，也是调度机调度的端口</p><p>2，启动<code>jmeter-server.bat</code>，控制台打印信息类似：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Created remote object: UnicastServerRef2 [liveRef: [endpoint:[192.168.3.1:1099]</span><br><span class="line">local),objID:[1bfcefd1:165e6dc02e3:-7fff, 2154557740781192439]]]</span><br></pre></td></tr></table></figure></p><h3 id="调度机（master）配置"><a href="#调度机（master）配置" class="headerlink" title="调度机（master）配置"></a>调度机（master）配置</h3><p>1，找到bin目录下的<code>jmeter.properties</code>，修改配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote_hosts=192.168.3.1:1099,192.168.3.2:1099</span><br></pre></td></tr></table></figure></p><p>保存退出<br>2，启动GUI（jmeter.bat），打开测试脚本，点击菜单栏的运行，选择远程启动全部（或者指定某台执行机）</p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>1，如果进行了参数化，需要在执行机上和调度机一模一样的路径放置参数化文件</p><p>2，启动执行机时候如果有报错：<code>rmi-keystore.jks（系统找不到指定文件）</code><br>解决办法：编辑<code>jmeter.properties</code>，修改参数：<code>server.rmi.ssl.disable=true</code>即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jmeter分布式环境搭建&lt;/p&gt;
    
    </summary>
    
      <category term="性能测试" scheme="http://tokyle.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Jmeter" scheme="http://tokyle.com/tags/Jmeter/"/>
    
  </entry>
  
  <entry>
    <title>Mysql开启全SQL执行记录</title>
    <link href="http://tokyle.com/2018/09/13/Mysql%E5%BC%80%E5%90%AF%E5%85%A8SQL%E6%89%A7%E8%A1%8C%E8%AE%B0%E5%BD%95/"/>
    <id>http://tokyle.com/2018/09/13/Mysql开启全SQL执行记录/</id>
    <published>2018-09-13T08:05:43.000Z</published>
    <updated>2018-09-13T08:07:14.378Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL记录全执行SQL语句</p><a id="more"></a><p>遇到性能问题时候，排查到数据库部分，一般都是看慢sql，但是有的时候慢sql也看不出什么东西，这个时候，如果可以有办法记录所有执行的sql，那排查起来可以更方便点。</p><h3 id="开启日志查询功能"><a href="#开启日志查询功能" class="headerlink" title="开启日志查询功能"></a>开启日志查询功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;general%&apos;;</span><br></pre></td></tr></table></figure><p>返回结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------------------+----------------------------------------------+</span><br><span class="line">| Variable_name    | Value                                        |</span><br><span class="line">+------------------+----------------------------------------------+</span><br><span class="line">| general_log      | OFF                                          |</span><br><span class="line">| general_log_file | /data/mysql_data/izuf65tvx7it01x88bzbp4z.log |</span><br><span class="line">+------------------+----------------------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>可以看出，当前是关闭状态，开启即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set GLOBAL general_log=&apos;ON&apos;;</span><br></pre></td></tr></table></figure></p><p>再查一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;general%&apos;;</span><br></pre></td></tr></table></figure></p><p>返回结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------------------+----------------------------------------------+</span><br><span class="line">| Variable_name    | Value                                        |</span><br><span class="line">+------------------+----------------------------------------------+</span><br><span class="line">| general_log      | ON                                           |</span><br><span class="line">| general_log_file | /data/mysql_data/izuf65tvx7it01x88bzbp4z.log |</span><br><span class="line">+------------------+----------------------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>搞定，这下，调接口之后就会有完成的sql看了。</p><h3 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h3><p>嗯，这个方式，怎么说呢，自己level太低，不是很看得懂里面记录的，不过binlog文件里记录的的确是全部的sql，最全。<br>binlog使用<code>mysqlbinlog</code>工具来查看。<br>查看binlog状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%log_bin%&quot;;</span><br></pre></td></tr></table></figure></p><p>返回结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---------------------------------+----------------------------------+</span><br><span class="line">| Variable_name                   | Value                            |</span><br><span class="line">+---------------------------------+----------------------------------+</span><br><span class="line">| log_bin                         | ON                               |</span><br><span class="line">| log_bin_basename                | /data/mysql_data/mysql-bin       |</span><br><span class="line">| log_bin_index                   | /data/mysql_data/mysql-bin.index |</span><br><span class="line">| log_bin_trust_function_creators | ON                               |</span><br><span class="line">| log_bin_use_v1_row_events       | OFF                              |</span><br><span class="line">| sql_log_bin                     | ON                               |</span><br><span class="line">+---------------------------------+----------------------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>就能看见binlog状态以及保存路径了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL记录全执行SQL语句&lt;/p&gt;
    
    </summary>
    
      <category term="性能测试" scheme="http://tokyle.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="mysql" scheme="http://tokyle.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter+Ant+Jenkins接口自动化搭建</title>
    <link href="http://tokyle.com/2018/09/12/Jmeter-Ant-Jenkins%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%90%AD%E5%BB%BA/"/>
    <id>http://tokyle.com/2018/09/12/Jmeter-Ant-Jenkins接口自动化搭建/</id>
    <published>2018-09-13T03:35:12.000Z</published>
    <updated>2018-09-13T03:37:37.010Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins+Ant+Jmeter接口自动化实践</p><a id="more"></a><p>虽然之前就搭过了，也用word写过手册，blog因为不放图片就一直没更新，想想还是稍微记录点简单的过程，方便自己以后想起来。</p><p>这边记录的只有Ant+Jmeter，jenkins部分，还是有图比较直观，就不写了，不过那部分也很简单。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>搭建环境不限，linux，Windows都可以</p><h3 id="需要工具"><a href="#需要工具" class="headerlink" title="需要工具"></a>需要工具</h3><p>ant–下载地址：<a href="http://ant.apache.org/bindownload.cgi" target="_blank" rel="noopener">http://ant.apache.org/bindownload.cgi</a><br>jmeter–下载地址：<a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">http://jmeter.apache.org/download_jmeter.cgi</a><br>jenkins–下载地址：<a href="https://jenkins.io/" target="_blank" rel="noopener">https://jenkins.io/</a><br>jdk—下载地址<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><h3 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h3><p>1，    Jenkins也就解压缩，tomcat或者jar启动<br>2，    Jdk安装，配环境变量（JAVA_HOME,path,classpath）<br>(验证：java –version/javac)<br>3，    Ant配环境变量（ANT_HOME,path,classpath）<br>(验证：ant –version/ant)</p><h3 id="Jmeter-Ant"><a href="#Jmeter-Ant" class="headerlink" title="Jmeter+Ant"></a>Jmeter+Ant</h3><p>首先是扩展包<br>将jmeter\extras下ant-jmeter-1.1.1.jar的jar包拷到ant的lib目录下</p><h4 id="配置Ant"><a href="#配置Ant" class="headerlink" title="配置Ant"></a>配置Ant</h4><p>本地创建接口自动化项目保存路径，例如：E:\InterfaceAutoTestCode\Quartz<br>进入路径目录，手工创建build.xml(ant按照build.xml文件内容执行)<br><code>build.xml文件内容</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project name=&quot;ant-jmeter-test&quot; default=&quot;run&quot; basedir=&quot;.&quot;&gt;</span><br><span class="line">    &lt;tstamp&gt;</span><br><span class="line">        &lt;format property=&quot;time&quot; pattern=&quot;yyyyMMddhhmm&quot; /&gt;</span><br><span class="line">    &lt;/tstamp&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 需要改成自己本地的 Jmeter 目录--&gt;  </span><br><span class="line">    &lt;property name=&quot;jmeter.home&quot; value=&quot;D:\QA\apache-jmeter-4.0&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;report.title&quot; value=&quot;接口测试&quot;/&gt;</span><br><span class="line">    &lt;!-- jmeter生成jtl格式的结果报告的路径--&gt; </span><br><span class="line">    &lt;property name=&quot;jmeter.result.jtl.dir&quot; value=&quot;E:\InterfaceAutoTestCode\Quartz\report\jtl&quot; /&gt;</span><br><span class="line">    &lt;!-- jmeter生成html格式的结果报告的路径--&gt;</span><br><span class="line">    &lt;property name=&quot;jmeter.result.html.dir&quot; value=&quot;E:\InterfaceAutoTestCode\Quartz\report\html&quot; /&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!--详细报告--&gt;</span><br><span class="line">&lt;property name=&quot;detail&quot; value=&quot;_detail&quot; /&gt;</span><br><span class="line">&lt;!-- 生成的报告的前缀--&gt;  </span><br><span class="line">    &lt;property name=&quot;ReportName&quot; value=&quot;SmokeReport&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;jmeter.result.jtlName&quot; value=&quot;$&#123;jmeter.result.jtl.dir&#125;/$&#123;ReportName&#125;$&#123;time&#125;.jtl&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;jmeter.result.htmlName&quot; value=&quot;$&#123;jmeter.result.html.dir&#125;/$&#123;ReportName&#125;$&#123;time&#125;.html&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;jmeter.result.jtlNamedetail&quot; value=&quot;$&#123;jmeter.result.jtl.dir&#125;/$&#123;ReportName&#125;$&#123;time&#125;.jtl&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;jmeter.result.htmlNamedetail&quot; value=&quot;$&#123;jmeter.result.html.dir&#125;/$&#123;ReportName&#125;$&#123;time&#125;$&#123;detail&#125;.html&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;target name=&quot;run&quot;&gt;</span><br><span class="line">        &lt;antcall target=&quot;test&quot; /&gt;</span><br><span class="line">        &lt;antcall target=&quot;report&quot; /&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;target name=&quot;test&quot;&gt;</span><br><span class="line">        &lt;taskdef name=&quot;jmeter&quot; classname=&quot;org.programmerplanet.ant.taskdefs.jmeter.JMeterTask&quot; /&gt;</span><br><span class="line">        &lt;jmeter jmeterhome=&quot;$&#123;jmeter.home&#125;&quot; resultlog=&quot;$&#123;jmeter.result.jtlName&#125;&quot;&gt;</span><br><span class="line">             &lt;!-- 声明要运行的脚本。&quot;*.jmx&quot;指包含此目录下的所有jmeter脚本--&gt;</span><br><span class="line">            &lt;testplans dir=&quot;E:\InterfaceAutoTestCode\Quartz&quot; includes=&quot;*.jmx&quot; /&gt;</span><br><span class="line">            &lt;property name=&quot;jmeter.save.saveservice.output_format&quot; value=&quot;xml&quot;/&gt;</span><br><span class="line">        &lt;/jmeter&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;path id=&quot;xslt.classpath&quot;&gt;</span><br><span class="line">        &lt;fileset dir=&quot;$&#123;jmeter.home&#125;/lib&quot; includes=&quot;xalan*.jar&quot;/&gt;</span><br><span class="line">        &lt;fileset dir=&quot;$&#123;jmeter.home&#125;/lib&quot; includes=&quot;serializer*.jar&quot;/&gt;</span><br><span class="line">    &lt;/path&gt; </span><br><span class="line">    </span><br><span class="line">    &lt;target name=&quot;report&quot;&gt;</span><br><span class="line">        &lt;tstamp&gt; &lt;format property=&quot;report.datestamp&quot; pattern=&quot;yyyy/MM/dd HH:mm&quot; /&gt;&lt;/tstamp&gt;</span><br><span class="line">        &lt;xslt </span><br><span class="line">              classpathref=&quot;xslt.classpath&quot;</span><br><span class="line">              force=&quot;true&quot;</span><br><span class="line">              in=&quot;$&#123;jmeter.result.jtlName&#125;&quot;</span><br><span class="line">              out=&quot;$&#123;jmeter.result.htmlName&#125;&quot;</span><br><span class="line">              style=&quot;$&#123;jmeter.home&#125;/extras/jmeter-results-detail-report_21.xsl&quot;&gt;</span><br><span class="line">              &lt;param name=&quot;dateReport&quot; expression=&quot;$&#123;report.datestamp&#125;&quot;/&gt;</span><br><span class="line">       &lt;/xslt&gt;</span><br><span class="line">       &lt;xslt </span><br><span class="line">              classpathref=&quot;xslt.classpath&quot;</span><br><span class="line">              force=&quot;true&quot;</span><br><span class="line">              in=&quot;$&#123;jmeter.result.jtlNamedetail&#125;&quot;</span><br><span class="line">              out=&quot;$&#123;jmeter.result.htmlNamedetail&#125;&quot;</span><br><span class="line">              style=&quot;$&#123;jmeter.home&#125;/extras/jmeter-results-shanhe-me.xsl&quot;&gt;</span><br><span class="line">              &lt;param name=&quot;dateReport&quot; expression=&quot;$&#123;report.datestamp&#125;&quot;/&gt;</span><br><span class="line">       &lt;/xslt&gt;</span><br><span class="line">                &lt;!-- 因为上面生成报告的时候，不会将相关的图片也一起拷贝至目标目录，所以，需要手动拷贝 --&gt; </span><br><span class="line">        &lt;copy todir=&quot;$&#123;jmeter.result.html.dir&#125;&quot;&gt;</span><br><span class="line">            &lt;fileset dir=&quot;$&#123;jmeter.home&#125;/extras&quot;&gt;</span><br><span class="line">                &lt;include name=&quot;collapse.png&quot; /&gt;</span><br><span class="line">                &lt;include name=&quot;expand.png&quot; /&gt;</span><br><span class="line">            &lt;/fileset&gt;</span><br><span class="line">        &lt;/copy&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><p>将需要运行的jmeter脚本，拷到该目录下，cmd，进入该目录，执行ant即可</p><blockquote><p><a href="https://testerhome.com/topics/13389" target="_blank" rel="noopener">更详细教程</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins+Ant+Jmeter接口自动化实践&lt;/p&gt;
    
    </summary>
    
      <category term="性能测试" scheme="http://tokyle.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Jmeter" scheme="http://tokyle.com/tags/Jmeter/"/>
    
      <category term="Ant" scheme="http://tokyle.com/tags/Ant/"/>
    
  </entry>
  
  <entry>
    <title>【转】Linux性能监控与分析</title>
    <link href="http://tokyle.com/2018/08/29/%E3%80%90%E8%BD%AC%E3%80%91Linux%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    <id>http://tokyle.com/2018/08/29/【转】Linux性能监控与分析/</id>
    <published>2018-08-29T13:31:17.000Z</published>
    <updated>2018-08-29T09:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux性能监控与分析</p><a id="more"></a><h2 id="Linux服务器性能查看"><a href="#Linux服务器性能查看" class="headerlink" title="Linux服务器性能查看"></a>Linux服务器性能查看</h2><h3 id="CPU性能查看"><a href="#CPU性能查看" class="headerlink" title="CPU性能查看"></a>CPU性能查看</h3><h4 id="查看物理CPU个数："><a href="#查看物理CPU个数：" class="headerlink" title="查看物理CPU个数："></a>查看物理CPU个数：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo |grep &quot;physical id&quot;|sort|uniq|wc -l</span><br></pre></td></tr></table></figure><h4 id="查看每个物理CPU中的core个数："><a href="#查看每个物理CPU中的core个数：" class="headerlink" title="查看每个物理CPU中的core个数："></a>查看每个物理CPU中的core个数：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo |grep &quot;cpu cores&quot;|wc -l</span><br></pre></td></tr></table></figure><h4 id="逻辑CPU个数"><a href="#逻辑CPU个数" class="headerlink" title="逻辑CPU个数"></a>逻辑CPU个数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo |grep &quot;processor&quot;|wc -l</span><br></pre></td></tr></table></figure><p>物理cpu个数*核数=逻辑cpu个数（不支持超线程技术的情况下）</p><h3 id="内存查看"><a href="#内存查看" class="headerlink" title="内存查看"></a>内存查看</h3><h4 id="查看内存使用情况"><a href="#查看内存使用情况" class="headerlink" title="查看内存使用情况"></a>查看内存使用情况</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#free -m</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          3949       2519       1430          0        189       1619</span><br><span class="line">-/+ buffers/cache:        710       3239</span><br><span class="line">Swap:         3576          0       3576</span><br><span class="line"></span><br><span class="line">total：内存总数</span><br><span class="line">used：已经使用的内存数</span><br><span class="line">free：空闲内存数</span><br><span class="line">shared：多个进程共享的内存总额</span><br><span class="line">- buffers/cache：(已用)的内存数，即used-buffers-cached</span><br><span class="line">+ buffers/cache：(可用)的内存数，即free+buffers+cached</span><br><span class="line"></span><br><span class="line">Buffer Cache用于针对磁盘块的读写；</span><br><span class="line">Page Cache用于针对文件inode的读写，这些Cache能有效地缩短I/O系统调用的时间。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对操作系统来说free/used是系统可用/占用的内存；</span><br><span class="line">对应用程序来说-/+ buffers/cache是可用/占用内存,因为buffers/cache很快就会被使用。</span><br></pre></td></tr></table></figure><h3 id="硬盘查看"><a href="#硬盘查看" class="headerlink" title="硬盘查看"></a>硬盘查看</h3><h4 id="查看硬盘及分区信息"><a href="#查看硬盘及分区信息" class="headerlink" title="查看硬盘及分区信息"></a>查看硬盘及分区信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure><h4 id="查看文件系统的磁盘空间占用情况："><a href="#查看文件系统的磁盘空间占用情况：" class="headerlink" title="查看文件系统的磁盘空间占用情况："></a>查看文件系统的磁盘空间占用情况：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><h4 id="查看硬盘的I-O性能（每隔一秒显示一次，显示五次）"><a href="#查看硬盘的I-O性能（每隔一秒显示一次，显示五次）" class="headerlink" title="查看硬盘的I/O性能（每隔一秒显示一次，显示五次）"></a>查看硬盘的I/O性能（每隔一秒显示一次，显示五次）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat -x 1 5</span><br></pre></td></tr></table></figure><p>iostat是含在套装systat中的,可以用yum -y install systat来安装<br>常关注的参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如%util接近100%,说明产生的I/O请求太多，I/O系统已经满负荷，该磁盘可能存在瓶颈。</span><br><span class="line">如idle小于70%，I/O的压力就比较大了，说明读取进程中有较多的wait。</span><br></pre></td></tr></table></figure></p><h4 id="查看linux下某目录的大小"><a href="#查看linux下某目录的大小" class="headerlink" title="查看linux下某目录的大小"></a>查看linux下某目录的大小</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh 目录</span><br></pre></td></tr></table></figure><p>如发现某个分区空间接近用完，可以进入该分区的挂载点，用以下命令找出<code>占用空间最多的文件或目录</code>，然后按照从达到小的顺序，找出系统中占用最多空间的前10个文件或目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -cksh *|sort -rn|head -n 10</span><br></pre></td></tr></table></figure></p><h3 id="查看平均负载"><a href="#查看平均负载" class="headerlink" title="查看平均负载"></a>查看平均负载</h3><p>有时候系统响应很慢，又找不到原因，这是就要查看平均负载，看它是否有大量的进程在排队等待<br>最简单的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uptime--查看过去的1分钟、5分钟和15分钟内进程队列中的平均进程数量。</span><br></pre></td></tr></table></figure></p><p>还有动态命令top<br>我们只关心以下部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">top - 21:33:09 up  1:00,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class="line"></span><br><span class="line">如果每个逻辑cpu当前的活动进程不大于3，则系统性能良好；</span><br><span class="line">如果每个逻辑cpu当前的活动进程不大于4，表示可以接受；</span><br><span class="line">如果每个逻辑cpu当前的活动进程大于5，则系统性能问题严重。</span><br></pre></td></tr></table></figure></p><p>一般计算方法：负载值/逻辑CPU个数<br>还可以结合<code>vmstat</code>命令来判断是否繁忙，其中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">procs</span><br><span class="line">r：等待运行的进程数。</span><br><span class="line">b：处在非中断睡眠状态的进程数。</span><br><span class="line">w：被交换出去的可运行的进程数。</span><br><span class="line"></span><br><span class="line">memeory</span><br><span class="line">swpd：虚拟内存使用情况，单位为KB。</span><br><span class="line">free：空闲的内存，单位为KB。</span><br><span class="line">buff：被用来作为缓存的内存数，单位为KB。</span><br><span class="line"></span><br><span class="line">swap</span><br><span class="line">si：从磁盘交换到内存的交换页数量，单位为KB。</span><br><span class="line">so：从内存交换到磁盘的交换页数量，单位为KB。</span><br><span class="line"></span><br><span class="line">io</span><br><span class="line">bi：发送到块设备的块数，单位为KB。</span><br><span class="line">bo：从块设备接受的块数，单位为KB。</span><br><span class="line"></span><br><span class="line">system</span><br><span class="line">in：每秒的中断数，包括时钟中断。</span><br><span class="line">cs：每秒的环境切换次数。</span><br><span class="line"></span><br><span class="line">cpu</span><br><span class="line">按cpu的总使用百分比来显示。</span><br><span class="line">us：cpu使用时间。</span><br><span class="line">sy：cpu系统使用时间。</span><br><span class="line">id：闲置时间。</span><br></pre></td></tr></table></figure></p><h3 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">查看内核版本号：</span><br><span class="line">uname -a</span><br><span class="line"></span><br><span class="line">简化命令：uname -r</span><br><span class="line"></span><br><span class="line">查看系统是32位还是64位的：</span><br><span class="line">file /sbin/init</span><br><span class="line"></span><br><span class="line">查看发行版：</span><br><span class="line">cat /etc/issue</span><br><span class="line">或lsb_release -a</span><br><span class="line"></span><br><span class="line">查看系统已载入的相关模块：</span><br><span class="line">lsmod</span><br><span class="line"></span><br><span class="line">查看pci设置：</span><br><span class="line">lspci</span><br></pre></td></tr></table></figure><h2 id="Linux-服务器性能评估"><a href="#Linux-服务器性能评估" class="headerlink" title="Linux 服务器性能评估"></a>Linux 服务器性能评估</h2><h3 id="影响Linux服务器性能的因素"><a href="#影响Linux服务器性能的因素" class="headerlink" title="影响Linux服务器性能的因素"></a>影响Linux服务器性能的因素</h3><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CPU</span><br><span class="line">内存</span><br><span class="line">磁盘I/O带宽</span><br><span class="line">网络I/O带宽</span><br></pre></td></tr></table></figure><h4 id="程序应用级"><a href="#程序应用级" class="headerlink" title="程序应用级"></a>程序应用级</h4><h5 id="系统性能评估标准"><a href="#系统性能评估标准" class="headerlink" title="系统性能评估标准"></a>系统性能评估标准</h5><table><thead><tr><th>影响性能因素</th><th>好</th><th>坏</th><th>糟糕</th></tr></thead><tbody><tr><td>CPU</td><td>user% + sys%&lt; 70%</td><td>user% + sys%= 85%</td><td>user% + sys% &gt;=90%</td></tr><tr><td>内存</td><td>Swap In（si）＝0 Swap Out（so）＝0</td><td>Per CPU with 10 page/s</td><td>More Swap In &amp; Swap Out</td></tr><tr><td>磁盘</td><td>iowait % &lt; 20%</td><td>iowait % =35%</td><td>iowait % &gt;= 50%</td></tr></tbody></table><p>其中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%user：表示CPU处在用户模式下的时间百分比。</span><br><span class="line">%sys：表示CPU处在系统模式下的时间百分比。</span><br><span class="line">%iowait：表示CPU等待输入输出完成时间的百分比。</span><br><span class="line">swap in：即si，表示虚拟内存的页导入，即从SWAP DISK交换到RAM</span><br><span class="line">swap out：即so，表示虚拟内存的页导出，即从RAM交换到SWAP DISK</span><br></pre></td></tr></table></figure></p><h5 id="系统性能分析工具"><a href="#系统性能分析工具" class="headerlink" title="系统性能分析工具"></a>系统性能分析工具</h5><p>常用系统命令：<code>vmstat</code>,<code>sar</code>,<code>iostat</code>,<code>netstat</code>,<code>free</code>,<code>top</code><br>常用组合方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vmstat、sar、iostat检测是否是CPU瓶颈</span><br><span class="line">free、vmstat检测是否是内存瓶颈</span><br><span class="line">iostat检测是否是磁盘I/O瓶颈</span><br><span class="line">netstat检测是否是网络带宽瓶颈</span><br></pre></td></tr></table></figure></p><h5 id="Linux性能评估与优化"><a href="#Linux性能评估与优化" class="headerlink" title="Linux性能评估与优化"></a>Linux性能评估与优化</h5><p>系统整体性能评估（uptime命令）<br><code>uptime</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16:38:00 up 118 days, 3:01, 5 users,load average: 1.22, 1.02, 0.91</span><br></pre></td></tr></table></figure></p><p>注意：</p><ul><li><p>load average三值大小一般不能大于系统CPU的个数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">系统有8个CPU,如load average三值长期大于8，说明CPU很繁忙，负载很高，可能会影响系统性能。</span><br></pre></td></tr></table></figure></li><li><p>但偶尔大于8，一般不会影响系统性能。</p></li><li>如load average输出值小于CPU个数，则表示CPU有空闲时间片，比如本例中的输出，CPU是非常空闲的</li></ul><h5 id="CPU性能评估"><a href="#CPU性能评估" class="headerlink" title="CPU性能评估"></a>CPU性能评估</h5><h6 id="vmstat监控CPU"><a href="#vmstat监控CPU" class="headerlink" title="vmstat监控CPU"></a>vmstat监控CPU</h6><p>显示系统各资源之间相关性能简要信息，主要看CPU负载情况<br>下面是vmstat输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@izuf6b0a7e5agj4lm7aj3mz ~]# vmstat 2 3</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 3  0      0 12267888 166640 1863724    0    0     1    41   72   88  3  1 96  0  0</span><br><span class="line"> 2  0      0 12267872 166640 1863724    0    0     0     0 66000 163918 15 17 68  0  0</span><br><span class="line"> 2  0      0 12267872 166640 1863724    0    0     0   158 18689 43630 40  5 55  0  0</span><br></pre></td></tr></table></figure></p><p>r–运行和等待cpu时间片的进程数，这个值如果长期大于系统CPU的个数，说明CPU不足，需要增加CPU<br>b–在等待资源的进程数，比如正在等待I/O、或者内存交换等。<br><em>CPU</em><br><em>us</em><br>用户进程消耗的CPU时间百分比<br>us的值比较高时，说明用户进程消耗的cpu时间多，但是如果长期大于50%，就需要考虑优化程序或算法。</p><p><em>sy</em><br>内核进程消耗的CPU时间百分比，Sy的值较高时，说明内核消耗的CPU资源很多<br>根据经验，us+sy的参考值为80%，如果大于80%可能存在CPU资源不足。</p><h6 id="sar命令监控系统CPU"><a href="#sar命令监控系统CPU" class="headerlink" title="sar命令监控系统CPU"></a>sar命令监控系统CPU</h6><p><code>sar</code>对系统每个方面进行单独统计，但会增加系统开销，不过开销可以评估，对系统的统计结果不会有很大影响<br>下面是sar命令对系统CPU的统计输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@izuf6b0a7e5agj4lm7aj3mz ~]# sar -u 3 5</span><br><span class="line">Linux 3.10.0-693.2.2.el7.x86_64 (izuf6b0a7e5agj4lm7aj3mz) 08/29/2018 _x86_64_(4 CPU)</span><br><span class="line"></span><br><span class="line">03:05:20 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle</span><br><span class="line">03:05:23 PM     all      0.08      0.00      0.08      0.08      0.00     99.75</span><br><span class="line">03:05:26 PM     all      0.08      0.00      0.00      0.00      0.00     99.92</span><br><span class="line">03:05:29 PM     all      0.08      0.00      0.08      0.00      0.00     99.83</span><br><span class="line">03:05:32 PM     all      0.33      0.00      0.08      0.00      0.00     99.58</span><br><span class="line">03:05:35 PM     all      0.08      0.00      0.08      0.00      0.00     99.83</span><br><span class="line">Average:        all      0.13      0.00      0.07      0.02      0.00     99.78</span><br></pre></td></tr></table></figure></p><p>输出解释如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%user列显示了用户进程消耗的CPU 时间百分比。</span><br><span class="line">%nice列显示了运行正常进程所消耗的CPU 时间百分比。</span><br><span class="line">%system列显示了系统进程消耗的CPU时间百分比。</span><br><span class="line">%iowait列显示了IO等待所占用的CPU时间百分比</span><br><span class="line">%steal列显示了在内存相对紧张的环境下pagein强制对不同的页面进行的steal操作 。</span><br><span class="line">%idle列显示了CPU处在空闲状态的时间百分比。</span><br></pre></td></tr></table></figure></p><p>问题：你是否遇到过系统CPU整体利用率不高，而应用缓慢的现象？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在一个多CPU的系统中，如果程序使用了单线程，会出现一个现象，CPU的整体使用率不高，但是系统应用却响应缓慢，这可能是由于程序使用单线程的原因，单线程只使用一个CPU，导致这个CPU占用率为100%，无法处理其他请求，而其他CPU却闲置，这就导致了整体CPU使用率不是很高，而应用缓慢</span><br></pre></td></tr></table></figure></p><h5 id="内存性能评估"><a href="#内存性能评估" class="headerlink" title="内存性能评估"></a>内存性能评估</h5><h6 id="free监控内存"><a href="#free监控内存" class="headerlink" title="free监控内存"></a>free监控内存</h6><p>free是监控Linux内存使用情况的最常用指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@izuf6b0a7e5agj4lm7aj3mz ~]# free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          15886        1925       11977           0        1983       13651</span><br><span class="line">Swap:             0           0           0</span><br></pre></td></tr></table></figure></p><p>经验公式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">应用程序可用内存/系统物理内存&gt;70%，表示系统内存资源非常充足，不影响系统性能;</span><br><span class="line">应用程序可用内存/系统物理内存&lt;20%，表示系统内存资源紧缺，需要增加系统内存;</span><br><span class="line">20% &lt; 应用程序可用内存/系统物理内存 &lt; 70%，表示系统内存资源基本能满足应用需求，暂时不影响系统性能</span><br></pre></td></tr></table></figure></p><h6 id="vmstat-监控内存"><a href="#vmstat-监控内存" class="headerlink" title="vmstat 监控内存"></a>vmstat 监控内存</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@izuf6b0a7e5agj4lm7aj3mz ~]# vmstat 2 3</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 1  0      0 12264516 166640 1864120    0    0     1    41   73   89  3  1 96  0  0</span><br><span class="line"> 0  0      0 12264624 166640 1864120    0    0     0     6  489  459  0  0 99  1  0</span><br><span class="line"> 0  0      0 12264624 166640 1864120    0    0     0     0  466  434  0  0 100  0  0</span><br></pre></td></tr></table></figure><p><em>memory</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">swpd--切换到内存交换区的内存数量（k为单位)。如swpd值偶尔非0，不影响系统性能</span><br><span class="line">free--当前空闲的物理内存数量（k为单位）</span><br><span class="line">buff--buffers cache的内存数量，一般对块设备的读写才需要缓冲</span><br><span class="line">cache--page cached的内存数量</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一般作为文件系统cached，频繁访问的文件都会被cached，如cache值较大，说明cached的文件数较多，如果此时IO中bi比较小，说明文件系统效率比较好。</span><br></pre></td></tr></table></figure><p><em>swap</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">si--由磁盘调入内存，也就是内存进入内存交换区的数量。</span><br><span class="line">so--由内存调入磁盘，也就是内存交换区进入内存的数量。</span><br></pre></td></tr></table></figure></p><p>si、so的值长期不为0，表示系统内存不足。需增加系统内存。</p><h5 id="磁盘I-O性能评估"><a href="#磁盘I-O性能评估" class="headerlink" title="磁盘I/O性能评估"></a>磁盘I/O性能评估</h5><h6 id="磁盘存储基础"><a href="#磁盘存储基础" class="headerlink" title="磁盘存储基础"></a>磁盘存储基础</h6><p>频繁访问的文件或数据尽可能用<code>内存读写</code>代替<code>直接磁盘I/O</code>，效率高千倍。<br>将经常进行读写的文件与长期不变的文件独立出来，分别放置到不同的磁盘设备上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于写操作频繁的数据，可以考虑使用裸设备代替文件系统</span><br></pre></td></tr></table></figure></p><p>裸设备优点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据可以直接读写，不需要经过操作系统级缓存，节省内存资源，避免内存资源争用；</span><br><span class="line">避免文件系统级维护开销，如文件系统需维护超级块、I-node等；</span><br><span class="line">避免操作系统cache预读功能，减少了I/O请求</span><br></pre></td></tr></table></figure></p><p>裸设备缺点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据管理、空间管理不灵活，需要很专业的人来操作</span><br></pre></td></tr></table></figure></p><h6 id="iostat-评估磁盘性能"><a href="#iostat-评估磁盘性能" class="headerlink" title="iostat 评估磁盘性能"></a>iostat 评估磁盘性能</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@izuf6b0a7e5agj4lm7aj3mz ~]# iostat -d 2 3</span><br><span class="line">Linux 3.10.0-693.2.2.el7.x86_64 (izuf6b0a7e5agj4lm7aj3mz) 08/29/2018 _x86_64_(4 CPU)</span><br><span class="line"></span><br><span class="line">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class="line">vda              21.91         2.71       161.83     243237   14531624</span><br><span class="line">vdb               0.00         0.02         0.00       2080          0</span><br><span class="line"></span><br><span class="line">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class="line">vda               0.00         0.00         0.00          0          0</span><br><span class="line">vdb               0.00         0.00         0.00          0          0</span><br><span class="line"></span><br><span class="line">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class="line">vda               0.00         0.00         0.00          0          0</span><br><span class="line">vdb               0.00         0.00         0.00          0          0</span><br></pre></td></tr></table></figure><p>字段解释：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Blk_read/s--每秒读取数据块数</span><br><span class="line">Blk_wrtn/s--每秒写入数据块数</span><br><span class="line">Blk_read--读取的所有块数</span><br><span class="line">Blk_wrtn--写入的所有块数</span><br></pre></td></tr></table></figure></p><p>可通过Blk_read/s和Blk_wrtn/s值对磁盘的读写性能有一个基本的了解<br>如Blk_wrtn/s值很大，表示磁盘写操作很频繁，考虑优化磁盘或程序<br>如Blk_read/s值很大，表示磁盘直接读操作很多，可将读取的数据放入内存</p><p>规则遵循：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">长期的、超大的数据读写，肯定是不正常的，这种情况一定会影响系统性能</span><br></pre></td></tr></table></figure></p><h6 id="sar-评估磁盘性能"><a href="#sar-评估磁盘性能" class="headerlink" title="sar 评估磁盘性能"></a>sar 评估磁盘性能</h6><p><code>sar -d</code>，可以对系统的磁盘IO做一个基本的统计：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@izuf6b0a7e5agj4lm7aj3mz ~]# sar -d 2 3</span><br><span class="line">Linux 3.10.0-693.2.2.el7.x86_64 (izuf6b0a7e5agj4lm7aj3mz) 08/29/2018 _x86_64_(4 CPU)</span><br><span class="line"></span><br><span class="line">03:24:10 PM       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util</span><br><span class="line">03:24:12 PM  dev253-0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">03:24:12 PM dev253-16      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line"></span><br><span class="line">03:24:12 PM       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util</span><br><span class="line">03:24:14 PM  dev253-0      0.50      0.00     16.00     32.00      0.00      0.00      0.00      0.00</span><br><span class="line">03:24:14 PM dev253-16      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line"></span><br><span class="line">03:24:14 PM       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util</span><br><span class="line">03:24:16 PM  dev253-0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">03:24:16 PM dev253-16      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line"></span><br><span class="line">Average:          DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util</span><br><span class="line">Average:     dev253-0      0.17      0.00      5.33     32.00      0.00      0.00      0.00      0.00</span><br><span class="line">Average:    dev253-16      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br></pre></td></tr></table></figure></p><p>参数含义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">await--平均每次设备I/O操作等待时间（毫秒）</span><br><span class="line">svctm--平均每次设备I/O操作的服务时间（毫秒）</span><br><span class="line">%util--一秒中有百分之几的时间用于I/O操作</span><br></pre></td></tr></table></figure></p><p>对磁盘IO性能评判标准：<br>正常svctm应小于await值，而svctm和磁盘性能有关，CPU、内存符合也会对svctm值造成影响，过多的情趣也会间接导致svctm值的增加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">await值取决于svctm和I/O队列长度以及I/O请求模式</span><br><span class="line">如果svctm的值与await很接近，表示几乎没有I/O等待，磁盘性能很好，</span><br><span class="line">如果await的值远高于svctm的值，则表示I/O队列等待太长，系统上运行的应用程序将变慢，</span><br><span class="line">此时可以通过更换更快的硬盘来解决问题。</span><br></pre></td></tr></table></figure></p><p><code>%util</code>–衡量磁盘I/O重要指标：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如%util接近100%，表示磁盘产生的I/O请求太多，I/O系统已经满符合工作，该磁盘可能存在瓶颈</span><br></pre></td></tr></table></figure></p><p>可优化程序或者通过更换更高、更快的磁盘</p><h5 id="网络性能评估"><a href="#网络性能评估" class="headerlink" title="网络性能评估"></a>网络性能评估</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）通过ping命令检测网络的连通性</span><br><span class="line">（2）通过netstat –i组合检测网络接口状况</span><br><span class="line">（3）通过netstat –r组合检测系统的路由表信息</span><br><span class="line">（4）通过sar –n组合显示系统的网络运行状态</span><br></pre></td></tr></table></figure><h2 id="Linux服务器性能调优"><a href="#Linux服务器性能调优" class="headerlink" title="Linux服务器性能调优"></a>Linux服务器性能调优</h2><h3 id="为磁盘I-O调整Linux内核电梯算法"><a href="#为磁盘I-O调整Linux内核电梯算法" class="headerlink" title="为磁盘I/O调整Linux内核电梯算法"></a>为磁盘I/O调整Linux内核电梯算法</h3><p>选择文件系统之后，该算法可以平衡低延时需求，搜集足够数据，有效组织对磁盘读写请求</p><h3 id="禁用不必要的守护进程，节省内存和CPU资源"><a href="#禁用不必要的守护进程，节省内存和CPU资源" class="headerlink" title="禁用不必要的守护进程，节省内存和CPU资源"></a>禁用不必要的守护进程，节省内存和CPU资源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">许多守护进程或服务通常非必需，消耗宝贵内存和CPU时间，将服务器置于险地。</span><br><span class="line">禁用可加快启动时间，释放内存</span><br><span class="line">减少CPU要处理的进程数</span><br></pre></td></tr></table></figure><p>一些被禁用的Linux守护进程，默认自动启动：<br>Apmd 高级电源管理守护进程<br>Nfslock 用于NFS文件锁定<br>Isdn ISDN Moderm支持<br>Autofs 在后台自动挂载文件系统(如自动挂载CD-ROM)<br>Sendmail 邮件传输代理<br>Xfs X Window的字体服务器</p><h3 id="关掉GUI"><a href="#关掉GUI" class="headerlink" title="关掉GUI"></a>关掉GUI</h3><h3 id="清理不需要的模块或功能"><a href="#清理不需要的模块或功能" class="headerlink" title="清理不需要的模块或功能"></a>清理不需要的模块或功能</h3><p>服务器软件包中太多被启动的功能或模块实际上是不需要的（如Apache中的许多功能模块），禁用掉有助于提高系统内存可用量，腾出资源给哪些真正需要的软件</p><h3 id="禁用控制面板"><a href="#禁用控制面板" class="headerlink" title="禁用控制面板"></a>禁用控制面板</h3><p>在Linux中，有许多流行的控制面板，如Cpanel，Plesk，Webmin和phpMyAdmin等，禁用释放出大约120MB内存</p><h3 id="改善Linux-Exim服务器性能"><a href="#改善Linux-Exim服务器性能" class="headerlink" title="改善Linux Exim服务器性能"></a>改善Linux Exim服务器性能</h3><p>使用DNS缓存守护进程，可降低解析DNS记录需要的带宽和CPU时间，DNS缓存通过消除每次都从根节点开始查找DNS记录的需求，从而改善网络性能。</p><p>Djbdns是一个非常强大的DNS服务器，它具有DNS缓存功能，Djbdns比BIND DNS服务器更安全，性能更好，可以直接通过<a href="http://cr.yp.to/下载，或通过Red" target="_blank" rel="noopener">http://cr.yp.to/下载，或通过Red</a> Hat提供的软件包获得。</p><h3 id="使用AES256增强gpg文件加密安全"><a href="#使用AES256增强gpg文件加密安全" class="headerlink" title="使用AES256增强gpg文件加密安全"></a>使用AES256增强gpg文件加密安全</h3><p>为提高备份文件或敏感信息安全，许多Linux系统管理员都使用gpg进行加密，在使用gpg时，最好指定gpg使用AES256加密算法，AES256使用256位密钥，它是一个开放的加密算法，美国国家安全局(NSA)使用它保护绝密信息</p><h3 id="远程备份服务安全"><a href="#远程备份服务安全" class="headerlink" title="远程备份服务安全"></a>远程备份服务安全</h3><p>安全是选择远程备份服务最重要的因素，大多数系统管理员都害怕两件事：(黑客)可以删除备份文件，不能从备份恢复系统。</p><p>为了保证备份文件100%的安全，备份服务公司提供远程备份服务器，使用scp脚本或RSYNC通过SSH传输数据，这样，没有人可以直接进入和访问远程系统，因此，也没有人可以从备份服务删除数据。在选择远程备份服务提供商时，最好从多个方面了解其服务强壮性，如果可以，可以亲自测试一下。</p><h3 id="更新默认内核参数设置"><a href="#更新默认内核参数设置" class="headerlink" title="更新默认内核参数设置"></a>更新默认内核参数设置</h3><p>为了顺利和成功运行企业应用程序，如数据库服务器，可能需要更新一些默认的内核参数设置，例如，2.4.x系列内核消息队列参数msgmni有一个默认值(例如，共享内存，或shmmax在Red Hat系统上默认只有33554432字节)，它只允许有限的数据库并发连接，下面为数据库服务器更好地运行提供了一些建议值(来自IBM DB2支持网站)：</p><p>kernel.shmmax=268435456 (32位)<br>kernel.shmmax=1073741824 (64位)<br>kernel.msgmni=1024<br>fs.file-max=8192<br>kernel.sem=”250 32000 32 1024″</p><h3 id="优化TCP"><a href="#优化TCP" class="headerlink" title="优化TCP"></a>优化TCP</h3><p>优化TCP协议有助于提高网络吞吐量，跨广域网的通信使用的带宽越大，延迟时间越长时，建议使用越大的TCP Linux大小，以提高数据传输速率，TCP Linux大小决定了发送主机在没有收到数据传输确认时，可以向接收主机发送多少数据</p><h3 id="选择正确的文件系统"><a href="#选择正确的文件系统" class="headerlink" title="选择正确的文件系统"></a>选择正确的文件系统</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用ext4文件系统代替ext3</span><br></pre></td></tr></table></figure><ul><li>Ext4是ext3文件系统的增强版，扩展了存储限制</li><li>具有日志功能，保证高水平的数据完整性(在非正常关闭事件中)</li><li>非正常关闭和重启时，它不需要检查磁盘(这是一个非常耗时的动作)</li><li>更快的写入速度，ext4日志优化了硬盘磁头动作</li></ul><h3 id="使用noatime文件系统挂载选项"><a href="#使用noatime文件系统挂载选项" class="headerlink" title="使用noatime文件系统挂载选项"></a>使用noatime文件系统挂载选项</h3><p>在文件系统启动配置文件fstab中使用noatime选项，如果使用了外部存储，这个挂载选项可以有效改善性能。</p><h3 id="调整Linux文件描述符限制"><a href="#调整Linux文件描述符限制" class="headerlink" title="调整Linux文件描述符限制"></a>调整Linux文件描述符限制</h3><p>Linux限制了任何进程可以打开的文件描述符数量，默认限制是每进程1024，这些限制可能会阻碍基准测试客户端(如httperf和apachebench)和Web服务器本身获得最佳性能，Apache每个连接使用一个进程，因此不会受到影响，但单进程Web服务器，如Zeus是每连接使用一个文件描述符，因此很容易受默认限制的影响。</p><p>打开文件限制是一个可以用ulimit命令调整的限制，ulimit -aS命令显示当前的限制，ulimit -aH命令显示硬限制(在未调整/proc中的内核参数前，你不能增加限制)。</p><p>Linux第三方应用程序性能技巧</p><p>对于运行在Linux上的第三方应用程序，一样有许多性能优化技巧，这些技巧可以帮助你提高Linux服务器的性能，降低运行成本。</p><h3 id="正确配置Mysql"><a href="#正确配置Mysql" class="headerlink" title="正确配置Mysql"></a>正确配置Mysql</h3><p>为了给MySQL分配更多的内存，可设置MySQL缓存大小，要是MySQL服务器实例使用了更多内存，就减少缓存大小，如果MySQL在请求增多时停滞不动，就增加MySQL缓存。</p><h3 id="正确配置Apache"><a href="#正确配置Apache" class="headerlink" title="正确配置Apache"></a>正确配置Apache</h3><p>检查Apache使用了多少内存，再调整StartServers和MinSpareServers参数，以释放更多的内存</p><h3 id="分析Linux服务器性能"><a href="#分析Linux服务器性能" class="headerlink" title="分析Linux服务器性能"></a>分析Linux服务器性能</h3><p>提高系统效率最好的办法是找出导致整体速度下降的瓶颈并解决掉，下面是找出系统关键瓶颈的一些基本技巧：</p><ul><li>当大型应用程序，如OpenOffice和Firefox同时运行时，计算机可能会开始变慢，内存不足的出现几率更高</li><li>如果启动时真的很慢，可能是应用程序初次启动需要较长的加载时间，一旦启动好后运行就正常了，否则很可能是硬盘太慢了。</li><li>CPU负载持续很高，内存也够用，但CPU利用率很低，可以使用CPU负载分析工具监控负载时间。</li></ul><h3 id="学习5个linux性能命令"><a href="#学习5个linux性能命令" class="headerlink" title="学习5个linux性能命令"></a>学习5个linux性能命令</h3><p>使用几个命令就可以管理Linux系统的性能了，下面列出了5个最常用的Linux性能命令，包括<br><code>top</code>、<code>vmstat</code>、<code>iostat</code>、<code>free</code>和<code>sar</code>，它们有助于系统管理员快速解决性能问题。</p><h3 id="将日志文件转移到内存中"><a href="#将日志文件转移到内存中" class="headerlink" title="将日志文件转移到内存中"></a>将日志文件转移到内存中</h3><p>当一台机器处于运行中时，最好是将系统日志放在内存中，当系统关闭时再将其复制到硬盘，当你运行一台开启了syslog功能的笔记本电脑或移动设备时，ramlog可以帮助你提高系统电池或移动设备闪存驱动器的寿命，使用ramlog的一个好处是，不用再担心某个守护进程每隔30秒向syslog发送一条消息，放在以前，硬盘必须随时保持运转，这样对硬盘和电池都不好。</p><h3 id="先打包，后写入"><a href="#先打包，后写入" class="headerlink" title="先打包，后写入"></a>先打包，后写入</h3><p>在内存中划分出固定大小的空间保存日志文件，这意味着笔记本电脑硬盘不用一直保持运转，只有当某个守护进程需要写入日志时才运转，注意ramlog使用的内存空间大小是固定的，否则系统内存会很快被用光，如果笔记本使用固态硬盘，可以分配50-80MB内存给ramlog使用，ramlog可以减少许多写入周期，极大地提高固态硬盘的使用寿命</p><h3 id="一般调优技巧"><a href="#一般调优技巧" class="headerlink" title="一般调优技巧"></a>一般调优技巧</h3><p>尽可能使用静态内容替代动态内容，如果你在生成天气预告，或其它每隔1小时就必须更新的数据，最好是写一个程序，每隔1小时生成一个静态的文件，而不是让用户运行一个CGI动态地生成报告。</p><p>为动态应用程序选择最快最合适的API，CGI可能最容易编程，但它会为每个请求产生一个进程，通常，这是一个成本很高，且不必要的过程，FastCGI是更好的选择，和Apache的mod_perl一样，都可以极大地提高应用程序的性能。</p><blockquote><p><a href="https://www.cnblogs.com/ace-lee/p/6628079.html" target="_blank" rel="noopener">转自原博客</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux性能监控与分析&lt;/p&gt;
    
    </summary>
    
      <category term="性能测试" scheme="http://tokyle.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Linux" scheme="http://tokyle.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Centos7搭建SonarQube</title>
    <link href="http://tokyle.com/2018/08/23/Centos7%E6%90%AD%E5%BB%BASonarQube/"/>
    <id>http://tokyle.com/2018/08/23/Centos7搭建SonarQube/</id>
    <published>2018-08-23T10:43:12.000Z</published>
    <updated>2018-08-23T07:46:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Centos7搭建代码质量管理平台SonarQube</p><a id="more"></a><p>SonarQube是当前比较热门的代码质量管理平台，平台开源，支持多种语言。</p><h3 id="搭建之前"><a href="#搭建之前" class="headerlink" title="搭建之前"></a>搭建之前</h3><p>首先，要确保当前安装服务器已经安装了jdk（最好1.8+），以及MySQL数据库<br>安装jdk：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java-1.8.0-openjdk* -y</span><br></pre></td></tr></table></figure></p><p>安装MySQL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">下载源包：</span><br><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line"></span><br><span class="line">安装mysql源:</span><br><span class="line">yum localinstall mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line"></span><br><span class="line">检查是否安装成功：</span><br><span class="line">yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br><span class="line"></span><br><span class="line">安装</span><br><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure></p><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><blockquote><p><a href="https://www.sonarqube.org/downloads/" target="_blank" rel="noopener">sonarqube下载地址</a><br><a href="https://link.jianshu.com/?t=http://repo1.maven.org/maven2/org/codehaus/sonar/runner/sonar-runner-dist/2.4/sonar-runner-dist-2.4.zip" target="_blank" rel="noopener">sonar-runner下载地址</a><br><a href="https://sonarsource.bintray.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.0.3.778-linux.zip" target="_blank" rel="noopener">sonar-scanner下载扫描器地址</a></p></blockquote><h3 id="搭建SonarQube"><a href="#搭建SonarQube" class="headerlink" title="搭建SonarQube"></a>搭建SonarQube</h3><p>首先：SonarQube是服务器端，它主要有两个功能：1.分析源代码；2.因为它内嵌了Apache模块，所以提供Web端的界面访问。<br>SonarQube Runner是一个利用SonarQube服务端分析代码的命令行工具，可以把它简单理解为客户端。<br>所以，为了安装和调试方便，建议SonarQube和SonarQube Runner都下载。</p><h4 id="创建sonar数据库"><a href="#创建sonar数据库" class="headerlink" title="创建sonar数据库"></a>创建sonar数据库</h4><p><code>mysql -uroot -p</code>进入控制台，创建sonar用户及数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line"></span><br><span class="line">CREATE USER &apos;sonar&apos; IDENTIFIED BY &apos;Sonar_1234&apos;;</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON `sonar`.* TO &apos;sonar&apos;@&apos;%&apos; IDENTIFIED BY &apos;Sonar_1234&apos;;</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON `sonar`.* TO &apos;sonar&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;Sonar_1234&apos;;</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></p><h4 id="安装SonarQube"><a href="#安装SonarQube" class="headerlink" title="安装SonarQube"></a>安装SonarQube</h4><p>进入安装目录，这边用的是<code>/usr/local</code>，<code>rz</code>（yum install lrzsz）将下载的<code>sonarqube-6.7.5.zip</code>,<code>sonar-runner-dist-2.4.zip</code>,<code>sonar-scanner-cli-3.0.3.778-linux.zip</code>上传到服务器，解压<code>sonarqube-6.7.5.zip</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip sonarqube-6.7.5.zip</span><br></pre></td></tr></table></figure></p><p>顺便其他两个也解压了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unzip sonar-runner-dist-2.4.zip</span><br><span class="line"></span><br><span class="line">unzip sonar-scanner-cli-3.0.3.778-linux.zip</span><br></pre></td></tr></table></figure></p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p><code>vim /etc/profile</code>，到文件底部，添加环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export SONAR_HOME=/usr/local/sonarqube-6.7.5</span><br><span class="line">export SONAR_RUNNER_HOME=/usr/local/sonar-runner-2.4</span><br><span class="line">PATH=$PATH:$SONAR_HOME/bin:$SONAR_RUNNER_HOME/bin</span><br></pre></td></tr></table></figure></p><p>生效配置：<code>source /etc/profile</code></p><p>验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sonar-runner -v</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost workflow]# sonar-runner -v</span><br><span class="line">SonarQube Runner 2.4</span><br><span class="line">Java 1.8.0_181 Oracle Corporation (64-bit)</span><br><span class="line">Linux 3.10.0-862.9.1.el7.x86_64 amd64</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><h5 id="配置SonarQube"><a href="#配置SonarQube" class="headerlink" title="配置SonarQube"></a>配置SonarQube</h5><p>进入配置文件mulu：<code>cd /usr/local/sonarqube-6.7.5/conf</code><br>修改配置文件：<code>vim  sonar.properties</code>，修改内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sonar.jdbc.username=sonar（第16行）</span><br><span class="line">sonar.jdbc.password=Sonar_1234（第17行）</span><br><span class="line"></span><br><span class="line">sonar.jdbc.url=jdbc:mysql://127.0.0.1:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=false（第26行）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sonar.web.host=192.168.0.91（第105行）</span><br><span class="line"></span><br><span class="line">sonar.web.port=9000（第111行）</span><br></pre></td></tr></table></figure></p><h5 id="配置-sonar-runner"><a href="#配置-sonar-runner" class="headerlink" title="配置 sonar-runner"></a>配置 sonar-runner</h5><p>进入目录<code>cd /usr/local/sonar-runner-2.4/conf</code>，修改配置文件：<code>vim sonar-runner.properties</code><br>修改内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#Configure here general information about the environment, such as SonarQube DB details for example</span><br><span class="line"> 2 #No information about specific project should appear here</span><br><span class="line"> 3 </span><br><span class="line"> 4 #----- Default SonarQube server</span><br><span class="line"> 5 sonar.host.url=http://192.168.0.91:9000</span><br><span class="line"> 6 </span><br><span class="line"> 7 #----- PostgreSQL</span><br><span class="line"> 8 #sonar.jdbc.url=jdbc:postgresql://localhost/sonar</span><br><span class="line"> 9 </span><br><span class="line">10 #----- MySQL</span><br><span class="line">11 sonar.jdbc.url=jdbc:mysql://127.0.0.1:3306/sonar?useUnicode=true&amp;amp;characterEncoding=utf8</span><br><span class="line">12 </span><br><span class="line">13 #----- Oracle</span><br><span class="line">14 #sonar.jdbc.url=jdbc:oracle:thin:@localhost/XE</span><br><span class="line">15 </span><br><span class="line">16 #----- Microsoft SQLServer</span><br><span class="line">17 #sonar.jdbc.url=jdbc:jtds:sqlserver://localhost/sonar;SelectMethod=Cursor</span><br><span class="line">18 </span><br><span class="line">19 #----- Global database settings</span><br><span class="line">20 sonar.jdbc.username=sonar</span><br><span class="line">21 sonar.jdbc.password=Sonar_1234</span><br><span class="line">22 </span><br><span class="line">23 #----- Default source code encoding</span><br><span class="line">24 #sonar.sourceEncoding=UTF-8</span><br><span class="line">25 </span><br><span class="line">26 #----- Security (when &apos;sonar.forceAuthentication&apos; is set to &apos;true&apos;)</span><br><span class="line">27 sonar.login=admin</span><br><span class="line">28 sonar.password=admin</span><br></pre></td></tr></table></figure></p><h4 id="启动sonarqube"><a href="#启动sonarqube" class="headerlink" title="启动sonarqube"></a>启动sonarqube</h4><p>sonarqube需要普通用户才能启动，不能使用root用户，这个比较好办，新建用户和组，更改属组就可以：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -g elasticsearch elasticsearch（前一个elasticsearch是组，后一个是用户）</span><br><span class="line">chown -R elasticsearch：elasticsearch sonarqube-6.7.5</span><br></pre></td></tr></table></figure></p><h5 id="修改elasticsearch配置"><a href="#修改elasticsearch配置" class="headerlink" title="修改elasticsearch配置"></a>修改elasticsearch配置</h5><p><code>cd /usr/local/sonarqube-6.7.5/elasticsearch/config</code>，修改配置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line">network.host: 192.168.0.91</span><br><span class="line">#</span><br><span class="line"># Set a custom port for HTTP:</span><br><span class="line">#</span><br><span class="line">http.port: 9200</span><br></pre></td></tr></table></figure></p><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p><code>cd  /usr/local/sonarqube-6.7.5/bin/linux-x86-64</code><br><code>./sonar.sh start</code><br>启动完成~</p><h3 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h3><p>在没有用到jenkins以及git情况下，只有手动将代码上传到服务器进行打分，后期再弄CI，这边介绍的也就是最简单的上传代码的形式。<br>首先，有一个项目需要sonar进行分析，将代码上传到sonar服务器自定义存放代码的位置，例如<code>/root/sourceCode</code>，上传的项目为<code>QATest</code>，然后在项目根目录创建sonar-runner的配置文件<code>sonar-project.properties</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim sonar-project.properties</span><br></pre></td></tr></table></figure></p><p>内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># must be unique in a given SonarQube instance</span><br><span class="line">sonar.projectKey=my:project</span><br><span class="line"># this is the name displayed in the SonarQube UI</span><br><span class="line">sonar.projectName=My project</span><br><span class="line">sonar.projectVersion=1.0</span><br><span class="line"> </span><br><span class="line"># Path is relative to the sonar-project.properties file. Replace &quot;\&quot; by &quot;/&quot; on Windows.</span><br><span class="line"># Since SonarQube 4.2, this property is optional if sonar.modules is set. </span><br><span class="line"># If not set, SonarQube starts looking for source code from the directory containing </span><br><span class="line"># the sonar-project.properties file.</span><br><span class="line">sonar.sources=.</span><br><span class="line"> </span><br><span class="line"># Encoding of the source code. Default is default system encoding</span><br><span class="line">#sonar.sourceEncoding=UTF-8</span><br></pre></td></tr></table></figure></p><p>保存退出。</p><p>启动sonar-runner：<code>sonar-runner -e -X</code>(打印详细日志)</p><p>进入SonarQube查看分析结果：<br><code>http://192.168.0.91:9000/projects</code>（账密：admin/admin）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Centos7搭建代码质量管理平台SonarQube&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://tokyle.com/categories/Devops/"/>
    
    
      <category term="Centos7" scheme="http://tokyle.com/tags/Centos7/"/>
    
      <category term="SonarQube" scheme="http://tokyle.com/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>Centos7搭建influxdb+chronograf</title>
    <link href="http://tokyle.com/2018/08/20/Centos7%E6%90%AD%E5%BB%BAinfluxdb-chronograf/"/>
    <id>http://tokyle.com/2018/08/20/Centos7搭建influxdb-chronograf/</id>
    <published>2018-08-20T12:46:17.000Z</published>
    <updated>2018-08-20T08:49:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Centos7搭建influxdb+Chronograf</p><p>elasticsearch实验过后，今天尝试了另一种时序数据库<code>influxdb</code></p><a id="more"></a><h3 id="安装Influxdb"><a href="#安装Influxdb" class="headerlink" title="安装Influxdb"></a>安装Influxdb</h3><p>centos7 64位：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.influxdata.com/influxdb/releases/influxdb-1.6.1.x86_64.rpm</span><br><span class="line">sudo yum localinstall influxdb-1.6.1.x86_64.rpm</span><br></pre></td></tr></table></figure></p><p>(附卸载方式，曾经想卸载东西，找半天：<br>ipm包：<br>rpm -qa xxxx(查询安装包)<br>rpm -e xxxx（卸载）</p><p>yum install 安装的包：<br>yum remove xxx)</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>安装完成后，相应配置文件位于：<br><code>/usr/bin</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">influxd          influxdb服务器</span><br><span class="line">influx           influxdb命令行客户端</span><br><span class="line">influx_inspect   查看工具</span><br><span class="line">influx_stress    压力测试工具</span><br><span class="line">influx_tsm       数据库转换工具（将数据库从b1或bz1格式转换为tsm1格式）</span><br></pre></td></tr></table></figure></p><p>数据文件夹：<code>/var/lib/influxdb</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data            存放最终存储的数据，文件以.tsm结尾</span><br><span class="line">meta            存放数据库元数据</span><br><span class="line">wal             存放预写日志文件</span><br></pre></td></tr></table></figure></p><p>以及，配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/influxdb/influxdb.conf</span><br></pre></td></tr></table></figure></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">加自启动：</span><br><span class="line">systemctl enable influxdb</span><br><span class="line">启服务：</span><br><span class="line">systemctl start influxdb</span><br></pre></td></tr></table></figure><p>非服务方式启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost influxdb]# influx</span><br><span class="line">Connected to http://localhost:8086 version 1.6.1</span><br><span class="line">InfluxDB shell version: 1.6.1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><h3 id="安装Chronograf"><a href="#安装Chronograf" class="headerlink" title="安装Chronograf"></a>安装Chronograf</h3><p>好像是1.4版本（具体不记得了），influxdb就去掉了自带的web页面（influxdb.conf中没有admin栏），想要从web页面查看数据，可以安装官方配套的展示工具<code>Chronograf</code>，用着感觉和<code>grafana</code>很像。</p><p>Cnetos 7下安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.influxdata.com/chronograf/releases/chronograf-1.6.1.x86_64.rpm</span><br><span class="line">sudo yum localinstall chronograf-1.6.1.x86_64.rpm</span><br></pre></td></tr></table></figure></p><p>启动：<code>systemctl start chronograf</code><br>默认开启8888端口，浏览器访问<code>http://IP:8888</code>即可（若是在虚拟机安装，打不开，可以尝试用nginx转服务）</p><h3 id="简单语法"><a href="#简单语法" class="headerlink" title="简单语法"></a>简单语法</h3><h4 id="influxdb与传统数据库的比较"><a href="#influxdb与传统数据库的比较" class="headerlink" title="influxdb与传统数据库的比较"></a>influxdb与传统数据库的比较</h4><table><thead><tr><th>influxdb</th><th>MySQL</th></tr></thead><tbody><tr><td>database</td><td>数据库</td></tr><tr><td>measurement</td><td>数据库中的表</td></tr><tr><td>points</td><td>表里面的一行数据</td></tr></tbody></table><p>influxdb数据的构成：<br>Point由时间戳（time）、数据（field）、标签（tags）组成。</p><table><thead><tr><th>Point属性</th><th>传统数据库中的概念</th></tr></thead><tbody><tr><td>time</td><td>每个数据记录时间，是数据库中的主索引(会自动生成)</td></tr><tr><td>fields</td><td>各种记录值（没有索引的属性）也就是记录的值：温度， 湿度</td></tr><tr><td>tags</td><td>各种有索引的属性：地区，海拔</td></tr></tbody></table><h4 id="简单操作"><a href="#简单操作" class="headerlink" title="简单操作"></a>简单操作</h4><p><code>influx</code>进入命令行模式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#创建数据库</span><br><span class="line">create database &quot;db_name&quot;</span><br><span class="line"></span><br><span class="line">#显示所有的数据库</span><br><span class="line">show databases</span><br><span class="line"></span><br><span class="line">#删除数据库</span><br><span class="line">drop database &quot;db_name&quot;</span><br><span class="line"></span><br><span class="line">#使用数据库</span><br><span class="line">use db_name</span><br><span class="line"></span><br><span class="line">#显示该数据库中所有的表</span><br><span class="line">show measurements</span><br><span class="line"></span><br><span class="line">#创建表，直接在插入数据的时候指定表名</span><br><span class="line">insert test,host=127.0.0.1,monitor_name=test count=1</span><br><span class="line"></span><br><span class="line">#删除表</span><br><span class="line">drop measurement &quot;measurement_name&quot;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT cpu,host=serverA,region=us_west value=0.64  //在cpu表中插入相关的数据</span><br><span class="line">SELECT * FROM cpu ORDER BY time DESC LIMIT 3  //查询最近的三条数据</span><br><span class="line">delete from cpu where time=1480235366557373922  //删除某条数据</span><br></pre></td></tr></table></figure><p>用户操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">用户管理</span><br><span class="line">可以通过Chronograf页面做操作，也可以命令行。</span><br><span class="line">#显示用户  </span><br><span class="line">show users</span><br><span class="line"></span><br><span class="line">#创建用户</span><br><span class="line">create user &quot;username&quot; with password &apos;password&apos;</span><br><span class="line"></span><br><span class="line">#创建管理员权限用户</span><br><span class="line">create user &quot;username&quot; with password &apos;password&apos; with all privileges</span><br><span class="line"></span><br><span class="line">#删除用户</span><br><span class="line">drop user &quot;username&quot;</span><br></pre></td></tr></table></figure></p><h3 id="导入测试数据"><a href="#导入测试数据" class="headerlink" title="导入测试数据"></a>导入测试数据</h3><p><code>CREATE DATABASE NOAA_water_database</code><br>下载官方数据集：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://s3.amazonaws.com/noaa.water-database/NOAA_data.txt -o NOAA_data.txt</span><br></pre></td></tr></table></figure></p><p>写数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">influx -import -path=./NOAA_data.txt -precision=s -database=NOAA_water_database</span><br></pre></td></tr></table></figure></p><h3 id="配置文件参考"><a href="#配置文件参考" class="headerlink" title="配置文件参考"></a>配置文件参考</h3><blockquote><p><a href="https://www.cnblogs.com/shhnwangjian/p/6893862.html" target="_blank" rel="noopener">influxdb.conf</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Centos7搭建influxdb+Chronograf&lt;/p&gt;
&lt;p&gt;elasticsearch实验过后，今天尝试了另一种时序数据库&lt;code&gt;influxdb&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://tokyle.com/categories/Devops/"/>
    
    
      <category term="Centos7" scheme="http://tokyle.com/tags/Centos7/"/>
    
      <category term="influxdb" scheme="http://tokyle.com/tags/influxdb/"/>
    
      <category term="Chronograf" scheme="http://tokyle.com/tags/Chronograf/"/>
    
  </entry>
  
  <entry>
    <title>一些常用网站</title>
    <link href="http://tokyle.com/2018/08/15/%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/"/>
    <id>http://tokyle.com/2018/08/15/一些常用网站/</id>
    <published>2018-08-15T07:00:08.000Z</published>
    <updated>2018-08-15T03:02:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>记一些常用的网站</p><a id="more"></a><h3 id="zabbix-模板大全"><a href="#zabbix-模板大全" class="headerlink" title="zabbix 模板大全"></a>zabbix 模板大全</h3><blockquote><p><a href="https://monitoringartist.github.io/zabbix-searcher/#" target="_blank" rel="noopener">zabbix各模板</a></p></blockquote><h3 id="APM鼻祖论文"><a href="#APM鼻祖论文" class="headerlink" title="APM鼻祖论文"></a>APM鼻祖论文</h3><blockquote><p><a href="http://bigbully.github.io/Dapper-translation/" target="_blank" rel="noopener">APM平台的鼻祖</a></p></blockquote><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><blockquote><p><a href="https://regexr.com/" target="_blank" rel="noopener">在线正则表达式工具</a></p></blockquote><h3 id="网页测试工具"><a href="#网页测试工具" class="headerlink" title="网页测试工具"></a>网页测试工具</h3><blockquote><p><a href="http://www.webpagetest.org/" target="_blank" rel="noopener">WebPagetest</a></p><p><a href="https://tools.pingdom.com/" target="_blank" rel="noopener">Pingdom</a></p></blockquote><h3 id="论坛"><a href="#论坛" class="headerlink" title="论坛"></a>论坛</h3><blockquote><p><a href="https://stackoverflow.com/" target="_blank" rel="noopener">stackoverflow</a></p><p><a href="https://testerhome.com/" target="_blank" rel="noopener">testerhome</a></p><p><a href="http://www.51cto.com/" target="_blank" rel="noopener">51CTO</a></p><p><a href="https://juejin.im/" target="_blank" rel="noopener">掘金</a></p><p><a href="https://segmentfault.com/" target="_blank" rel="noopener">思否（segmentfault）</a></p></blockquote><h3 id="电子书网站"><a href="#电子书网站" class="headerlink" title="电子书网站"></a>电子书网站</h3><blockquote><p><a href="https://www.ckook.com/" target="_blank" rel="noopener">稀酷客</a><br><a href="http://www.gutenberg.org/" target="_blank" rel="noopener">Project Gutenberg</a></p></blockquote><h3 id="数据科学项目练习"><a href="#数据科学项目练习" class="headerlink" title="数据科学项目练习"></a>数据科学项目练习</h3><blockquote><p><a href="https://www.kaggle.com/" target="_blank" rel="noopener">Kaggle</a></p></blockquote><h3 id="python-3-cookbook"><a href="#python-3-cookbook" class="headerlink" title="python 3 cookbook"></a>python 3 cookbook</h3><blockquote><p><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">Python3 cookbook</a></p></blockquote><h3 id="Hacker-News"><a href="#Hacker-News" class="headerlink" title="Hacker News"></a>Hacker News</h3><blockquote><p><a href="https://news.ycombinator.com/news" target="_blank" rel="noopener">Hacker News</a></p></blockquote><h3 id="免费图片"><a href="#免费图片" class="headerlink" title="免费图片"></a>免费图片</h3><blockquote><p><a href="https://pixabay.com/" target="_blank" rel="noopener">Pixabay</a></p></blockquote><h3 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h3><blockquote><p><a href="http://www.ttlsa.com/" target="_blank" rel="noopener">运维生存时间</a></p><p><a href="https://www.iyunv.com/" target="_blank" rel="noopener">运维网</a></p></blockquote><h3 id="Rancher"><a href="#Rancher" class="headerlink" title="Rancher"></a>Rancher</h3><blockquote><p><a href="https://rancher.com/docs/rancher/latest/zh/" target="_blank" rel="noopener">Rancher</a></p></blockquote><h3 id="娱乐部分"><a href="#娱乐部分" class="headerlink" title="娱乐部分"></a>娱乐部分</h3><blockquote><p><a href="http://www.acgsou.com/1.html" target="_blank" rel="noopener">ACG动漫种子</a></p><p><a href="https://www.52pojie.cn/" target="_blank" rel="noopener">52破解</a></p><p><a href="http://www.fengniao.com/" target="_blank" rel="noopener">蜂鸟摄影</a></p></blockquote><h3 id="TO-BE-CONTINUED-…"><a href="#TO-BE-CONTINUED-…" class="headerlink" title="TO BE CONTINUED …"></a>TO BE CONTINUED …</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记一些常用的网站&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://tokyle.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="lives" scheme="http://tokyle.com/tags/lives/"/>
    
  </entry>
  
  <entry>
    <title>Centos7开启nginx status</title>
    <link href="http://tokyle.com/2018/08/15/Centos7%E5%BC%80%E5%90%AFnginx-status/"/>
    <id>http://tokyle.com/2018/08/15/Centos7开启nginx-status/</id>
    <published>2018-08-15T06:15:10.000Z</published>
    <updated>2018-08-15T02:16:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>Centos 7开启nginx status</p><a id="more"></a><p>这段时间需要研究APM相关，整理到中间件部分，想到用zabbix来监控Nginx，一般情况下，中间件都有自己的计数器，我们只需要获取计数器的数值即可完成监控。</p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>还是啰嗦一下，安装nginx，一条命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure></p><p>配置文件路径：<br>默认配置：<code>/etc/nginx/nginx.conf</code><br>可自建配置:<code>/etc/nginx/conf.d/yourAPP.conf</code>(需要修改nginx.conf最后的配置文件路径)</p><h3 id="开启nginx-status"><a href="#开启nginx-status" class="headerlink" title="开启nginx status"></a>开启nginx status</h3><p>开启很简单，在配置中增加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location /ngx_status</span><br><span class="line">    &#123;</span><br><span class="line">        stub_status on;</span><br><span class="line">        access_log off;</span><br><span class="line">        allow 127.0.0.1;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>即可；<br>由于之前有帮开发搭建了.net core的环境，就直接在之前搭建的配置文件（LiabTest.conf）里面改了：<br>原文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:5000;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection keep-alive;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_cache_bypass $http_upgrade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>增加status之后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:5000;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection keep-alive;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_cache_bypass $http_upgrade;</span><br><span class="line">    &#125;</span><br><span class="line">    location /ngx_status</span><br><span class="line">    &#123;</span><br><span class="line">        stub_status on;</span><br><span class="line">        access_log off;</span><br><span class="line">        allow 127.0.0.1;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h3><p>重启nginx：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure></p><p>查看status:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1/ngx_status</span><br></pre></td></tr></table></figure></p><p>看到信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@gtp1 conf.d]# curl http://127.0.0.1/ngx_status</span><br><span class="line">Active connections: 1199 </span><br><span class="line">server accepts handled requests</span><br><span class="line"> 158761 158761 158757 </span><br><span class="line">Reading: 0 Writing: 1195 Waiting: 4</span><br></pre></td></tr></table></figure></p><h3 id="nginx-status详解"><a href="#nginx-status详解" class="headerlink" title="nginx status详解"></a>nginx status详解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">active connections – 活跃的连接数量</span><br><span class="line">server accepts handled requests — 总共处理了158761个连接 , 成功创建158761次握手, 总共处理了158757个请求</span><br><span class="line">reading — 读取客户端的连接数.</span><br><span class="line">writing — 响应数据到客户端的数量</span><br><span class="line">waiting — 开启 keep-alive 的情况下,这个值等于 active – (reading+writing), 意思就是 Nginx 已经处理完正在等候下一次请求指令的驻留连接.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Centos 7开启nginx status&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://tokyle.com/categories/Devops/"/>
    
    
      <category term="Centos7" scheme="http://tokyle.com/tags/Centos7/"/>
    
      <category term="Nginx" scheme="http://tokyle.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>ELK环境搭建及测试数据导入</title>
    <link href="http://tokyle.com/2018/08/09/ELK%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5/"/>
    <id>http://tokyle.com/2018/08/09/ELK环境搭建及测试数据导入/</id>
    <published>2018-08-09T10:33:27.000Z</published>
    <updated>2018-08-09T08:29:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>ELK一些前期准备</p><a id="more"></a><p>前面已经搭建过elasticsearch了，和它配套的，L和K：Logstash，Kibana<br>三者关系：Logstash搜集日志，elasticsearch存储，kibana展示</p><h3 id="搭建Logstash、kibana"><a href="#搭建Logstash、kibana" class="headerlink" title="搭建Logstash、kibana"></a>搭建Logstash、kibana</h3><p>首先是官网下载安装包：</p><blockquote><p><a href="https://www.elastic.co/products" target="_blank" rel="noopener">elasic.co</a></p></blockquote><p>下载对应的安装包：<br><code>kibana-6.3.2-linux-x86_64.tar.gz</code><br><code>logstash-6.3.2.tar.gz</code></p><h4 id="安装logstash"><a href="#安装logstash" class="headerlink" title="安装logstash"></a>安装logstash</h4><p>解压缩下载的安装包<code>logstash-6.3.2.tar.gz</code>，进入<code>logstash-6.3.2/config</code>目录，创建配置文件<code>logstash.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim logstash.conf</span><br></pre></td></tr></table></figure></p><p>内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">     file &#123;</span><br><span class="line">        type =&gt; &quot;log&quot;</span><br><span class="line">        path =&gt; &quot;/logs/*.log&quot;</span><br><span class="line">        start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">   codec =&gt; rubydebug &#123; &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; &quot;es地址IP，例如192.168.0.91&quot;</span><br><span class="line">    index =&gt; &quot;log-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>保存退出，进入<code>bin</code>目录，启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./logstash -f ../config/logstash.conf</span><br></pre></td></tr></table></figure></p><h4 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h4><p>解压缩安装包，修改<code>config</code>下配置文件：<code>kibana.yml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server.host: &quot;192.168.0.91&quot;</span><br><span class="line"></span><br><span class="line"># Enables you to specify a path to mount Kibana at if you are running behind a proxy.</span><br><span class="line"># Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath</span><br><span class="line"># from requests it receives, and to prevent a deprecation warning at startup.</span><br><span class="line"># This setting cannot end in a slash.</span><br><span class="line">#server.basePath: &quot;&quot;</span><br><span class="line"></span><br><span class="line"># Specifies whether Kibana should rewrite requests that are prefixed with</span><br><span class="line"># `server.basePath` or require that they are rewritten by your reverse proxy.</span><br><span class="line"># This setting was effectively always `false` before Kibana 6.3 and will</span><br><span class="line"># default to `true` starting in Kibana 7.0.</span><br><span class="line">#server.rewriteBasePath: false</span><br><span class="line"></span><br><span class="line"># The maximum payload size in bytes for incoming server requests.</span><br><span class="line">#server.maxPayloadBytes: 1048576</span><br><span class="line"></span><br><span class="line"># The Kibana server&apos;s name.  This is used for display purposes.</span><br><span class="line">#server.name: &quot;your-hostname&quot;</span><br><span class="line"></span><br><span class="line"># The URL of the Elasticsearch instance to use for all your queries.</span><br><span class="line">elasticsearch.url: &quot;http://192.168.0.91:9200&quot;</span><br></pre></td></tr></table></figure></p><p>需要更改的是两个地方：server.host和elasticsearch.url，更改保存退出~<br>进<code>bin</code>目录，启动服务~</p><h3 id="添加测试数据"><a href="#添加测试数据" class="headerlink" title="添加测试数据"></a>添加测试数据</h3><p><a href="https://www.elastic.co/guide/en/kibana/current/tutorial-load-dataset.html" target="_blank" rel="noopener">官方教程</a></p><p>ElasticSearch的sample data：</p><blockquote><p><a href="https://download.elastic.co/demos/kibana/gettingstarted/accounts.zip" target="_blank" rel="noopener">account.zip</a><br><a href="https://download.elastic.co/demos/kibana/gettingstarted/shakespeare_6.0.json" target="_blank" rel="noopener">shakespeare.json</a><br><a href="https://download.elastic.co/demos/kibana/gettingstarted/logs.jsonl.gz" target="_blank" rel="noopener">logs.json1.gz</a></p></blockquote><p>首先加载account数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application/json&quot; -XPOST &apos;localhost:9200/bank/account/_bulk?pretty&amp;refresh&apos; --data-binary &quot;@accounts.json&quot;</span><br></pre></td></tr></table></figure></p><p>shaekspeare和logs，先做mapping<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &quot;192.168.0.91:9200/shakespeare&quot; -H &apos;Content-Type: application/json&apos; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line"> &quot;mappings&quot;: &#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">   &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;speaker&quot;: &#123;&quot;type&quot;: &quot;keyword&quot;&#125;,</span><br><span class="line">    &quot;play_name&quot;: &#123;&quot;type&quot;: &quot;keyword&quot;&#125;,</span><br><span class="line">    &quot;line_id&quot;: &#123;&quot;type&quot;: &quot;integer&quot;&#125;,</span><br><span class="line">    &quot;speech_number&quot;: &#123;&quot;type&quot;: &quot;integer&quot;&#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&apos;</span><br></pre></td></tr></table></figure></p><p>logs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &quot;localhost:9200/logstash-2015.05.18&quot; -H &apos;Content-Type: application/json&apos; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;log&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;geo&quot;: &#123;</span><br><span class="line">          &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;coordinates&quot;: &#123;</span><br><span class="line">              &quot;type&quot;: &quot;geo_point&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&apos;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &quot;localhost:9200/logstash-2015.05.19&quot; -H &apos;Content-Type: application/json&apos; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;log&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;geo&quot;: &#123;</span><br><span class="line">          &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;coordinates&quot;: &#123;</span><br><span class="line">              &quot;type&quot;: &quot;geo_point&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &quot;localhost:9200/logstash-2015.05.20&quot; -H &apos;Content-Type: application/json&apos; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;log&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;geo&quot;: &#123;</span><br><span class="line">          &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;coordinates&quot;: &#123;</span><br><span class="line">              &quot;type&quot;: &quot;geo_point&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&apos;</span><br></pre></td></tr></table></figure><p>导入数据一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -H &apos;Content-Type: application/x-ndjson&apos; -XPOST &apos;localhost:9200/bank/account/_bulk?pretty&apos; --data-binary @accounts.json</span><br><span class="line">curl -H &apos;Content-Type: application/x-ndjson&apos; -XPOST &apos;localhost:9200/shakespeare/doc/_bulk?pretty&apos; --data-binary @shakespeare_6.0.json</span><br><span class="line">curl -H &apos;Content-Type: application/x-ndjson&apos; -XPOST &apos;localhost:9200/_bulk?pretty&apos; --data-binary @logs.jsonl</span><br></pre></td></tr></table></figure></p><p>结束~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ELK一些前期准备&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://tokyle.com/categories/Devops/"/>
    
    
      <category term="elasticsearch" scheme="http://tokyle.com/tags/elasticsearch/"/>
    
      <category term="logstash" scheme="http://tokyle.com/tags/logstash/"/>
    
      <category term="kibana" scheme="http://tokyle.com/tags/kibana/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch 6变更记录</title>
    <link href="http://tokyle.com/2018/08/01/elasticsearch-6%E5%8F%98%E6%9B%B4%E8%AE%B0%E5%BD%95/"/>
    <id>http://tokyle.com/2018/08/01/elasticsearch-6变更记录/</id>
    <published>2018-08-01T12:54:10.000Z</published>
    <updated>2018-08-01T08:56:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>elasticsearch 6变更内容记录</p><a id="more"></a><p>原来没怎么接触过es，找了个教程，本来是按着教程上敲的练练手的，然后就我靠了，又回到当初碰Django时候的懵逼状态，新版本改好多。。</p><h3 id="No-handler-for-type-string-declared-on-field"><a href="#No-handler-for-type-string-declared-on-field" class="headerlink" title="No handler for type [string] declared on field"></a>No handler for type [string] declared on field</h3><p>本来练手练得好好的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT http://192.168.0.91:9200/index_test</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;settings&quot;: &#123;</span><br><span class="line">&quot;number_of_shards&quot;: 3,</span><br><span class="line">&quot;number_of_replicas&quot;: 2</span><br><span class="line">&#125;,</span><br><span class="line">&quot;mappings&quot;: &#123;</span><br><span class="line">&quot;Testlog&quot;: &#123;</span><br><span class="line">&quot;properties&quot;: &#123;</span><br><span class="line">&quot;logType&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;string&quot;,</span><br><span class="line">&quot;index&quot;: &quot;not_analyzed&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后就是悲剧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;error&quot;: &#123;</span><br><span class="line">       &quot;root_cause&quot;: [</span><br><span class="line">           &#123;</span><br><span class="line">               &quot;type&quot;: &quot;mapper_parsing_exception&quot;,</span><br><span class="line">               &quot;reason&quot;: &quot;No handler for type [string] declared on field [logType]&quot;</span><br><span class="line">           &#125;</span><br><span class="line">       ],</span><br></pre></td></tr></table></figure></p><p>研究半天，JSON没啥错啊，教程里就是这么干的啊，回忆起Django的版本悲剧，搜了下版本变更，唉~<code>ElasticSearch 5.x开始就取消了string类型，取代的事text和keyward，text用于全文搜索的, 而keyword用于关键词搜索</code></p><p>找了段网上的解释：<br>这个变动的根本原因是string类型会给我们带来很多困惑: 因为ElasticSearch对字符串拥有两种完全不同的搜索方式. 你可以按照整个文本进行匹配, 即关键词搜索(keyword search), 也可以按单个字符匹配, 即全文搜索(full-text search). 对ElasticSearch稍有了解的人都知道, 前者的字符串被称为not-analyzed字符, 而后者被称作analyzed字符串.</p><p>事实上, 同一种类型用于应对两种不同的使用场景是会让人崩溃的, 因为有些选项只对其一的场景设置有效.例如position_increment_gap对not-analyzed字符就不会起作用, 而像ignore_above对于analyzed字符串就很难区分它到底是对整个字符串的值有效还是对单独的每个分词有效(在这种场景, ignore_above确实只对整个字符串值有效, 而对单个分词的限制可以使用limit设置)，同样，<code>index</code>现在也只需要boolean的两种状态，所以可以修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;settings&quot;: &#123;</span><br><span class="line">&quot;number_of_shards&quot;: 3,</span><br><span class="line">&quot;number_of_replicas&quot;: 2</span><br><span class="line">&#125;,</span><br><span class="line">&quot;mappings&quot;: &#123;</span><br><span class="line">&quot;gaialog&quot;: &#123;</span><br><span class="line">&quot;properties&quot;: &#123;</span><br><span class="line">&quot;logType&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;text&quot;,</span><br><span class="line">&quot;index&quot;: &quot;false&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="as-the-final-mapping-would-have-more-than-1-type"><a href="#as-the-final-mapping-would-have-more-than-1-type" class="headerlink" title="as the final mapping would have more than 1 type"></a>as the final mapping would have more than 1 type</h3><p>原因是6.x开始，取消了mapping type…<br>具体原因可以看官方的解释：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.0/removal-of-types.html" target="_blank" rel="noopener">removal of mapping type</a><br>需要的一些解释是：<br>首先，很多人会把es和关系型数据库进行类比；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">index ——&gt; 数据库（database）</span><br><span class="line">type ——&gt; 表（table）</span><br><span class="line">document ——&gt; 数据记录（data）</span><br><span class="line">filed ——&gt; 列（column）</span><br></pre></td></tr></table></figure></p><p>其实这样理解是有问题的，在关系型数据库中，每个表的列都是相互独立的，即使是同样列名的列，也毫无关系；但是在像es这样的映射型数据库中，即使是在不同的type下的field，只要field名字一样，它们所指向的Lucene字段都是同一个，所以是有影响的。在ES中，之前有type的情况下，在不同的type下可以建同样名字的field，比如test，type1下的field是<code>string</code>类型，type2下的field是<code>boolean</code>类型，由于同一个名字的field对应的Lucene字段一样，所以在进行field删除时，系统就会出错，不知道具体应该删的是哪个field。<br>官方为了避免这样的情况，就直接开始了不要<code>type</code>~~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;elasticsearch 6变更内容记录&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://tokyle.com/categories/Devops/"/>
    
    
      <category term="elasticsearch" scheme="http://tokyle.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Centos 7安装elasticsearch head</title>
    <link href="http://tokyle.com/2018/08/01/Centos-7%E5%AE%89%E8%A3%85elasticsearch-head/"/>
    <id>http://tokyle.com/2018/08/01/Centos-7安装elasticsearch-head/</id>
    <published>2018-08-01T06:57:32.000Z</published>
    <updated>2018-08-01T03:00:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>ElasticSearch安装可视化插件ElasticSearch head</p><a id="more"></a><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><h4 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h4><p>首先是安装<code>node.js</code></p><h5 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h5><p>可以用yum装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nodejs</span><br></pre></td></tr></table></figure></p><p>再装npm：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><h5 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h5><p>或者是源码安装<br>首先安装gcc用于编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ kernel-devel</span><br></pre></td></tr></table></figure></p><p>开始安装node.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v4.5.0/node-v4.5.0.tar.gz</span><br><span class="line">tar -xf node-v4.5.0.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压缩之后，进入目录，编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd node-v4.5.0</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>完成！<br>验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm</span><br></pre></td></tr></table></figure></p><p>安装完成的是4.5的版本，升级：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g n</span><br><span class="line">n stable</span><br></pre></td></tr></table></figure></p><h4 id="安装grunt"><a href="#安装grunt" class="headerlink" title="安装grunt"></a>安装grunt</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g grunt</span><br></pre></td></tr></table></figure><p>可以查看版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt -version</span><br></pre></td></tr></table></figure></p><h3 id="安装ES-head"><a href="#安装ES-head" class="headerlink" title="安装ES head"></a>安装ES head</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>git下载源码，可以直接到github下，也可以命令行weg或者git clone下载<br>源码地址|：<a href="https://github.com/mobz/elasticsearch-head/" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head/</a><br>建议要是在本地下载的zip包，传服务器时候，切换到es用户操作，使得head文件属主是es用户。<br>然后解压：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unzip elasticsearch-head-master.zip</span><br><span class="line">cd elasticsearch-head-master</span><br></pre></td></tr></table></figure></p><p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>首先要停掉ES服务</p><h4 id="配置http对外服务"><a href="#配置http对外服务" class="headerlink" title="配置http对外服务"></a>配置http对外服务</h4><p>修改elasticsearch.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config/elasticsearch.yml</span><br></pre></td></tr></table></figure></p><p>添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure></p><h4 id="修改host"><a href="#修改host" class="headerlink" title="修改host"></a>修改host</h4><p>进入<code>elasticsearch-head</code>文件夹，修改<code>Gruntfile.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim Gruntfile.js</span><br></pre></td></tr></table></figure></p><p>找到<code>connect：server</code>，添加hostname为你的静态IP，完成~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">connect: &#123;</span><br><span class="line">                       server: &#123;</span><br><span class="line">                               options: &#123;</span><br><span class="line">                                       hostname: &apos;192.168.0.91&apos;,</span><br><span class="line">                                       port: 9100,</span><br><span class="line">                                       base: &apos;.&apos;,</span><br><span class="line">                                       keepalive: true</span><br><span class="line">                               &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>先启动ES，再起ES head<br>ES head有两种启动方式：<br><code>`grunt server或者进入es head目录npm run start</code><br>浏览器访问:<a href="http://IP:9100即可打开页面" target="_blank" rel="noopener">http://IP:9100即可打开页面</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ElasticSearch安装可视化插件ElasticSearch head&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://tokyle.com/categories/Devops/"/>
    
    
      <category term="elasticsearch" scheme="http://tokyle.com/tags/elasticsearch/"/>
    
      <category term="elasticsearch head" scheme="http://tokyle.com/tags/elasticsearch-head/"/>
    
      <category term="Centos7" scheme="http://tokyle.com/tags/Centos7/"/>
    
  </entry>
  
  <entry>
    <title>Centos下搭建ElasticSearch</title>
    <link href="http://tokyle.com/2018/07/31/Centos%E4%B8%8B%E6%90%AD%E5%BB%BAElasticSearch/"/>
    <id>http://tokyle.com/2018/07/31/Centos下搭建ElasticSearch/</id>
    <published>2018-07-31T13:49:50.000Z</published>
    <updated>2018-07-31T09:55:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Centos 7下搭建ElasticSearch</p><a id="more"></a><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>首先，ES是java开发的，所以，通性，懂得，装JDK，好在linux下一条命令行就可以解决：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装1.8.0的所有文件</span><br><span class="line">yum install java-1.8.0-openjdk* -y</span><br></pre></td></tr></table></figure></p><p>校验：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openjdk version &quot;1.8.0_181&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_181-b13)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.181-b13, mixed mode)</span><br></pre></td></tr></table></figure><p>很正常，完成。</p><h3 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>下载很简单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.2.zip</span><br></pre></td></tr></table></figure></p><p>然后解压缩就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip elasticsearch-6.3.2.zip</span><br></pre></td></tr></table></figure></p><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd elasticsearch-6.3.2/bin</span><br><span class="line">./elasticsearch</span><br></pre></td></tr></table></figure><p>嗯，然后问题就开始了~</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>用<code>root</code>用户登录的系统，启es，会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[2018-01-28T22:00:31,358][WARN ][o.e.b.ElasticsearchUncaughtExceptionHandler] [] uncaught exception in thread [main]</span><br><span class="line">org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:125) ~[elasticsearch-6.1.2.jar:6.1.2]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:112) ~[elasticsearch-6.1.2.jar:6.1.2]</span><br><span class="line">at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86) ~[elasticsearch-6.1.2.jar:6.1.2]</span><br><span class="line">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124) ~[elasticsearch-cli-6.1.2.jar:6.1.2]</span><br><span class="line">at org.elasticsearch.cli.Command.main(Command.java:90) ~[elasticsearch-cli-6.1.2.jar:6.1.2]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:92) ~[elasticsearch-6.1.2.jar:6.1.2]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:85) ~[elasticsearch-6.1.2.jar:6.1.2]</span><br><span class="line">Caused by: java.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:104) ~[elasticsearch-6.1.2.jar:6.1.2]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:171) ~[elasticsearch-6.1.2.jar:6.1.2]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:322) ~[elasticsearch-6.1.2.jar:6.1.2]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:121) ~[elasticsearch-6.1.2.jar:6.1.2]</span><br><span class="line">... 6 more</span><br></pre></td></tr></table></figure></p><p>很明显，人家不让你用root启服务</p><h4 id="创建es用户"><a href="#创建es用户" class="headerlink" title="创建es用户"></a>创建es用户</h4><p>不让用root就创建一个es的用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 创建es组</span><br><span class="line">groupadd elasticsearch</span><br><span class="line"># 在es组下创建es用户，并设置密码为elasticsearch</span><br><span class="line">useradd elasticsearch -g elasticsearch -p elasticsearch</span><br></pre></td></tr></table></figure></p><p>然后将前面下载的<code>elasticsearch-6.3.2.zip</code>包拷贝到es家目录下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp elasticsearch-6.3.2.zip /home/elasticsearch</span><br></pre></td></tr></table></figure></p><p>解压缩：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip elasticsearch-6.3.2.zip</span><br></pre></td></tr></table></figure></p><p>更改文件夹属主和属组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R elasticsearch:elasticsearch elasticsearch-6.1.2/</span><br></pre></td></tr></table></figure></p><p>然后切换到es用户，启服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - elasticsearch</span><br><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure></p><p>然后就可以看见服务基本是正常起来了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[2018-07-31T22:11:06,918][INFO ][o.e.n.Node               ] [] initializing ...</span><br><span class="line">[2018-07-31T22:11:07,161][INFO ][o.e.e.NodeEnvironment    ] [qR5cyzh] using [1] data paths, mounts [[/ (rootfs)]], net usable_space [12.5gb], net total_space [17.6gb], types [rootfs]</span><br><span class="line">[2018-07-31T22:11:07,162][INFO ][o.e.e.NodeEnvironment    ] [qR5cyzh] heap size [1015.6mb], compressed ordinary object pointers [true]</span><br><span class="line">[2018-07-31T22:11:07,163][INFO ][o.e.n.Node               ] node name [qR5cyzh] derived from node ID [qR5cyzhRQUix7PbCNFViTw]; set [node.name] to override</span><br><span class="line">[2018-07-31T22:11:07,163][INFO ][o.e.n.Node               ] version[6.1.2], pid[7200], build[5b1fea5/2018-01-10T02:35:59.208Z], OS[Linux/3.10.0-514.el7.x86_64/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_141/25.141-b15]</span><br><span class="line">[2018-07-31T22:11:07,163][INFO ][o.e.n.Node               ] JVM arguments [-Xms1g, -Xmx1g, -XX:+UseConcMarkSweepGC, -XX:CMSInitiatingOccupancyFraction=75, -XX:+UseCMSInitiatingOccupancyOnly, -XX:+AlwaysPreTouch, -Xss1m, -Djava.awt.headless=true, -Dfile.encoding=UTF-8, -Djna.nosys=true, -XX:-OmitStackTraceInFastThrow, -Dio.netty.noUnsafe=true, -Dio.netty.noKeySetOptimization=true, -Dio.netty.recycler.maxCapacityPerThread=0, -Dlog4j.shutdownHookEnabled=false, -Dlog4j2.disable.jmx=true, -XX:+HeapDumpOnOutOfMemoryError, -Des.path.home=/home/elasticsearch/elasticsearch-6.1.2, -Des.path.conf=/home/elasticsearch/elasticsearch-6.1.2/config]</span><br><span class="line">[2018-07-31T22:11:09,295][INFO ][o.e.p.PluginsService     ] [qR5cyzh] loaded module [aggs-matrix-stats]</span><br><span class="line">[2018-07-31T22:11:09,295][INFO ][o.e.p.PluginsService     ] [qR5cyzh] loaded module [analysis-common]</span><br><span class="line">[2018-07-31T22:11:09,295][INFO ][o.e.p.PluginsService     ] [qR5cyzh] loaded module [ingest-common]</span><br><span class="line">[2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService     ] [qR5cyzh] loaded module [lang-expression]</span><br><span class="line">[2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService     ] [qR5cyzh] loaded module [lang-mustache]</span><br><span class="line">[2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService     ] [qR5cyzh] loaded module [lang-painless]</span><br><span class="line">[2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService     ] [qR5cyzh] loaded module [mapper-extras]</span><br><span class="line">[2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService     ] [qR5cyzh] loaded module [parent-join]</span><br><span class="line">[2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService     ] [qR5cyzh] loaded module [percolator]</span><br><span class="line">[2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService     ] [qR5cyzh] loaded module [reindex]</span><br><span class="line">[2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService     ] [qR5cyzh] loaded module [repository-url]</span><br><span class="line">[2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService     ] [qR5cyzh] loaded module [transport-netty4]</span><br><span class="line">[2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService     ] [qR5cyzh] loaded module [tribe]</span><br><span class="line">[2018-07-31T22:11:09,297][INFO ][o.e.p.PluginsService     ] [qR5cyzh] no plugins loaded</span><br><span class="line">[2018-07-31T22:11:13,791][INFO ][o.e.d.DiscoveryModule    ] [qR5cyzh] using discovery type [zen]</span><br><span class="line">[2018-07-31T22:11:14,926][INFO ][o.e.n.Node               ] initialized</span><br><span class="line">[2018-07-31T22:11:14,927][INFO ][o.e.n.Node               ] [qR5cyzh] starting ...</span><br><span class="line">[2018-07-31T22:11:15,582][INFO ][o.e.t.TransportService   ] [qR5cyzh] publish_address &#123;127.0.0.1:9300&#125;, bound_addresses &#123;[::1]:9300&#125;, &#123;127.0.0.1:9300&#125;</span><br><span class="line">[2018-07-31T22:11:15,598][WARN ][o.e.b.BootstrapChecks    ] [qR5cyzh] max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</span><br><span class="line">[2018-07-31T22:11:15,598][WARN ][o.e.b.BootstrapChecks    ] [qR5cyzh] max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class="line">[2018-07-31T22:11:18,915][INFO ][o.e.c.s.MasterService    ] [qR5cyzh] zen-disco-elected-as-master ([0] nodes joined), reason: new_master &#123;qR5cyzh&#125;&#123;qR5cyzhRQUix7PbCNFViTw&#125;&#123;wRzc-CVaRmmdLNnPfT_LTA&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;</span><br><span class="line">[2018-07-31T22:11:18,920][INFO ][o.e.c.s.ClusterApplierService] [qR5cyzh] new_master &#123;qR5cyzh&#125;&#123;qR5cyzhRQUix7PbCNFViTw&#125;&#123;wRzc-CVaRmmdLNnPfT_LTA&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;, reason: apply cluster state (from master [master &#123;qR5cyzh&#125;&#123;qR5cyzhRQUix7PbCNFViTw&#125;&#123;wRzc-CVaRmmdLNnPfT_LTA&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125; committed version [1] source [zen-disco-elected-as-master ([0] nodes joined)]])</span><br><span class="line">[2018-07-31T22:11:19,028][INFO ][o.e.g.GatewayService     ] [qR5cyzh] recovered [0] indices into cluster_state</span><br><span class="line">[2018-07-31T22:11:19,097][INFO ][o.e.h.n.Netty4HttpServerTransport] [qR5cyzh] publish_address &#123;127.0.0.1:9200&#125;, bound_addresses &#123;[::1]:9200&#125;, &#123;127.0.0.1:9200&#125;</span><br><span class="line">[2018-07-31T22:11:19,097][INFO ][o.e.n.Node               ] [qR5cyzh] started</span><br></pre></td></tr></table></figure></p><p>验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;127.0.0.1:9200&quot;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;snZNWBu&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;9k1xyJl4S6uoosA_Ua0XEQ&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;6.3.2&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;zip&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;053779d&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2018-07-20T05:20:23.451332Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;7.3.1&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="更改静态IP"><a href="#更改静态IP" class="headerlink" title="更改静态IP"></a>更改静态IP</h4><p>本地是可以用，但是试了下，由于centos是在虚拟机里面，在外面机器，访问虚拟机ip就打不开es了，没办法，将es设置成静态IP<br>修改配置文件<code>/confif/elasticsearch.yml</code>，修改IP为静态IP：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------- Network -----------------------------------</span><br><span class="line">#</span><br><span class="line"># Set the bind address to a specific IP (IPv4 or IPv6):</span><br><span class="line">#</span><br><span class="line">network.host: 192.168.0.91</span><br><span class="line">#</span><br><span class="line"># Set a custom port for HTTP:</span><br><span class="line">#</span><br><span class="line">http.port: 9200</span><br><span class="line">#</span><br><span class="line"># For more information, consult the network module documentation.</span><br></pre></td></tr></table></figure></p><p>然后重启es，发现，嗯，还是起不来，又报了俩错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR: [2] bootstrap checks failed</span><br><span class="line">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</span><br><span class="line">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br></pre></td></tr></table></figure></p><h4 id="max-file-descriptors-4096-for-elasticsearch-process-is-too-low-increase-to-at-least-65536"><a href="#max-file-descriptors-4096-for-elasticsearch-process-is-too-low-increase-to-at-least-65536" class="headerlink" title="max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]"></a>max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</h4><p>切到root下，修改对应配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/security/</span><br><span class="line"># 日常备份</span><br><span class="line">cp limits.conf limits.conf.bak</span><br><span class="line"># 修改配置</span><br><span class="line">vim limits.conf</span><br></pre></td></tr></table></figure></p><p>增加内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># elasticsearch config start</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br><span class="line"># elasticsearch config end</span><br></pre></td></tr></table></figure></p><h4 id="max-virtual-memory-areas-vm-max-map-count-65530-is-too-low-increase-to-at-least-262144"><a href="#max-virtual-memory-areas-vm-max-map-count-65530-is-too-low-increase-to-at-least-262144" class="headerlink" title="max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]"></a>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</h4><p>也是切root改配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /etc</span><br><span class="line">cp sysctl.conf sysctl.conf.bak</span><br><span class="line">vim sysctl.conf</span><br></pre></td></tr></table></figure></p><p>增加内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># elasticsearch config start</span><br><span class="line">vm.max_map_count=262144</span><br><span class="line"># elasticsearch config end</span><br></pre></td></tr></table></figure></p><p><strong>重启系统</strong></p><p>然后切到es用户，重启服务，完成~<br>可以到本地浏览器试试访问”<a href="http://IP:9200" target="_blank" rel="noopener">http://IP:9200</a>“</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Centos 7下搭建ElasticSearch&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://tokyle.com/categories/Devops/"/>
    
    
      <category term="Centos7" scheme="http://tokyle.com/tags/Centos7/"/>
    
  </entry>
  
  <entry>
    <title>海贼王TV版目录</title>
    <link href="http://tokyle.com/2018/07/19/%E6%B5%B7%E8%B4%BC%E7%8E%8BTV%E7%89%88%E7%9B%AE%E5%BD%95/"/>
    <id>http://tokyle.com/2018/07/19/海贼王TV版目录/</id>
    <published>2018-07-19T13:16:52.000Z</published>
    <updated>2018-08-15T03:24:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>来点和技术无关的~<br>作为最爱的动漫，没有之一，整理的一点TV版目录，大海贼！<br><a id="more"></a></p><p>一 海贼和小偸（BOSS：小丑巴基。SPECIAL：海军克比）新船员：路飞 索隆 娜美</p><p>1:我是路飞,未来的海贼王.<br>2:大剑客现身.海贼猎人_罗罗亚索隆.<br>3:蒙卡VS路飞,神秘的美少年是谁?<br>4:路飞的过去。红发登场!<br>5:恐怖.神奇的力量,海贼小丑巴基船长.<br>6:史上最厉害的怪人.催眠师杰克斯.<br>7:绝命追杀.骑兽师摩奇VS路飞.<br>8:壮烈战斗.剑客索隆VS杂技卡巴吉.</p><p>9:谁是胜者.恶魔果实能力者大对决.</p><p>二 不虚假的事（BOSS：船长洛克。SPECIAL：可雅）新船员：骗人布 梅利</p><p>10:正义的骗子?骗人布船长.<br>11:揭发阴谋.海贼管家洛克船长<br>12:正面冲突!黑猫海贼团斜坡大攻防<br>13:恐怖2人组,黑猫兄弟VS索隆<br>14:路飞复活.可雅小姐冒死奋战<br>15:打倒洛克.骗人布男子的决心<br>16:保护可雅.骗人布海贼团大展身手<br>17:怒气冲天.洛克VS路飞<br>18:你就是珍禽异兽.卡蒙和奇妙的伙伴.<br>19:3刀流的过去.索隆与克伊娜的誓言.</p><p>三 ALL  BLUE之梦（BOSS：克利克。SPECIAL：红脚哲普）新船员：山治</p><p>20:招牌厨师.海上餐厅的山治<br>21:不速之客.山治的饭与啊金的恩.<br>22:最强海贼滥队.克利克提督<br>23:保卫芭拉缔.大海贼_红脚哲普.<br>24:鹰眼米霍克.剑豪索隆命丧大海.<br>25:必杀足技招爆发,山治VS铁壁帕路<br>26:路飞和山治的梦想.梦幻般的ALL BIUE<br>27:冷酷无情的鬼人.海贼滥队总队长啊金<br>28:不会死的.路飞VS克利克的激战<br>29:死斗的结果!肚皮里的一把枪<br>30:起程.海上厨师和路飞他们一起出发</p><p>四 橘子和风车（BOSS：鱼人阿龙。SPECIAL：贝尔梅尔）新船员：娜美</p><p>31:东海最坏的男人.鱼人海贼恶龙<br>32:可可亚西存的魔女.恶龙的女干部<br>33:骗人布死了?路飞还没登陆吗.<br>34:全员集合,骗人布道出娜美的实情<br>35:不为人知的过去.女战士_贝尔梅尔<br>36:求生.妈妈贝尔梅尔与娜美的亲情.<br>37:路飞站出来.食言的结果<br>38:路飞危险.鱼人VS路飞海贼团<br>39:路飞沉入海底.索隆VS章鱼小八<br>40:伟大的战士.激战山治与骗人布.<br>41:路飞动力全开.娜美的决心与草帽<br>42:爆裂.鱼人恶龙来自海底的猛攻.<br>43:终结鱼人帝国.娜美是我的伙伴<br>44:带着笑容的起航.再见了故乡可可亚西村.<br>45:悬赏犯.草帽路飞闻名全世界</p><p>番外编  小巴基大冒险</p><p>46:追捕草帽小子.小丑巴基的大冒险.<br>47:久等咯.巴基船长复活.</p><p>五 伟大的传说开始（SPECIAL：达斯琪）</p><p>48:开始与结束的镇.登陆罗格镇.<br>49:3代鬼撤和雪走.索隆的新刀和女上士.<br>50:骗人布对带小孩的达迪.正午的决斗<br>51:炽热的料理比赛!香吉士VS美人厨师<br>52:巴其复仇!在死刑台上笑的男人<br>Special:路飞落下!秘境.海肚脐之大冒险<br>53:传说开始!目标伟大的航路</p><p>TV原创 千年龙的传说</p><p>54:全新冒险的预感!神秘少女阿碧丝<br>55:奇迹般的生物!阿碧丝的秘密和传说之岛<br>56:艾力克出击!突破重围冲出军舰岛<br>57:绝海孤岛!传说中的失落之岛<br>58:废墟的决斗!紧张的索隆VS艾力克<br>59:路飞完全包围!尼尔森提督的秘招<br>60:在天空中飞舞!苏醒的千年传说</p><p>六 进入伟大航路 开端（SPECIAL：鲸鱼拉布）新船员：薇薇公主 超卡鲁鸭卡鲁</p><p>61:愤怒的决斗!跨越红土大陆<br>62:第一道难关!出现巨大的鲸鱼拉布<br>63:男人的约定!路飞与鲸鱼再会的誓言<br>64:欢迎海贼的小镇!登陆威士忌山峰<br>65:三刀流爆发!索隆VS巴洛克工作社<br>66:一决胜负!路飞VS索隆谜样的大决斗<br>67:护送薇薇公主!路飞海贼团出航</p><p>番外编  海军奋斗记</p><p>68:加油!克比,贝鲁梅伯海军奋斗记<br>69:克比,贝鲁梅伯的决心!格普中将的父母心</p><p>七 巨人的小花园 （BOSS：MR.3。SPECIAL：巨人东利 布洛基）</p><p>70:太古之岛!潜藏在小花园的黑影<br>71:巨人的决斗!巨人东利与布洛基<br>72:路飞生气了!神圣决斗中的卑鄙陷阱<br>73:布洛基胜利狂哭!艾尔帕布决战<br>74:魔鬼蜡烛!不甘心的眼泪与愤怒的泪水<br>75:袭击路飞的魔法!颜色调配的陷阱<br>76:毅然反击!乌索普的机智与火炎星<br>77:再见了,巨人岛!朝阿拉巴斯坦出发<br>78:娜美生病了!朝海上之雪前进</p><p>八 没有名字的国家（BOSS：瓦尔波。SPECIAL：多尔顿）新船员：驯鹿乔巴</p><p>79:奇袭!布里基克号与布里基的瓦尔波<br>80:没有医生的岛!在没有名字的国家冒险<br>81:开心吗?人称魔女的医生<br>82:多尔顿的觉悟!瓦尔波军团登陆<br>83:雪之岛!登上磁鼓山顶<br>84:蓝鼻子的驯鹿!乔巴的秘密<br>85:痴人说梦话!庸医西尔尔克<br>86:西尔尔克的樱花与继承的遗志<br>87:VS瓦尔波军团!吞吞果实的实力<br>88:动物系恶魔果实!乔巴的七段变形<br>89:王国的支配终将结束!旗子的信念直到永远<br>90:西尔尔克的樱花!磁鼓炮射的奇迹<br>91:再见了磁鼓岛!我要向大海出发了</p><p>九 沙漠的鳄鱼（BOSS：七武海沙鳄鱼。SPECIAL：火拳艾斯 上校斯摩格）新船员：罗宾</p><p>92:阿拉巴斯坦的英雄和船上的芭蕾女伶<br>93:朝着沙漠之国前进!呼唤雨之粉与叛乱军<br>94:各路英雄的再次相遇!他的名字叫火拳艾斯<br>95:艾斯和路飞!热情的理想与兄弟情谊<br>96:绿之城!爱尔马尔与功夫海牛<br>97:沙之国的冒险!住在炎热大地的怪物<br>98:沙漠海贼团登场!为自由而生的男人们<br>99:冒牌货的骨气!真心的叛乱军卡缪<br>100:叛乱军战士窥沙!对薇薇发誓的梦<br>101:艳阳的决斗!艾斯VS蝎子男<br>102:遗迹里迷路!薇薇,同伴和国家生存之道<br>103:蜘蛛人咖啡店!8点敌方特务集合<br>104:路飞VS薇薇!赌下同伴之泪的誓言<br>105:阿拉巴斯坦战线!梦之城雨地<br>106:一筹莫展的陷阱!突人雨宴当中<br>107:理想乡作战开始!开始活动的叛乱<br>108:恐怖的香蕉鳄鱼与Mr.王子<br>109:通过逆转大逃亡的关键!蜡烛球<br>110:无情的死斗!路飞VS克洛克达尔<br>111:向着奇迹奔跑!阿拉巴斯坦动物岛<br>112:叛乱军VS国王军!决战在阿尔巴那<br>113:叹息的阿尔巴那!激斗,跑得快队长<br>114:为了同伴的梦想发誓!决斗鼹鼠土堆第四街<br>115:本日大公开!模仿模仿合成脸<br>116:变身为娜美!冯.克雷连打芭蕾拳法<br>117:娜美的旋风注意报告!天候棒炸裂<br>118:皇族的秘宝!古代兵器冥王<br>119:豪剑的精髓!斩钢铁之力与万物的呼吸<br>120:战争结束了!窥沙举起了白旗<br>121:薇薇声音的归宿!英雄从天而降<br>122:沙鳄鱼VS水路飞!决斗第二回合<br>123:鳄鱼!向着王家之墓飞奔吧,路飞<br>124:恶梦之时逼近!这里是沙沙团秘密基地<br>125:伟大之翼!我的名字是国家守护神贝尔<br>126:超越!雨水降落在阿拉巴斯坦<br>127:放下武器吧!海贼和坚守的正义<br>128:海贼的宴会!阿拉巴斯坦逃出计划<br>129:离别的日子!薇薇的冒险结束了<br>130:危险的香气!第七位伙伴-妮可.罗宾</p><p>TV原创 彩虹色的雾</p><p>131:第一个患者!蓝波球的秘密<br>132:航海士的反乱!为了不曾割舍的梦想<br>133:被继承的梦想!咖哩的铁人香吉士<br>134:让花朵绽放!男子汉乌索普的八尺烟花<br>135:传说中的海贼猎人!流浪的剑士索隆<br>136:羊之岛的赛尼和山中的海贼船<br>137:赚了一笔啊!高利货赛尼的野心<br>138:岛上宝物的线索!赛尼海贼团出击<br>139:彩虹颜色雾的传说!露露嘉岛的老人半藏<br>140:永远之国的居民!盘普今海贼团<br>141:回想故乡!逃离不出的海贼墓场<br>142:乱战必死!贝特的野心与彩虹之塔<br>143:就这样传说开始了!去彩虹的那面</p><p>十 空海漫游（BOSS：神艾尼路。SPECIAL：库力克 战鬼瓦夷帕 原神科尔）</p><p>144:被夺走的记录!打捞之王人猿<br>145:怪物登场!别对白胡子出手<br>146:别小看梦想!嘲笑之镇”魔谷镇”<br>147:海贼的最高峰!谈梦想的男人和海底探索王<br>148:传说的一族!大话王诺兰德<br>149:向云大满驼!追击南南见鸟<br>150:梦想已完结了吗?贝拉密VS猿山联合军<br>151:一亿的男人!世界最高权力和黑胡子海贼<br>152:让船航向天空!搭上突激的海流<br>153:这里是空之海!空之骑士和天国之门<br>154:神之国!住在云上的天使们<br>155:禁断的大地!神所居住的岛屿和天的制裁<br>156:这么快就成罪犯了!SKYPIEA的执法者<br>157:要逃跑吗!已经开始进行的神的试练<br>158:可爱大道的陷阱!万能的神.艾涅尔<br>159:向前,乌鸦丸号!目标活祭坛<br>160:生存率10%!心网使者的神官大悟<br>161:球的试练的威协!迷失森林的死斗<br>162:乔巴危险!原来的神VS神官修罗<br>163:越来越不可思议!绳的试练和爱的试练<br>164:点燃香朵拉的灯吧!战士瓦夷帕<br>165:天空的黄金乡加雅!目标神之社<br>166:寻找黄金前夜的祭尊!对”大地”的想法<br>167:神.艾涅尔登场!生存战斗的夜鸣曲<br>168:长牙蟒蛇!终于到了生存者游戏的时间<br>169:舍命的排击!(战鬼)瓦夷帕的觉悟<br>170:空中的激战!海贼索隆VS战士布拉哈姆<br>171:呼叫的燃烧炮!路飞VS战鬼瓦夷帕<br>172:沼的试练!乔巴VS神官涅磐<br>173:无敌的能力!艾涅尔的真面目<br>174:幻之都市!雄伟的香多拉遗迹<br>175:生存率0%!乔巴VS神官欧姆<br>176:登上”巨大豆蔓”!上层遗迹的死斗<br>177:铁的试练的重头戏!白荆死亡决斗<br>178:迸出火花的斩击!索隆VS神官欧姆<br>179:崩溃的上层遗迹!走向曲终的五重奏<br>180:古代遗迹的对决!神.艾涅尔的目的<br>181:前往无边无际大地的野心!方舟箴言</p><p>182 最后的激战!海贼路飞对神艾尼路!!<br>183 MAXIM浮出水面!起动Despair<br>184 路飞落下!神之载决和娜美的愿望!!<br>185 苏醒的二人！燃烧吧爱情的救援前线！！<br>186 走向绝望的狂想曲，空岛灭亡迫在眉睫！！<br>187 钟声的引导！大战士与探险家的故事</p><p>188 从诅咒的束缚中解放！大战士流下热泪！！<br>189 你是我永远的挚友！响彻广阔无边大海的誓约之钟<br>190 天使岛毁灭！雷迎降临的恐怖！！<br>191 放倒巨大豆蔓！逃出空岛的最后希望！<br>192 神之国的奇迹！响彻天堂的岛之歌<br>193 战争结束！响彻远方 充满自豪地幻想曲<br>194 我来到了这里！历史正文的编织者<br>195 走吧，回青海去！！编织出幻想的最终乐章</p><p>TV原创 G8要塞</p><p>196:发布非常事态命令!恶名昭著海贼船潜人<br>197:料理人香吉士!在海军食堂发挥厨师的真正价值<br>198:被囚的索隆与乔巴的紧急手术<br>199:逼近的海军搜查网!第二名被囚者<br>200:拼命的路飞和香吉士!救出大作战<br>201:热血特种部队参战!桥上的攻防战<br>202:突破包围网!夺回黄金梅利号<br>203:消失的海贼船!要塞攻防第二回合<br>204:黄金夺回作战与威霸回收作战<br>205:一网打尽计划!强纳森自信的秘策<br>206:别了海军要塞!逃出的最后攻防战</p><p>十一 长链岛冒险（BOSS：银狐福克西。）</p><p>207:长链岛的大冒险<br>208:福克西海贼团与DAVY BACK FIGHT争霸战<br>209:第一回战!环岛皮划艇赛<br>210:银狐福克西!猛烈的干扰攻势<br>211:第二回合!GROGGY RING赛<br>212:连续的红牌!GROGGY RING<br>213:第三回战!滚轴溜冰追逐战<br>214:白热化爆走比赛!突人最终轮<br>215:轰鸣的热球刚球!海贼躲避球赛<br>216:悬崖的决战!不倒翁摔倒了<br>217:船长对决!最终战单挑格斗<br>218:迟缓攻击全开VS不死身的路飞<br>219:壮绝激烈的单挑对决!命运何去何从</p><p>TV原创 失忆岛</p><p>220:失去了,被夺走了!你是谁?<br>221:抱着笛子的谜之少年和罗宾的推理<br>222:出击,夺回记忆!海贼团上陆<br>223:露出獠牙的索隆!堵在面前的野兽<br>224:原形毕露!记忆小偷最后的攻击<br>225:自尊心强大的男人!银狐福克西<br>226:最接近无敌的男人!最危险的男人</p><p>十二 水之都（BOSS：CP9路奇。SPECIAL：冰山 帕裏 青雉）新船员：罗宾 弗兰奇 阳光万里号</p><p>227:海军总部大将青雉!最强战斗力的威胁<br>228:橡胶与冰的决斗!路飞VS青雉<br>229:飞驰的海列车与水之都WATER SEWEW<br>230:水上都市的冒险!目标巨大的造船厂<br>231:福兰克一家与冰山先生<br>232:格雷勒公司!壮观的一号船坞<br>233:海贼诱拐事件与等待死亡的海贼船<br>234:救出伙伴!猛攻福兰克屋<br>235:月下的大干戈!悲伤下飘动的海贼旗<br>236:路飞VS乌索普!男儿气魄的大碰撞<br>237 激震水之都!被袭击的冰山!<br>238 橡皮人对喷火的改造人<br>239 犯人是草帽海贼团?水之都的护卫<br>240 永远的离别?招来黑暗的女子尼可.罗宾<br>241 抓住罗宾!草帽海贼团的决议<br>242 信号伴随着炮击！开始行动的CP9<br>243 取下面具的CP9！惊人的真面目<br>244:隐藏的羁绊！冰山与福兰奇<br>245:回来吧罗宾！与CP9的对决<br>246:草帽海贼团全灭？豹型的威胁！<br>247:被船所爱的男人！乌索普的眼泪！<br>248:福兰奇的过去！海列车起航之日<br>249:斯潘达姆的阴谋！海列车颠簸之日<br>250:传说男人的末日！海列车哭泣之日<br>251:背叛后面的真相！罗宾悲伤的决意！<br>252:分离同伴的汽笛！飞驰而去的海列车<br>253:香吉士突入！暴风雨中的海列车大战！<br>254:娜美的全力呼唤！草帽小子路飞复活！<br>255:另一辆海列车？火箭人出击！<br>256.拯救同伴！向拳头发誓的敌我之羁绊！<br>257.击碎大浪！路飞和索隆的最强合体技<br>258.谜之男登场！？他的名为狙击王！<br>259.厨师间的对决！香吉士对拉面拳法！<br>260.车顶上的决斗！福兰奇对内罗<br>261.鬼斩索隆对斩船人T骨<br>262.罗宾争夺战！狙击王的奇策！！<br>263.司法之岛！Eneas Lobby的全貌！<br>264.登陆作战开始！突击！草帽小子海贼团！<br>265.路飞猛冲！司法之岛的大决战！<br>266.与巨人族的攻防！打开第二道门！<br>267.杀出活路！腾空而起的火箭人！<br>268.跟上路飞的步伐！草帽小子一伙全力作战<br>269.路飞海贼团奔向新的战场！<br>270.还我罗宾！路飞对布鲁诺！<br>271.不要停止脚步！点起反击的狼烟！<br>272.路飞就在眼前！前往法院前广场集结<br>273.为了捍卫同伴!二档发动<br>274.回答我罗宾!草帽小子海贼团的呼唤!<br>275.罗宾的过去！被称为恶魔的少女！<br>276.宿命的母女！母亲之名奥尔维亚！<br>277.奥哈拉的悲剧<br>278.说你想活下去!<br>279,跳下瀑布吧！路飞的信念!<br>280.男人的生存之道！索隆的野心和乌索普的梦想！<br>281.泪水编织而成的同伴的羁绊！娜美的世界地图！<br>282.离别造就了男子汉！香吉与乔巴.<br>283.一切都为了伙伴！黑暗中的女人罗宾！<br>284.绝不交出设计图！福兰奇的决断！<br>285.夺取五把钥匙！草帽海贼团 VS CP9！<br>286.恶魔果实的能力！卡库加布拉大变身<br>287.死也不踢女人！男子汉香吉的骑士道！<br>288.猫头鹰的失算！我的可乐是生命之水！<br>289.索隆的新招炸裂登场！剑名：狙击王！<br>290.无法控制！乔巴的蓝波球大变身!<br>291.捕头路飞再登场！是梦境还是现实彩票大骚动！<br>292.城内的散年糕大竞赛！大红鼻子的阴谋！<br>293.泡沫使用者卡里法！逼近娜美的肥皂危机！<br>294.凶报传来,屠魔令发动<br>295.五个娜美？伴随幻象的反击！<br>296.娜美的决断,攻击暴走的乔巴<br>297.猎人香吉登场？赠送给谎言狼的挽歌<br>298.灼热的足技,SANJI的反击<br>299.白刃之间的猛袭!ZORO和KAKU强力斩击对决<br>300.鬼神索隆,气势逼人的阿修罗化身<br>301.斯潘达姆惊愕！屹立于司法塔上的英雄<br>302.罗宾解放！路飞与路奇的激战<br>303.犯人是捕头路飞？追寻消失的大樱花<br>304.不战胜对手就保护不了任何人!3档发动<br>305.战栗的过去！黑暗的正义与罗布·路奇<br>306.梦幻的人鱼出现？在渐渐失去意识之时<br>307.炮火中沉没的岛屿！福兰奇绝望的呼喊！<br>308.等待路飞！踌躇之桥上的死斗！<br>309.充满愿望之拳！路飞拼尽全力的[机关枪]！<br>310.来自大海的朋友！草帽小子一伙最深的友情<br>311.全员大逃亡!海贼的胜利之道<br>312.感谢你,梅利!朦胧之雪中的离别之海<br>313.打破宁静！持有爱之拳的海军中将<br>314.最强的家族!路飞父亲的惊人身份<br>315.新世界!伟大航路的去向<br>316.香克斯的行动!连接暴走时代的纽带<br>317.寻找箭鱼的少女！水之都大搜查<br>318.坚强的妈妈！索隆家务活闹剧！</p><p>319.山治惊愕！谜之老头与超美味料理<br>320.终于全体悬赏！超过6亿的一伙人！<br>321.君临大海的百兽之王！梦想之船终于完成！<br>322.再见了亲爱的小弟们！弗兰奇起航<br>323.走出水之都！男子汉乌索普决斗的了断</p><p>324.巡回的悬赏令！欢声雀跃的故乡 向前迈进的船！</p><p>番外篇 艾斯被秒</p><p>325.最凶险的能力！袭击艾斯的黑胡子的黑暗 </p><p>TV原创 海贼旗猎人（BOSS：爸爸？）</p><p>326.谜一般的海贼一行！阳光号和危险的陷井<br>327.SUNNY号大难当前！咆哮的超速秘密机器<br>328.沉没于新世界中的梦想！失意的海贼帕泽鲁<br>329.袭击而来的刺客们！冰上的大决斗<br>330 草帽一伙陷入苦战！嵌入旗帜的海贼魂<br>331 酷热全开!迫近的双子磁力量<br>332.混乱不堪的公馆！发怒的首领与被囚的一伙人<br>333.重生的不死鸟！向同伴许下的誓言海贼旗之梦<br>334.炽热的决战！路飞VS灼热的首领<br>335.相会新世界！与勇猛的海贼的告别</p><p>TV 原创</p><p>336.乔巴人出动！保卫海滨的电视台 </p><p>十三僵尸岛（BOSS：奥兹 月光莫利亚。 SPECIAL：罗拉）新船员：音乐家布鲁克</p><p>337 闯进魔之海！ 浮现于浓雾中的迷之骷髅<br>338 遇见人的喜悦！骷髅绅士的真面目<br>339 怪现象频发！登录[Thriller Bark]<br>340 被称作天才的男人！霍古巴克现身<br>341 娜美千钧一发！僵尸宅院和透明人<br>342 僵尸之迷!恶梦般的霍古巴克研究所<br>343 他的名字是莫里亚！操纵影子的大海贼设下的陷阱<br>344 僵尸歌的飨宴！夜袭钟的黑暗声音<br>345 全是动物！贝罗娜的不可思议的花园<br>346 消失的草帽一伙！出现了神秘的剑客<br>347 残余的骑士道<br>348 从天而降的男人!剑侠鼻歌<br>349 路飞紧急事态!最强影子的去向<br>350 被称为魔人的战士奥兹复活<br>351 500年后的苏醒!!奥兹开眼<br>352 信念的祈求!! 死守爆炸头的布鲁克<br>353 男子汉不灭的誓言！！在远方的天空下等待的朋友<br>354 定将再会!!布鲁克许下誓言的海岬<br>355 食物 娜美和影子！！路飞愤怒的大反击<br>356 乌索普最强?消极之灵就交给我了<br>357 将军僵尸被秒杀!奥兹的冒险心情<br>358 炎之骑士山治！！踢毁虚假的婚礼<br>359 透明的恩怨?山治被夺走的梦<br>360 救命啊英雄 不死之身的敌人幽灵公主<br>361 吓破胆的佩罗纳！！名副其实的牛皮大王乌索普<br>362 屋顶上飞舞的斩击 索隆与龙马的决斗<br>363 激怒的乔巴！霍古巴克魔鬼般的医术<br>364 奥滋的巨吼！死出来草帽小子一伙<br>365 敌人是路飞？最强僵尸对草帽小子一伙<br>366 受死吧阿布萨罗姆！娜美的友情雷击<br>367 扳回一城！必杀草帽合体技<br>368 无声无息的袭击！迷之访问者暴君熊！<br>369 奥滋加莫里亚！力量与智慧的最凶合体<br>370 逆转战局的秘策！梦魇 路飞登场<br>371 草帽小子一伙全军覆没！影影能力全开<br>372 超绝战斗开始！路飞VS路飞<br>373 决战迫近 重撞 最后的一击<br>374 身体消失 照射在恶魔之岛上的朝阳<br>375 永不完结的危机 草帽小子以获得抹杀命令<br>376 全部弹开 熊的肉垫果实能力<br>377 伙伴的痛苦就是我的痛苦 佐隆奋不顾身的战斗<br>378 遥远的誓言 海贼之歌与小鲸鱼<br>379 布鲁克的过去 欢乐的伙伴悲伤的离别<br>380 宾克斯的美酒 连接过去和现在的歌<br>381 新的伙伴音乐家鼻歌布鲁克</p><p>TV原创</p><p>382 迟缓果实的威胁 银狐福克西再现<br>383 宝藏争夺战 崩溃的SPA ISLAND号<br>384 布鲁克大奋斗 成为真正伙伴的艰辛道路？</p><p>十四（香波地群岛篇）</p><p>385 环绕伟大航路半圈！到达！红土大陆<br>386 憎恨草帽小子一伙的男人！铁面男迪巴鲁登场！<br>387 再次相会！救出被囚的鱼人<br>388 悲剧！隐藏在面具下的迪巴鲁的真面目<br>389 爆炸！桑尼号超级秘密武器狮吼炮<br>390 目标直指鱼人岛！肥皂泡群岛登陆<br>391 暴虐！香波迪群岛的支配者天龙人<br>392 全新的对手集结！超新星11人<br>393 目标是凯米！！人贩子的魔手迫近<br>394 救出凯米 群岛上残留着黑暗的历史<br>395 UTIME LIMIT 人类拍卖会开幕<br>396 铁拳炸裂！勇闯竞拍场<br>397 特大恐慌！拍卖会场的死斗！<br>398 大将黄猿出动！ 香波迪群岛的骚乱！<br>399 突破包围网！ 海军VS三名船长！<br>400 罗杰和雷利   海贼王和他的右手腕<br>401 无法回避？大将黄猿的光速踢！<br>402 压倒性优势！海军战斗兵器和平主义者<br>403 新的强敌出现！挑着斧头的战桃丸<br>404 大将黄猿的猛攻 草帽一伙一筹莫展！<br>405 消失的伙伴们 草帽小子一伙的末日<br>406 时代剧特别篇 捕头路飞再次登场<br>407 时代剧特别篇 打破！斯里拉商会的圈套<br>408 登陆！男子禁忌之岛 亚马逊·百合<br>409 急迫！伙伴们的去向 女人岛的冒险<br>410 全体一塌糊涂！海贼女帝汉库克<br>411 后背隐藏的秘密 路飞遭遇蛇姬<br>412 无情的判决！被石化的玛格雷特<br>413 路飞大苦战！蟒蛇姐妹霸气的力量！！<br>414 全力以赴的战斗！橡胶VS蛇蛇<br>415 汉库克的告白 姐妹们难言的过去<br>416 拯救艾斯！新的目的地是大监狱<br>417 恋爱就象暴风雨！婀娜的汉库克<br>418 伙伴们的行踪 气象科学与机关岛<br>419 伙伴们的行踪 巨鸟之岛与桃色乐园！<br>420 伙伴们的行踪 连接岛屿的桥与食人植物<br>421 伙伴们的行踪 消极公主与恶魔王</p><p>推进城 Impel Down</p><p>422 决死的潜入！海底监狱 Impel Down<br>423 地狱里重逢！？四分五裂果实的能力者！<br>424 粉碎！红莲地狱 巴基的华丽大作战<br>425 监狱最强的男人！毒人·麦哲伦登场<br>426 剧场版联动特别篇 蠢蠢欲动 金狮子的野心<br>427 剧场版联动特别篇 被盯上的小东海<br>428 剧场版联动特别篇 阿密格海贼团的猛攻<br>429 剧场版联动特别篇 激战！路飞VS拉鲁格<br>430 被囚禁的王下七武海！海侠甚平<br>431 牢头萨鲁德得斯的陷阱 LV3·饥饿地狱<br>432 解放的白鸟！再会！冯·克雷<br>433 署长麦哲伦出动 完成！草帽小子包围网<br>434 全部战力集合！LV4·灼热地狱的决战<br>435 麦哲伦够强！冯·克雷临阵逃亡<br>436 一决雌雄！路飞孤注一掷的最后一击<br>437因为是朋友！冯?克雷拼死的营救行动！<br>438  地狱中的乐园！因佩尔LV5.5（2010年2月14日放送）<br>439「路飞治疗开始 伊万小姐奇迹的力量!!」<br>440 相信奇迹！冯·克雷魂的声援<br>441「路飞复活伊娃的越狱计划启动」<br>442 艾斯压送开始 最下层的LV6攻防<br>443 最强小队结成 震憾！推进城<br>444 更加混乱 黑胡子蒂奇袭来<br>445 危险的相遇 黑胡子和雨之希留<br>446 凭意志也不能倒下 认真起来的汉尼拔<br>447 愤怒的JET手枪 路飞VS黑胡子<br>448 阻止麦哲伦！伊万小姐绽放奥义<br>449 麦哲伦的奇策 受阻的越狱计划<br>450 越狱小队 危在旦夕 禁断招术 毒之巨兵<br>451 发生吧 最后的奇迹 突破正义之门<br>452 目标海军本部 营救艾斯之旅<br>453 同伴的下落 空岛报告和改造动物<br>454 伙伴们的下落!巨岛的比奈与桃色的对决<br>455 伙伴们的行踪 革命军和暴食森林的陷阱<br>456 伙伴们的行踪 巨大的墓碑与内裤的恩情</p><p>海军本部篇（顶上战争）</p><p>457 到达海军总部之前的回想特别篇 兄弟的誓言（动画原创）<br>458 到达海军总部之前的回想特别篇 集合！三大将（动画原创）<br>459 决战临近 海军最强布阵完成<br>460 巨大舰队出现 袭来！白胡子海贼团<br>461 决战拉开帷幕 艾斯和白胡子的过去<br>462 毁灭世界的力量！地震果实的能力<br>463 燃尽一切！大将赤犬的能力<br>464 恶魔的后代！小奥兹 Jr. 勇往直前！<br>465 只有胜者才是正义 发动！战国的作战<br>466 草帽小队登场!风云突变的战场<br>467 就算死也要救你！路飞VS海军 战斗开始<br>468 激战的连续！能力者军团VS能力者军团<br>469 熊发生的异变 伊万愤怒的一击<br>470 剑豪米霍克 逼近路飞的黑刀的斩击<br>471 歼灭作战启动 和平主义者军团的威力<br>472 赤犬的谋略！被陷害的白胡子<br>473 包围作战运作！白胡子海贼团陷入危机！<br>474 处刑执行命令下达　突破包围壁！<br>475 突入最终局面 白胡子起死回生的一招<br>476 路飞拼尽全力 奥里斯广场的全力一战<br>477 消减生命的力量 兴奋·荷尔蒙再次使用<br>478 为了约定！！激斗！路飞与可比<br>479 处刑台就在眼前！开启通往艾斯的道路<br>480 各自选择的道路 路飞VS卡普<br>481 艾斯救出!四皇白胡子最后的船长命令！<br>482 烧尽火焰的能力!赤犬无情的追击!<br>483 寻找答案 火拳艾斯死于战场<br>484 海军本部崩溃 白胡子无言的愤怒！<br>485 一决胜负 白胡子VS黑胡子海贼团<br>486 演出开幕 黑胡子显示出的真正目的<br>487 大将赤犬的执着 袭向路飞的岩浆铁拳<br>488 拼命的呐喊 改变命运的充满勇气的数秒<br>489 香克斯出现！巅峰对决终于结束</p><p>大事件后篇</p><p>490 群雄割据 新时代开始！<br>491 登陆女儿岛 逼近路飞的残酷现实</p><p>海贼王×美食猎人 特别联合篇</p><p>492 最强组合！奋斗 路飞和阿虏（1小时特别篇）</p><p>兄弟相遇的回忆篇</p><p>493 路飞和艾斯 兄弟相遇的故事！<br>494 萨博登场 不确定之物终点站的少年<br>495 我不会逃！艾斯拼死的营救作战<br>496 有朝一日要出海！三顽童推杯换盏结兄弟！<br>497 告别达旦一家？建成！秘密基地（动画原创）<br>498 路飞拜师？和海贼王交锋过的男人（动画原创）<br>499 和巨虎的决战 成为船长的人是谁？（动画原创）<br>500 被夺去的自由！逼近三兄弟的贵族的陷阱！<br>501 被释放的火炎 Gray terminal的危机<br>502 自由在哪里? 少年悲剧的出航!<br>503 拜托你了！兄弟寄来的信<br>504 为了兑现约定 各自开始旅程！<br>505 好想见他们！路飞泪的呼喊！<br>506 草帽一伙儿 震惊！传来的噩耗</p><p>修行与两年后</p><p>第507话 和冥王雷利重逢 路飞决断之时<br>第508话 回到船长身边！空岛逃离与浮游岛的案件<br>第509话 接触！大剑豪米霍克 索隆 意气用事的决斗！<br>第510话 山治受难，返回王国的女王！<br>第511话 竟然再次登陆！路飞来到海军本部！<br>第512话 传达给伙伴们 四处传播的大新闻！<br>第513话 海贼们开始行动！惊天动地的新世界！<br>第514话 地狱中求生还 山治，赌上男人尊严的一战！<br>第515话 还要变得更强 索隆向船长的发誓！<br>第516话 路飞开始修行 2年后前往约定之地<br>第517话 新章开幕 草帽一伙再集结！<br>第518话 一触即发！路飞VS伪路飞<br>第519话 被阻击的草帽一伙<br>第520话 假草帽一伙的威胁<br>第521话 见识修行的成果 </p><p>鱼人岛篇</p><p>第522话 路飞踏上前往新世界的航程<br>第523话 守卫桑尼号的男人！<br>第524话 大海原的恶魔现身<br>第525话 失散的草帽一伙<br>第526话 海底火山喷发<br>第527话 登陆鱼人岛！美丽的人鱼们<br>第528话 香吉士生命垂危<br>第529话 鱼人岛灭亡？夏利的预言<br>第530话 鱼人岛之王 海神尼普顿<br>第531话 龙宫城 被所救的鲨鱼带过来<br>第532话 爱哭的胆小鬼！硬塔壳的人鱼公主<br>第533话 发生紧急事态 被占领的龙宫城<br>第534话 龙宫城震动 白星诱拐事件<br>第535话 霍迪袭来 复仇计划开始<br>第536话 龙宫城的决战 卓洛VS霍迪<br>第537话 守护白星！邓肯的追击<br>第538话 草帽一伙战败？霍迪掌控龙宫城<br>第539话 复苏的因缘 娜美和鱼人海贼团<br>第540话 解放奴隶的英雄 冒险家泰格<br>第541话 黄猿登场！瞄准泰格的陷阱 </p><p>美食的俘虏特别篇<br>第542话 再会 阿虏和路飞 寻找海鲜果实（46分钟特别篇） </p><p>继续============================================</p><p>第543话 英雄的末路 泰格令人震惊的真相<br>第544话 海贼团分裂 甚平VS阿龙<br>第545话 鱼人岛震动！漂流而来的天龙人<br>第546话 突然的悲剧！封闭未来的凶杀<br>第547话 再回到现在 霍迪开始行动<br>第548话 王国震惊 尼普顿处刑命令<br>第549话 产生的裂痕！路飞VS甚平<br>第550话 霍迪的异变 凶药真正的力量<br>第551话 决战开始 乔克尔特广场<br>第552话 震惊的告白 乙姬暗杀的真相<br>第553话 白星的眼泪！路飞终于登场<br>第554话 大激战！草帽小子一伙VS10万敌人<br>第555话 绝招炸裂！索隆、香吉出击！<br>第556话 初次亮相！桑尼号的秘密武器！<br>第557话 钢铁海贼！弗兰奇将军登场<br>第558话 诺亚接近！鱼人岛毁灭的危机<br>第559话 快点！路飞！白星危在旦夕！<br>第560话 激斗开始！路飞VS霍迪！<br>第561话 大乱站！草帽小子一伙VS新鱼人海贼团！<br>第562话 路飞败北！？霍迪复仇的时刻<br>第563话 令人震惊的真相！霍迪的真实身份！<br>第564话 一切归零！对路飞强烈的愿望！<br>第565话 路飞全力的一击！火拳枪炸裂<br>第566话 终于了结！与霍迪的最终决战<br>第567话 停下诺亚！拼命的橡皮机关枪！<br>第568话 迈向未来！通向太阳的道路！<br>第569话 被揭开的秘密 古代兵器的真相<br>第570话 草帽小子一伙惊愕！新的海军元帅！<br>第571话 最爱糖果！四皇毕古麻姆<br>第572话 前途多艰 新世界的陷阱<br>第573话 终于出航！再见鱼人岛<br>第574话 迈向新世界！目标最强海域</p><p>Z的野心篇<br>第575话 Z的野心篇 小小巨人莉莉！<br>第576话 Z的野心篇 谜之最强军团登场！<br>第577话 Z的野心篇 决死的大脱逃作战！<br>第578话 Z的野心篇 路飞VS修佐！</p><p>燃烧岛篇（庞克哈扎德）</p><p>第579话 登陆！燃烧岛庞克哈萨德<br>第580话 灼热的战斗！路飞VS巨大龙！<br>第581话 一伙人骚然！令人震惊的独头武士登场！<br>第582话 惊愕！终于显露出的岛上的秘密<br>第583话 救出孩子们！全员战斗开始<br>第584话 剑术对决 布鲁克VS神秘的躯体武士<br>第585话 七武海！托拉法尔加·劳<br>第586话 大危机 路飞沉入极寒之湖<br>第587话 激斗！劳VS斯摩格中将<br>第588话 2年后的重逢！路飞与劳<br>第589话 世界最邪恶 恐怖科学家凯撒</p><p>TV原创（联合篇）<br>第590话 奔跑吧最强军团！阿虏和路飞和悟空！</p><p>继续================================</p><p>第591话 乔巴震怒 主人惨无人道的实验<br>第592话 全部抹杀！传说中的杀手袭来！<br>第593话 拯救娜美！路飞的雪山之战<br>第594话 结成！路飞·劳的海贼同盟！<br>第595话 抓住MASTER 海贼同盟开始作战！<br>第596话 全灭危机 死亡怪物飞来<br>第597话 大激战 凯撒发动真正的能力！<br>第598话 劈开火海的武士！狐火锦卫门<br>第599话 冲击！神秘男人 维尔戈真正的身份<br>第600话 守护孩子们！袭来的Master的魔爪<br>第601话 震惊新世界 凯撒恶梦的实验<br>第602话 史上最邪恶的杀戮武器！死亡国度<br>第603话 反击开始！路飞?劳全部逃出<br>第604话 目标R栋！海贼同盟急行军！<br>第605话 达斯琪的泪 G-5的决死作战<br>第606话 背叛的中将！鬼竹之维尔戈<br>第607话 白热化激战！路飞对凯撒<br>第608话 幕后黑手 多福朗明哥出手<br>第609话 路飞冻死？恐怖的雪女</p><p>第610话 碰撞的双拳！两中将之战</p><p>第611话 小龙！桃之助现身</p><p>第612话 暴风雨中的死斗！草帽一伙儿VS雪女</p><p>第613话 奥义爆发！索隆最强的一刀流</p><p>第614话 保护朋友！莫查拼死奔逃</p><p>第615话 茶胡子的悲痛！路飞愤怒的一击</p><p>第616话 令人震惊的决斗！白猎VS维尔戈</p><p>第617话 击败凯撒！最强的灰熊铳</p><p>第618话 袭来！来自德雷斯罗萨的刺客</p><p>第619话 大爆发！无敌的弗兰奇将军<br>第620话 穷途末路！PUNK HAZARD大爆炸</p><p>第621话 捕获凯撒！将军炮炸裂</p><p>第622话 感动再会！桃之助与锦卫门</p><p>第623话 离别之时 庞克哈萨德出航</p><p>第624话 G5全灭！多佛朗明哥急袭<br>第625话 紧迫！青雉VS多弗朗明哥<br>第626话 消失的凯撒！海贼同盟出击<br>第627话 路飞命丧大海？海贼同盟瓦解<br>第628话 炸裂！路飞愤怒的铁拳</p><p>德雷斯罗萨篇</p><p>第629话 激震！撼动新世界的超级新闻<br>第630话 冒险！爱与热情的国度 德雷斯罗萨<br>第631话 狂热的漩涡 斗牛竞技场<br>第632话 危险的恋情 舞女维奥莱特<br>第633话 最强的无名战士！路西登场<br>第634话 海贼贵公子 卡文迪许<br>第635话 命运的再会 鬣狗贝拉米<br>第636话 超级新星！吃人的巴托洛米奥<br>第637话 群雄割据！B组白热化！<br>第638话 一击必杀！惊愕的国王之拳<br>第639话 斗鱼袭来！突破死亡铁桥<br>第640话 冒险！妖精之岛Green Bit<br>第641话 不为人知的世界 冬塔塔王国<br>第642话 世纪的谋略 多弗朗明哥行动！<br>第643话 惊天动地！大将滕虎的实力<br>第644话 愤怒的一击！巨人VS路西<br>第645话 破坏炮炸裂！路西命悬一线<br>第646话 传说中的海贼 首领青椒！<br>第647话 光与影 潜藏于德雷斯罗萨的阴影！<br>第648话 出击！传说中的英雄乌索兰德<br>第649话 激战之胜负 路西对青椒<br>第650话 路飞与 宿命的剑斗士蕾贝卡<br>第651话 守护到底！蕾贝卡和玩具军人<br>第652话 最后的激战区 D组开战<br>第653话 决战！乔拉对草帽一伙<br>第654话 美剑！白马的卡文迪许！<br>第655话 激烈冲突！香吉士VS多福朗明哥<br>第656话 蕾贝卡必杀剑！背水的剑舞<br>第657话 最强的战士 罗根VS蕾贝卡<br>第658话 震惊！玩具士兵的真正身份<br>第659话 战栗的过去！德雷斯罗萨的秘密<br>第660话 噩梦！德雷斯罗萨悲剧的一夜<br>第661话    七武海对决 罗VS多弗朗明哥    2014-09-14<br>第662话    两雄对峙！草帽VS天夜叉    2014-09-21<br>第663话    路飞惊愕 继承艾斯意志之人    2014-09-28<br>第664话    SOP作战开始 乌索兰度突击    2014-10-05<br>第665话    心潮澎湃 蕾贝卡VS斯雷曼    2014-10-12<br>第666话    决出胜者！？D区令人震惊的结果    2014-10-19<br>第667话    大将的决断 藤虎VS多弗朗明哥    2014-10-26<br>第668话    决赛开始 英雄迪亚曼蒂登场    2014-11-02<br>第669话    移动的城堡！最高干部琵卡出现！    2014-11-09<br>第670话    龙之爪炸裂！路西使出惊人一击！    2014-11-16<br>第671话    打倒砂糖 小人军突击！    2014-11-23<br>第672话    最后的光明 我们队长的秘密！    2014-11-30<br>第673话    破裂人 古拉迪乌斯大爆炸！    2014-12-07<br>第674话    骗子乌索兰度正在逃亡！    2014-12-14<br>第675话    命运中的邂逅 居鲁士和力库王    2014-12-21<br>第676话    作战失败！英雄乌索兰度逝世！？    2014-12-28<br>第677话    传说复活！居鲁士的全力一击    2015-01-11<br>第678话    火拳炸裂！烧烧果实力量复活    2015-01-18<br>第679话    飒爽登场 革命军参谋总长萨博！    2015-01-25<br>第680话    恶魔的陷阱 德雷斯罗萨歼灭作战    2015-02-01<br>第681话    悬赏5亿的男人 被盯上的乌索兰度！    2015-02-08<br>第682话    突破敌阵 路飞索隆开始反击    2015-02-15<br>第683话    大地轰鸣 破坏神巨大琵卡降临    2015-03-01<br>第684话    大集结！路飞和凶恶战士军团    2015-03-15<br>第685话    突飞猛进！路飞军团VS琵卡！    2015-03-22<br>第686话    冲击告白！罗对灵魂的热血誓言！    2015-03-29<br>第687话    大冲突！参谋总长萨博VS大将藤虎    2015-04-05<br>第688话    命悬一线 中了圈套的路飞！    2015-04-12<br>第689话    奋力逃脱！路飞起死回生的象枪    2015-04-19<br>第690话    共同战线 路飞通往胜利的突破口    2015-04-26<br>第691话    第二位武士 阵雨勘十郎登场    2015-05-03<br>第692话    激战琵卡战 索隆必杀一击！    2015-05-10<br>第693话    小人族的公主 被抓的曼雪莉    2015-05-17<br>第694话    不死之身！恐怖的人头玩具军团    2015-05-24<br>第695话    拼上性命！路飞是获胜的王牌    2015-05-31<br>第696话    泪眼相逢 蕾贝卡和居鲁士！    2015-06-07<br>第697话    一击必杀 拯救德雷斯罗萨的男人    2015-06-14<br>第698话    愤怒爆发 路飞和罗最强的秘计    2015-06-21<br>第699话    高贵一族 多弗朗明哥的真正身份！    2015-06-28<br>第700话    究极的力量 手术果实的秘密！    2015-07-05<br>第701话    悲伤的记忆 白色城镇的少年罗！    2015-07-12<br>第702话    天龙人！多弗壮绝的过去    2015-07-19<br>第703话    苦难之路 罗和柯拉松的命之旅程    2015-08-02<br>第704话    时限迫近！夺取手术果实！    2015-08-09<br>第705话    觉悟之时 柯拉松告别的笑容！    2015-08-16<br>第706话    冲吧 罗 温柔男人最后的战斗！    2015-08-23<br>第707话    冲向自由！罗 注射射击爆发    2015-08-30<br>第708话    狂热之战 罗VS多弗朗明哥    2015-09-06<br>第709话    干部决斗 崇高的海尔丁    2015-09-13<br>第710话    爱之决战 新栋梁老蔡 VS BABY5    2015-09-20<br>第711话    男子汉的坚持 贝拉米最后的突击！    2015-09-27<br>第712话    疾风怒涛 哈库巴VS德林杰    2015-10-04<br>第713话    致敬神拳 屏障屏障手枪发动！    2015-10-11<br>第714话    拯救治愈公主 曼雪莉！    2015-10-18<br>第715话    男子汉的决斗 赛尼奥尔爱的挽歌    2015-10-25<br>第716话    死亡星屑 迪亚曼蒂疾风骤雨般的猛攻    2015-11-01<br>第717话    雷之破坏剑！居鲁士愤怒的一击！    2015-11-08<br>第718话    大地横断 巨像琵卡的奇袭战！    2015-11-15<br>第719话    空中决战 索隆新必杀奥义爆发！    2015-11-22<br>第720话    永别了！贝拉米 告别的一击！    2015-11-29<br>第721话    罗战死 路飞愤怒的猛攻！    2015-12-06<br>第722话    执念之刃 逆袭的伽马刀！    2015-12-13<br>第723话    霸气冲突 路飞VS多弗朗明哥    2015-12-20<br>第724话    无法攻击 托雷波尔冲击的秘密    2015-12-27<br>第725话    愤怒爆发 全部由我来承担    2016-01-10<br>第726话    四档！惊异的弹力人！    2016-01-17<br>第727话    大逆袭！多弗朗明哥的觉醒！    2016-01-24<br>第728话    路飞！使尽全力的狮子火箭炮    2016-01-31<br>第729话    火焰龙王 将路飞的性命守护到底    2016-02-14<br>第730话    奇迹之泪 曼雪莉的战斗！    2016-02-21<br>第731话    生命的极限 阻止死之鸟笼！    2016-02-28<br>第732话    或生或死 命运的倒计时    2016-03-06<br>第733话    讨伐天 路飞愤怒的大猿王枪    2016-03-20<br>第734话    朝着自由！喜悦的德雷斯罗萨！    2016-03-27<br>第735话    前所未闻 大将藤虎冲击的决断！    2016-04-03<br>第736话    激烈暴走 极恶的世代出动！    2016-04-10<br>第737话    传说诞生 革命战士萨博的冒险！    2016-04-17<br>第738话    兄弟的羁绊 路飞?萨博重逢密谈    2016-04-24<br>第739话    最强的生物 四皇?百兽凯多    2016-05-01<br>第740话    藤虎出动 草帽一伙完全包围网    2016-05-08<br>第741话    非常事态 被拐走的蕾贝卡！    2016-05-15<br>第742话    父女的羁绊 居鲁士和蕾贝卡！    2016-05-22<br>第743话    男子汉的坚持 路飞VS藤虎 决一雌雄    2016-05-29<br>第744话    无处可逃 大将藤虎无情的追击！    2016-06-05<br>第745话    接纳酒 草帽大船团成立！    2016-06-12<br>第746话    群雄割据 狂暴的新世界怪物们    2016-06-19<br>第747话    动画原创　银之要塞 路飞和巴托的大冒险    2016-06-26<br>第748话    动画原创　地下迷宫 路飞VS推车人    2016-07-03<br>第749话    动画原创　剑技白热 罗?索隆终于登场！    2016-07-10<br>第750话    动画原创　绝体绝命 路飞极限的灼热决战    2016-07-17</p><p>18th 佐乌篇<br>第751话    冒险开幕 到达梦幻之岛佐乌岛！    2016-07-31<br>第752话    新七武海 传说?白胡子的儿子登场    2016-08-07<br>第753话    拼死登象 巨象背上的大冒险！    2016-08-21<br>第754话    战斗开始 路飞VS毛皮族！    2016-08-21<br>第755话    卡鲁秋！草帽一伙重新团聚    2016-09-04<br>第756话    反击开始 卷眉毛一伙大活跃！    2016-09-11<br>第757话    威胁来袭 百兽海贼团杰克！    2016-09-25<br>第758话    日间之王 犬岚公爵登场！    2016-10-02<br>第759话    夜间之王 猫蝮蛇老大登场    2016-10-09<br>第760话    首都毁灭 卷眉毛一伙登陆！    2016-10-16<br>第761话    极限逼近 毛皮族和一伙的羁绊！    2016-10-23<br>第762话    恶童返乡 四皇BIG MOM的刺客    2016-10-30<br>第763话    失踪的真相 山治惊愕的请贴    2016-11-06<br>第764话    给伙计们 山治离别的纸条    2016-11-13<br>第765话    去见猫蝮蛇老大    2016-11-20<br>第766话    路飞决断 山治退出的危机！    2016-11-27<br>第767话    一触即发 犬和猫和武士！    2016-12-04<br>第768话    第三个人！忍者?雾之雷藏登场    2016-12-11<br>第769话    赤之石！通往大秘宝的路标    2016-12-18<br>第770话    和之国的秘密 光月家和历史正文    2016-12-25<br>第771话    男人的誓言 路飞和光月桃之助    2017-01-08<br>第772话    传说中的航海 犬和猫和海贼王！    2017-01-15<br>第773话    恶梦重现 不死之身杰克强袭    2017-01-22<br>第774话    佐乌防卫战 路飞和象主！    2017-01-29<br>第775话    拯救巨象 草帽急救大作战！    2017-02-05<br>第776话    离别的下象 夺回山治的出海！    2017-02-12<br>第777话    参加世界会议 薇薇公主和白星公主    2017-02-19<br>第778话    参加世界会议 蕾贝卡和樱花王国    2017-02-26<br>第779话    凯多再次来袭 威胁重重极恶的世代！    2017-03-05<br>第780话    动画原创　空腹战线 路飞和海军超新星！    2017-03-19<br>第781话    动画原创　执着的3人 草帽一伙大追击战！    2017-03-26<br>第782话    动画原创　恶魔之拳 决战！路飞VS古兰特    2017-04-02</p><p>19th 蛋糕岛篇<br>第783话    山治还乡 去BIG?MOM海域！    2017-04-09<br>第784话    0和4 遭遇！杰尔玛66    2017-04-16<br>第785话    剧毒的危机 路飞和蕾玖！    2017-04-23<br>第786话    万国！四皇BIG?MOM登场    2017-04-30<br>第787话    四皇之女 山治的未婚妻布琳    2017-05-07<br>第788话    大进击！思食病的MOM    2017-05-14<br>第789话    首都崩溃 BIG MOM和甚平    2017-05-21<br>第790话    四皇之城 到达蛋糕岛    2017-05-28<br>第791话    点心森林 路飞VS路飞！？    2017-06-04<br>第792话    妈妈的刺客 路飞和诱惑森林！    2017-06-11<br>第793话    海游国家 杰尔玛之王伽治    2017-06-18<br>第794话    父子对决 伽治VS山治！    2017-06-25<br>第795话    巨大的野心 BIG MOM与凯撒    2017-07-02<br>第796话    万国的真相 妈妈的恐怖能力！    2017-07-09<br>第797话    大干部！三将星克力架登场    2017-07-16<br>第798话    8亿之敌 路飞VS千手克力架    2017-07-23<br>第799话    全力对决 四档VS饼干果实能力    2017-07-30<br>第800话    1和2集合 文斯莫克家    2017-08-06<br>第801话    恩人之命 山治与主厨哲普    2017-08-13<br>第802话    恩人之命 山治与主厨哲普    2017-08-20<br>第803话    丢弃的过去 文斯莫克?山治    2017-08-27<br>第804话    向着东海出发 山治下定决心出海    2017-09-03<br>第805话    极限对决 路飞和无限饼干    2017-09-17<br>第806话    饱食之力 新4档坦克人！    2017-09-24<br>第807话    悲哀的决斗 路飞VS山治（前篇）    2017-10-01<br>第808话    悲哀的决斗 路飞VS山治（后篇）    2017-10-01<br>第809话    复仇的暴风雨 愤怒军团袭来！    2017-10-15<br>第810话    冒险结束 山治下定决心的求婚    2017-10-22<br>第811话    在此等待 路飞VS愤怒军团    2017-10-29<br>第812话    潜入城堡内 抢夺！路标历史正文    2017-11-05<br>第813话    因缘的对决 路飞与BIG MOM    2017-11-12<br>第814话    灵魂的呐喊 布鲁克 佩德洛 闪电作战    2017-11-19<br>第815话    再见了 布琳泪的决心    2017-11-26<br>第816话    左眼的渊源 佩德洛VS蛋蛋男爵    2017-12-03<br>第817话    烟蒂 山治的结婚前夜    2017-12-10<br>第818话    不屈的灵魂 布鲁克 VS BIG MOM    2017-12-17<br>第819话 母亲的愿望 杰尔玛的失败作品山治<br>第820话 狂奔向山治身边 路飞开始逆袭!<br>第821话 城内动乱 路飞前往约定之地<br>第822话 离别的决心 山治和草帽便当<br>第823话 四皇翻身 拯救布鲁克大作战<br>第824话 约定之地 路飞极限的单枪匹马厮杀<br>第825话 骗子 路飞和山治<br>第826话 山治复活 破坏吧 地狱的茶会<br>第827话 密会 路飞VS火焰坦克海贼团<br>第828话 死之协定 路飞 贝基联合军<br>第829话 路飞暗中行动 茶会即将开始 阴谋的结婚仪式<br>第830话 家人集结 宴会开始 地狱的茶会<br>第831话 假面夫妻 山治 布琳 登场<br>第832话 死亡之吻 四皇暗杀作战开始<br>第833话 归还酒杯 侠客甚平的了断<br>第834话 作战失败 发起反击的BIG MOM海贼团<br>第835话 奔跑吧山治 SOS 杰尔马66<br>第845话：布琳的决心 大起火!诱惑的森林<br>第846话：反击之雷，娜美和雷云宙斯<br>第847话：偶然的再会，山治和陷入恋爱的坏布琳<br>第848话：守护桑尼号 奋战！乔巴&amp;布鲁克</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来点和技术无关的~&lt;br&gt;作为最爱的动漫，没有之一，整理的一点TV版目录，大海贼！&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://tokyle.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="One Piece" scheme="http://tokyle.com/tags/One-Piece/"/>
    
  </entry>
  
  <entry>
    <title>loadrunner判断接口返回</title>
    <link href="http://tokyle.com/2018/07/11/loadrunner%E5%88%A4%E6%96%AD%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E/"/>
    <id>http://tokyle.com/2018/07/11/loadrunner判断接口返回/</id>
    <published>2018-07-11T11:15:07.000Z</published>
    <updated>2018-07-12T01:42:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>loadrunner判断前一个接口返回，执行第二个接口</p><a id="more"></a><p>Action()<br>{</p><pre><code>/*关联获取接口返回结果，true或者false*/web_reg_save_param(&quot;Text&quot;,&quot;LB=\&quot;result\&quot;:&quot;,&quot;RB=,&quot;,LAST);/*开始事务*/lr_start_transaction(&quot;01_api_1&quot;);web_custom_request(&quot;api_1&quot;,             &quot;URL=https://webapp-n2.test.com/api/test&quot;,              &quot;Method=GET&quot;,             &quot;TargetFrame=&quot;,             &quot;Resource=0&quot;,             &quot;Snapshot=t2.inf&quot;,            &quot;RecContentType=text/html&quot;,              LAST);     lr_end_transaction(&quot;01_api_1&quot;,LR_AUTO);/*测试一下输出，用error只是因为会标红。。*/lr_error_message(lr_eval_string(&quot;{Text}&quot;));/*判断第一个接口返回是否为true*/if (strcmp(lr_eval_string(&quot;{Text}&quot;),&quot;true&quot;) == 0){    lr_start_transaction(&quot;01_api_2&quot;);        web_reg_find(&quot;Text=false&quot;,            LAST);        web_custom_request(&quot;api_2&quot;,             &quot;URL=https://webapp-n2.test.com/api/test&quot;,              &quot;Method=GET&quot;,             &quot;TargetFrame=&quot;,             &quot;Resource=0&quot;,             &quot;Snapshot=t2.inf&quot;,            &quot;RecContentType=text/html&quot;,              LAST);        lr_end_transaction(&quot;01_api_2&quot;,LR_AUTO);        lr_output_message(&quot;第二接口完&quot;);}else{        lr_error_message(&quot;请求失败&quot;);        return 0;};return 0;</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;loadrunner判断前一个接口返回，执行第二个接口&lt;/p&gt;
    
    </summary>
    
      <category term="性能测试" scheme="http://tokyle.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="loadrunner" scheme="http://tokyle.com/tags/loadrunner/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter压测socket close异常</title>
    <link href="http://tokyle.com/2018/07/06/Jmeter%E5%8E%8B%E6%B5%8Bsocket-close%E5%BC%82%E5%B8%B8/"/>
    <id>http://tokyle.com/2018/07/06/Jmeter压测socket-close异常/</id>
    <published>2018-07-06T10:26:11.000Z</published>
    <updated>2018-07-06T06:27:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>jmeter压测执行过程中报错：java.net.SocketException: Socket operation on nonsocket: connect</p><a id="more"></a><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>使用jmeter进行接口压测，<code>http请求</code>，默认是勾选了<code>use keepAlive</code>，但是在<code>Jmeter.properties</code>配置文件中的时间设置默认是注释的状态，也就是说，一旦发生连接空闲，则立刻断开，导致压测过程中出现事务失败。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>在网上直接搜这个报错，有几个解决办法，说实话，有点懒，没看原理，就都照样该了下，重启jmeter之后就报错了。</p><h4 id="Jmeter-properties"><a href="#Jmeter-properties" class="headerlink" title="Jmeter.properties"></a>Jmeter.properties</h4><p>取消注释：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hc.parameters.file=hc.parameters</span><br></pre></td></tr></table></figure></p><p>取消注释并修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpclient4.retrycount=1</span><br></pre></td></tr></table></figure></p><p>取消注释并修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpclient4.idletimeout=300</span><br></pre></td></tr></table></figure></p><p>单位毫秒</p><h4 id="hc-parameters"><a href="#hc-parameters" class="headerlink" title="hc.parameters"></a>hc.parameters</h4><p>取消注释并修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.connection.stalecheck$Boolean=true</span><br></pre></td></tr></table></figure></p><p>网上普遍的说法是<code>httpclient4.idletimeout=300</code>，其他几个是科学上网，在外网找到的。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote><p><a href="https://wiki.apache.org/jmeter/JMeterSocketClosed" target="_blank" rel="noopener">Jmeter Wiki</a><br><a href="https://blog.csdn.net/miss_hua/article/details/50549606" target="_blank" rel="noopener">Jmeter-Socket closed</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jmeter压测执行过程中报错：java.net.SocketException: Socket operation on nonsocket: connect&lt;/p&gt;
    
    </summary>
    
      <category term="性能测试" scheme="http://tokyle.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Jmeter" scheme="http://tokyle.com/tags/Jmeter/"/>
    
  </entry>
  
</feed>
