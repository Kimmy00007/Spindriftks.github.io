<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>它夏了夏天</title>
  
  <subtitle>生命中有一种遇见，就让它美如行云流水，然后一生去回味。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tokyle.com/"/>
  <updated>2018-03-09T08:59:53.814Z</updated>
  <id>http://tokyle.com/</id>
  
  <author>
    <name>Kyle</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL之SQL优化系列（一）</title>
    <link href="http://tokyle.com/2018/03/09/MySQL%E4%B9%8BSQL%E4%BC%98%E5%8C%96%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://tokyle.com/2018/03/09/MySQL之SQL优化系列（一）/</id>
    <published>2018-03-09T08:55:19.000Z</published>
    <updated>2018-03-09T08:59:53.814Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个不知道几分之几的程序员，日常性能测试的关注点之一就是SQL的执行效率，SQL优化。</p><h3 id="案例库"><a href="#案例库" class="headerlink" title="案例库"></a>案例库</h3><p>mysql提供有类似oracle的scott库（root/tiger，至今记得接触oracle时候这个趣闻，创始人是库名，猫的名字是密码）的案例库sakila，基本可以使用来完成测试。</p><blockquote><p><a href="http://downloads.mysql.com/docs/sakila-db.zip" target="_blank" rel="noopener">sakila库下载地址</a></p></blockquote><p>压缩包中有三个文件：<code>sakila-schema.sql</code>，<code>sakila-data.sql</code>，<code>sakila.mwb</code>；sakila-schema.sql建库及表，sakila-data.sql插数据，sakila.mwb可以使用<code>mysql workbench</code>打开，是sakila的数据模型（MySQL Mode）</p><blockquote><p><a href="https://dev.mysql.com/downloads/workbench/" target="_blank" rel="noopener">MySQL workbench官方下载地址</a><br><a href="https://pan.baidu.com/s/1uiiOk-O0h3O4dtiiQolXVg" target="_blank" rel="noopener">度娘盘地址</a>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;密码：25y4</p></blockquote><p>安装完成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use sakila;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------------------+</span><br><span class="line">| Tables_in_sakila           |</span><br><span class="line">+----------------------------+</span><br><span class="line">| actor                      |</span><br><span class="line">| actor_info                 |</span><br><span class="line">| address                    |</span><br><span class="line">| category                   |</span><br><span class="line">| city                       |</span><br><span class="line">| country                    |</span><br><span class="line">| customer                   |</span><br><span class="line">| customer_list              |</span><br><span class="line">| film                       |</span><br><span class="line">| film_actor                 |</span><br><span class="line">| film_category              |</span><br><span class="line">| film_list                  |</span><br><span class="line">| film_text                  |</span><br><span class="line">| inventory                  |</span><br><span class="line">| language                   |</span><br><span class="line">| nicer_but_slower_film_list |</span><br><span class="line">| payment                    |</span><br><span class="line">| rental                     |</span><br><span class="line">| sales_by_film_category     |</span><br><span class="line">| sales_by_store             |</span><br><span class="line">| staff                      |</span><br><span class="line">| staff_list                 |</span><br><span class="line">| store                      |</span><br><span class="line">+----------------------------+</span><br><span class="line">23 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><h3 id="show-status查看SQL执行频率"><a href="#show-status查看SQL执行频率" class="headerlink" title="show status查看SQL执行频率"></a>show status查看SQL执行频率</h3><p>MySQL可以通过<code>show [session|global] status</code>命令来查看服务器状态信息；其中<code>session</code>，<code>global</code>为可选参数，session表示显示当前连接的统计结果，global表示统计自数据库上次启动至今的信息，不写默认为<code>session</code>。<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like &apos;Com_%&apos;;        </span><br><span class="line">+-----------------------------+-------+ </span><br><span class="line">| Variable_name               | Value | </span><br><span class="line">+-----------------------------+-------+ </span><br><span class="line">| Com_admin_commands          | 0     | </span><br><span class="line">| Com_assign_to_keycache      | 0     | </span><br><span class="line">| Com_alter_db                | 0     | </span><br><span class="line">| Com_alter_db_upgrade        | 0     | </span><br><span class="line">| Com_alter_event             | 0     | </span><br><span class="line">| Com_alter_function          | 0     | </span><br><span class="line">| Com_alter_instance          | 0     | </span><br><span class="line">| Com_alter_procedure         | 0     | </span><br><span class="line">| Com_alter_server            | 0     | </span><br><span class="line">| Com_alter_table             | 2     | </span><br><span class="line">| Com_alter_tablespace        | 0     | </span><br><span class="line">| Com_alter_user              | 0     | </span><br><span class="line">| Com_analyze                 | 0     | </span><br><span class="line">| Com_begin                   | 0     | </span><br><span class="line">| Com_binlog                  | 0     | </span><br><span class="line">| Com_call_procedure          | 0     | </span><br><span class="line">| Com_change_db               | 3     | </span><br><span class="line">| Com_change_master           | 0     | </span><br><span class="line">| Com_change_repl_filter      | 0     | </span><br><span class="line">| Com_check                   | 0     | </span><br><span class="line">| Com_checksum                | 0     | </span><br><span class="line">| Com_commit                  | 15    | </span><br><span class="line">| Com_create_db               | 1     | </span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>统计当前连接下的信息。</p><h4 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h4><p>Com_xxx表示每个xxx语句执行的次数，通常比较关注的是以下几个：<br>◆&ensp;Com_select：&ensp;执行SELECT操作的次数，执行一次累加1；<br>◆&ensp;Com_insert：&ensp;执行INSERT操作的次数，对于批量插入的INSERT操作，只累加一次；<br>◆&ensp;Com_update：&ensp;执行UPDATE操作的次数。<br>◆&ensp;Com_delete：&ensp;执行DELETE操作的次数。<br>上述参数对于所有的存储引擎的表操作都会进行累计，下面的参数，只针对InnoDB存储引擎：<br>◆&ensp;Innodb_read：SELECT查询返回的<strong>行数</strong>。<br>◆&ensp;Innodb_rows_inserted：执行INSERT操作插入的<strong>行数</strong>。<br>◆&ensp;Innodb_rows_updated：执行UPDATE操作更新的<strong>行数</strong>。<br>◆&ensp;Innodb_rows_deleted：执行DELETE操作删除的<strong>行数</strong>。<br>通过以上参数，比较容易得出当前数据库的应用是插入更新为主还是查询操作为主，以及各种类型的SQL大致执行的比例是多少。（对于更新操作的技术，是对执行次数的技术，不论commit还是rollback都会累加）。<br>对于事务型应用，通过<code>Com_commit</code>和<code>Com_rollback</code>可以了解事务提交和回滚的情况，对于回滚操作很频繁的数据库，可能意味着应用编写存在问题。<br>另外，一下几个参数便于了解数据库的基本情况：<br>◆&ensp;Connections：尝试连接MySQL服务器的次数。<br>◆&ensp;Uptime：服务器工作时间。<br>◆&ensp;Slow_queried：慢查询次数</p><h3 id="定位执行效率低的SQL"><a href="#定位执行效率低的SQL" class="headerlink" title="定位执行效率低的SQL"></a>定位执行效率低的SQL</h3><p>我在工作中，使用过两种方式来查看当前执行效率低的SQL：<br>一：查看线程：<code>show processlist</code><br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show processlist;</span><br><span class="line">+----+------+-----------------+--------+---------+-------+----------+------------------+</span><br><span class="line">| Id | User | Host            | db     | Command | Time  | State    | Info             |</span><br><span class="line">+----+------+-----------------+--------+---------+-------+----------+------------------+</span><br><span class="line">|  6 | root | localhost:16830 | test1  | Sleep   | 18721 |          | NULL             |</span><br><span class="line">|  7 | root | localhost:17154 | test1  | Sleep   | 18721 |          | NULL             |</span><br><span class="line">| 18 | root | localhost:47691 | sakila | Query   |     0 | starting | show processlist |</span><br><span class="line">| 19 | root | localhost:49737 | NULL   | Sleep   |   393 |          | NULL             |</span><br><span class="line">| 20 | root | localhost:49738 | sakila | Sleep   |   393 |          | NULL             |</span><br><span class="line">+----+------+-----------------+--------+---------+-------+----------+------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>该命令可以查看当前MySQL在进行的线程，包括状态，信息（是否锁表）等，便于实时查看SQL执行情况</p><p>二：慢查询日志定位<br>MySQL的慢查询日志位置可以命令查看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;%slow_query_log%&apos;;</span><br><span class="line">+---------------------+-----------------------------------------------------------+</span><br><span class="line">| Variable_name       | Value                                                     |</span><br><span class="line">+---------------------+-----------------------------------------------------------+</span><br><span class="line">| slow_query_log      | OFF                                                       |</span><br><span class="line">| slow_query_log_file | /home/data/mysql/centos7-db-slow.log   |</span><br><span class="line">+---------------------+-----------------------------------------------------------+</span><br><span class="line">2 rows in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>默认情况下慢查询是关闭的，慢查询日志保存路径可以看见。<br>只需要给<code>slow_query_log</code>设置值即可开启慢查询：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global slow_query_log=1;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &apos;%slow_query_log%&apos;;</span><br><span class="line">+---------------------+-----------------------------------------------------------+</span><br><span class="line">| Variable_name       | Value                                                     |</span><br><span class="line">+---------------------+-----------------------------------------------------------+</span><br><span class="line">| slow_query_log      | ON                                                        |</span><br><span class="line">| slow_query_log_file | /home/data/mysql/centos7-db-slow.log  |</span><br><span class="line">+---------------------+-----------------------------------------------------------+</span><br><span class="line">2 rows in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>同时，可以配置慢查询时间，以及慢查询日志保存路径：<br>在mysql安装路径下找到<code>my.cnf</code>文件，在其中增加或者修改<code>long_query_time</code>和<code>slow_query_log_file</code>即可完成配置。或者命令行更改也可以：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;%long_query_time%&apos;;</span><br><span class="line">+-----------------+-----------+</span><br><span class="line">| Variable_name   | Value     |</span><br><span class="line">+-----------------+-----------+</span><br><span class="line">| long_query_time | 10.000000 |</span><br><span class="line">+-----------------+-----------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set long_query_time=2;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &apos;long_query_time&apos;;</span><br><span class="line">+-----------------+----------+</span><br><span class="line">| Variable_name   | Value    |</span><br><span class="line">+-----------------+----------+</span><br><span class="line">| long_query_time | 2.000000 |</span><br><span class="line">+-----------------+----------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure></p><h4 id="慢查询示例"><a href="#慢查询示例" class="headerlink" title="慢查询示例"></a>慢查询示例</h4><p>当MySQL开启了慢查询，并且慢查询时间也根据自己情况进行了更改，下面实验下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;%slow_query_log%&apos;;</span><br><span class="line">+---------------------+-----------------------------------------------------------+</span><br><span class="line">| Variable_name       | Value                                                     |</span><br><span class="line">+---------------------+-----------------------------------------------------------+</span><br><span class="line">| slow_query_log      | ON                                                        |</span><br><span class="line">| slow_query_log_file | /home/data/mysql/centos7-db-slow.log  |</span><br><span class="line">+---------------------+-----------------------------------------------------------+</span><br><span class="line">2 rows in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>可以看见，当前系统慢查询是开启状态，且一旦出现慢查询，会记录日志在<code>/home/data/mysql/centos7-db-slow.log</code>中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;long_query_time&apos;;</span><br><span class="line">+-----------------+----------+</span><br><span class="line">| Variable_name   | Value    |</span><br><span class="line">+-----------------+----------+</span><br><span class="line">| long_query_time | 2.000000 |</span><br><span class="line">+-----------------+----------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>慢查询时间设置为2s，一旦有SQL执行时间超过2s，就会被认为是慢查询，记录在慢查询日志中。</p><p>执行4s查询：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select sleep(4);</span><br><span class="line">+----------+</span><br><span class="line">| sleep(4) |</span><br><span class="line">+----------+</span><br><span class="line">|        0 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (4.00 sec)</span><br></pre></td></tr></table></figure></p><p>该SQL执行时间为固定的4s，按照设置，肯定是慢查询了，进入日志文件，查看日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MySQL, Version: 5.7.21 (MySQL Community Server (GPL)). started with:</span><br><span class="line">TCP Port: 3306, Named Pipe: MySQL</span><br><span class="line">Time                 Id Command    Argument</span><br><span class="line"># Time: 2018-03-09T08:34:16.502235Z</span><br><span class="line"># User@Host: root[root] @ localhost [::1]  Id:     2</span><br><span class="line"># Query_time: 4.000101  Lock_time: 0.000000 Rows_sent: 1  Rows_examined: 0</span><br><span class="line">use sakila;</span><br><span class="line">SET timestamp=1520584456;</span><br><span class="line">select sleep(4);</span><br></pre></td></tr></table></figure></p><p>以上就是慢查询内容，包含数据库，SQL执行时间，具体SQL，即定位到执行效率低的SQL，进行优化。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>定位到慢查询的SQL之后，接下来就是对低效SQL进行分析，后序再说…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一个不知道几分之几的程序员，日常性能测试的关注点之一就是SQL的执行效率，SQL优化。&lt;/p&gt;
&lt;h3 id=&quot;案例库&quot;&gt;&lt;a href=&quot;#案例库&quot; class=&quot;headerlink&quot; title=&quot;案例库&quot;&gt;&lt;/a&gt;案例库&lt;/h3&gt;&lt;p&gt;mysql提供有类似ora
      
    
    </summary>
    
      <category term="MySQL-SQL优化" scheme="http://tokyle.com/categories/MySQL-SQL%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="MySQL" scheme="http://tokyle.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>python基础之*args与**kwargs</title>
    <link href="http://tokyle.com/2018/03/08/python%E5%9F%BA%E7%A1%80%E4%B9%8B-args%E4%B8%8E-kwargs/"/>
    <id>http://tokyle.com/2018/03/08/python基础之-args与-kwargs/</id>
    <published>2018-03-08T07:01:05.000Z</published>
    <updated>2018-03-08T07:12:20.388Z</updated>
    
    <content type="html"><![CDATA[<p>python基础之<code>*args</code>和<code>**kwargs</code>简单介绍</p><a id="more"></a><h3 id="认识-args和-kwargs"><a href="#认识-args和-kwargs" class="headerlink" title="认识 *args和 **kwargs"></a>认识 <strong>*</strong>args和 <strong>**</strong>kwargs</h3><p>首先，看看<code>*args</code>和<code>**kwargs</code>到底是个什么：<br>代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def foo(*args, **kwargs):</span><br><span class="line">    print(u&quot;args = &quot;, args)</span><br><span class="line">    print(u&quot;kwargs = &quot;, kwargs)</span><br><span class="line">    print(&quot;==============我是分割线==================&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    foo(1, 2, 3, 4)</span><br><span class="line">    foo(a=1, b=2, c=3)</span><br></pre></td></tr></table></figure></p><p>输出结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">args =  (1, 2, 3, 4)</span><br><span class="line">kwargs =  &#123;&#125;</span><br><span class="line">==============我是分割线==================</span><br><span class="line">args =  ()</span><br><span class="line">kwargs =  &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">==============我是分割线==================</span><br></pre></td></tr></table></figure></p><p>可以看出，这俩其实就是python的两个变量，<code>*args</code>是个元组（tuple）,<code>**kwargs</code>是个字典（dictionary）。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>通过google各种解释，差不多是理解了，其实<code>*args</code>和<code>**kwargs</code>真正起作用的是<code>*</code>和<code>**</code>，而<code>args</code>以及<code>kwargs</code>其实就类似于<code>var</code>和<code>vars</code>；当python需要传递多个参数时，就将参数放在一个元组里，按照参数位置传递，以<code>*</code>开头；当需要传递多个键值对时，就把这些键值对放在一个字典里，按照关键字传递，以<code>**</code>开头。</p><p>示例一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, *args):</span><br><span class="line">    print(x)</span><br><span class="line">    print(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    foo(1, 2, 3, 4)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">(2, 3, 4)</span><br></pre></td></tr></table></figure></p><p>可以看出，python将（1,2,3,4），其中1，赋给默认参数x，（2,3,4）作为一个元组赋给args；</p><p>示例二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, **kwargs):</span><br><span class="line">    print(x)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    foo(1, a=2, b=3, c=4)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">&#123;&apos;a&apos;: 2, &apos;b&apos;: 3, &apos;c&apos;: 4&#125;</span><br></pre></td></tr></table></figure></p><p>python将(1, a=2, b=3, c=4)，其中1，赋值给默认参数x；(a=2, b=3, c=4)作为字典赋给kwargs。</p><h3 id="实参角度"><a href="#实参角度" class="headerlink" title="实参角度"></a>实参角度</h3><p>或者从实参角度来理解：<br><code>*args</code>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, y, z):</span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    foo(*(1, 2, 3))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure></p><p>可以看出python将<code>*(1, 2, 3)</code>，按照位置将值赋给了x, y, z；</p><p><code>**kwargs</code>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, y, z):</span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    foo(**&#123;&quot;x&quot;:1,&quot;y&quot;:2,&quot;z&quot;:3&#125;)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure></p><p>python将<code>**{&quot;x&quot;:1,&quot;y&quot;:2,&quot;z&quot;:3}</code>，按照关键字<code>x,y,z</code>赋值给了x,y,z。</p><p><code>*args</code>其实可以理解为python需要调用的任意个没有关键字的参数（无名参数）组成的元组，<br>称之为<strong>Non-keyword Variable Arguments</strong>；<br><code>**kwargs</code>是python需要调用的任意个关键字参数（键值对）组成的字典，<br>称之为<strong>keyword Variable Arguments</strong></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="位置参数，-args，-kwargs混合使用顺序"><a href="#位置参数，-args，-kwargs混合使用顺序" class="headerlink" title="位置参数，*args，**kwargs混合使用顺序"></a>位置参数，<strong>*</strong>args，<strong>**</strong>kwargs混合使用顺序</h4><p>当函数参数中同时拥有<code>位置参数</code>，<code>*args</code>以及<code>**kwargs</code>时，顺序必须是<code>位置参数，*args，**kwargs</code>，否则会报错。<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, *args, **kwargs):</span><br><span class="line">    print(x)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    foo(1,2,3,4,a=1, b=2, c=3)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">(2, 3, 4)</span><br><span class="line">&#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br></pre></td></tr></table></figure></p><h4 id="位置参数，默认参数，-kwargs混合使用顺序"><a href="#位置参数，默认参数，-kwargs混合使用顺序" class="headerlink" title="位置参数，默认参数，**kwargs混合使用顺序"></a>位置参数，默认参数，**kwargs混合使用顺序</h4><p>当需要同时使用位置参数，默认参数以及<code>**kwargs</code>时，顺序必须为<code>位置参数，默认参数，**kwargs</code>，否则会报错。<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def foo(x, y=2, **kwargs):</span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    foo(1,3,a=1,b=2,c=3)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">&#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br></pre></td></tr></table></figure></p><p>其中，3将赋给y，替换默认值2。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python基础之&lt;code&gt;*args&lt;/code&gt;和&lt;code&gt;**kwargs&lt;/code&gt;简单介绍&lt;/p&gt;
    
    </summary>
    
      <category term="python基础" scheme="http://tokyle.com/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python3" scheme="http://tokyle.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>docker使用简介</title>
    <link href="http://tokyle.com/2018/03/05/docker%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/"/>
    <id>http://tokyle.com/2018/03/05/docker使用简介/</id>
    <published>2018-03-05T03:08:36.000Z</published>
    <updated>2018-03-05T07:49:51.865Z</updated>
    
    <content type="html"><![CDATA[<p>日常docker使用简介</p><a id="more"></a><p>由于日常测试的项目都是在云端，阿里云，AWS上，基本也都是使用了虚拟化技术，项目放在docker或者k8s中。我现在所在的公司，是把项目放在docker中，挂在阿里云上，所以日常使用比较多的就是docker了。</p><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h4><p>从跳转机进入指定的docker所在服务器中，想要查看目前运行的服务：<br>查看所有服务:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></p><p>和在linux下查看服务差不多，只是前面加了个<code>docker</code>；<br>查看指定的服务，例如想查看服务名为boss的服务:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a |grep boss</span><br></pre></td></tr></table></figure></p><p>看着还是和linux下查看服务一样。。</p><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><p>一般进行测试时，习惯是开着日志，动态查看，因为有的错误，页面不会全部展示出来，我的习惯是进行测试时，浏览器开启开发者模式（F12），后台开启动态日志，执行操作之后进行数据库查询验证；那么docker下进行动态日志展示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f --tail=300 ContainerId</span><br></pre></td></tr></table></figure></p><p><strong>解释：</strong><br>首先在服务所在的服务器下，查询得到该服务当前开启的容器ID（containerId）<br><code>docker ps -a</code>该命令执行完成，会展示服务的基础信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test-docker2 anmavadmin]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE   COMMAND    CREATED    STATUS   PORTS   NAMES</span><br></pre></td></tr></table></figure></p><p>即可以获取得到指定服务的containerid，动态查看日志和linux下类似，linux下普通的查看日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f -n 300 xxx.log</span><br></pre></td></tr></table></figure></p><p>即可动态显示日志文件后300行的日志，同样的，在docker下查看也是使用<code>-f</code>动态显示，显示行数用<code>--tail=行数</code>，再加上指定的<code>Container Id</code>即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f --tail=300 boss_container_id</span><br></pre></td></tr></table></figure></p><h3 id="进入Docker容器"><a href="#进入Docker容器" class="headerlink" title="进入Docker容器"></a>进入Docker容器</h3><p>docker说到底，其实就是个小型的linux环境，所以，和普通linux一样，也是可以直接进入docker内部，进入docker内部有四种方法，方法很多，日常熟练的掌握一l两种即可。:</p><blockquote><p><a href="https://www.cnblogs.com/xhyan/p/6593075.html" target="_blank" rel="noopener">进入docker内部的四种方法</a></p></blockquote><p>我日常使用的是<code>docker exec</code>进入docker内部：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it ContainerId /bin/bash</span><br></pre></td></tr></table></figure></p><p>即可进入容器内部，之后就可以和普通linux下一样操作。</p><h3 id="K8S（Kubernetes）-Docker"><a href="#K8S（Kubernetes）-Docker" class="headerlink" title="K8S（Kubernetes） + Docker"></a>K8S（Kubernetes） + Docker</h3><p>当前很多环境的搭建方案选择都是k8s+docker的混合搭建，这样的环境，进行测试工作的常用操作：</p><h4 id="查看服务所在节点"><a href="#查看服务所在节点" class="headerlink" title="查看服务所在节点"></a>查看服务所在节点</h4><p>首先是进入k8s所在的服务器，查看需要查看日志的服务所在docker节点（正常情况下都不会只有一台docker，负载均衡，都知道。。。）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -o wide</span><br></pre></td></tr></table></figure></p><p>即可显示所有服务的基础信息，包括服务名称，状态，IP，docker节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7-k8s1 xxx]# kubectl get pods -o wide</span><br><span class="line">NAME    READY     STATUS    RESTARTS   AGE       IP             NODE</span><br><span class="line">test-boss-server-060b3cf86fa24bd7c9ce2548015e9b38-07qn1       1/1       Running   0          12h       172.17.46.3    centos7-k8s1</span><br></pre></td></tr></table></figure></p><p>此时即可获取到服务所在节点，例如上述示例，服务在<code>centos7-k8s1</code>，即节点1上，所以进入节点1所在服务器，即可动态查看服务日志:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">进入节点1，sudo su root(或者就是sudo 命令)</span><br><span class="line">docker ps -a |grep boss</span><br><span class="line">docker logs -f --tail=300 containerid</span><br></pre></td></tr></table></figure></p><h4 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h4><p>测试中也会遇见点击页面无响应，后台报服务连接超时的错误，此时，可以查看当前服务运行状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get rc -o wide</span><br></pre></td></tr></table></figure></p><p>获取到的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7-k8s1 xxx]# kubectl get rc -o wide</span><br><span class="line">NAME   DESIRED   CURRENT   READY     AGE       CONTAINER(S)     IMAGE(S)          SELECTOR</span><br><span class="line">test-boss-server       2         2         2         12h       test-boss-server       registry.docker.test.cn:5000/test-dev/test-boss-server:20180304_215608       deployment=060b3cf86fa24bd7c9ce2548015e9b38,name=test-boss-server,version=test</span><br></pre></td></tr></table></figure></p><p>可以看出boss服务，期望运行节点数是2，当前运行节点数也是2，所以该服务当前是正常状态。一旦出现<code>DESIRED</code>和<code>CURRENT</code>的值不一致，表明有服务出现问题。出现问题之后就需要对服务进行问题定位，重启等操作，就不多说了。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>自己对于虚拟化技术的掌握度基本是皮毛都算不上，现在还是满足最基本工作需要范围o(╥﹏╥)o，后期看来得好好补。。</p><p>3月3号时候，突然有个冲动，步行到西山岛上去，然后就说走就走。。。从<code>渔洋山</code>一直到<code>西山岛-金庭游客中心</code>,一个人默默的暴走了近1个小时40分钟，9.5km，走完全程3段<code>太湖大桥</code>，穿过岛两座，可惜天公不作美啊，太湖湖面上雾有点大，桥上风景还是有点朦胧，得找个天气晴朗的日志再走一遭！（再也不穿登山鞋去了，原本想爬山才穿的登山鞋，结果徒步差点没把脚走废掉。。。）</p><p>生命在于运动，恰逢一年一度的跑步黄金时期，该走出去，走走，跑跑，爬爬山~~~<br>(大早上来发现VPS又挂了，哎我的hexo可以搭在VPS上的，进不去还写个鬼博客，只好又重搭了一个，愁)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日常docker使用简介&lt;/p&gt;
    
    </summary>
    
      <category term="skill" scheme="http://tokyle.com/categories/skill/"/>
    
    
      <category term="docker" scheme="http://tokyle.com/tags/docker/"/>
    
      <category term="k8s" scheme="http://tokyle.com/tags/k8s/"/>
    
      <category term="Linux运维" scheme="http://tokyle.com/tags/Linux%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>新年伊始-开年记</title>
    <link href="http://tokyle.com/2018/02/28/%E6%96%B0%E5%B9%B4%E4%BC%8A%E5%A7%8B-%E5%BC%80%E5%B9%B4%E8%AE%B0/"/>
    <id>http://tokyle.com/2018/02/28/新年伊始-开年记/</id>
    <published>2018-02-28T02:20:33.000Z</published>
    <updated>2018-03-05T01:17:44.420Z</updated>
    
    <content type="html"><![CDATA[<p>随波逐流，还是不停的瞎折腾~</p><a id="more"></a><h3 id="新年伊始"><a href="#新年伊始" class="headerlink" title="新年伊始"></a>新年伊始</h3><p>过年来上班第一天就发现，SSR又登不上了，也就意味着，google啊，又离我远去。。。搞啥啊，查了下黄历，没啥问题啊，翻了下新华社新闻，好吧，开会了。。不出所料，被墙了。</p><p>周二时候有点不服，把vultr上几乎所有VPS都重搭了下，好吧，居然IP全挂，这么多台都全挂，有点服。。<br>今天早上过来，感觉还是有点不爽，主要是每次打开浏览器，由于我设置的Chrome主页就是google，每次进来都是空荡荡的，感觉很难受，抱着不死就折腾的心态，又开始搭，结果还真找到个漏网之鱼，苍天啊，真的是泪流满面o(╥﹏╥)o</p><p>立刻重建，还好有这个经历：</p><blockquote><p><a href="http://tokyle.com/2018/01/24/VPS%E9%87%8D%E5%BB%BA%E8%AE%B0/#more">VPS重建记</a></p></blockquote><p>一台新机器，花了半个小时就完成了，终于，又可以科学上网，hexo又可以更博了！！</p><h3 id="日常记忆"><a href="#日常记忆" class="headerlink" title="日常记忆"></a>日常记忆</h3><p>随手记下昨天遇到的小白问题：<br>在搭建自动化框架时，基本会把页面元素的定位信息放在类似于<code>example.ini</code>的配置文件中，然后从文件中获取定位方式以及定位表达式，这样方便维护。<br>读取<code>example.ini</code>文件配置内容，我是使用的<code>configparser</code>，用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cf = configparser.ConfigParser()</span><br><span class="line">cf.read(&apos;example.ini&apos;)</span><br></pre></td></tr></table></figure></p><p>这样就会把配置文件中的配置信息加载到内存中，获取信息一般使用两种方式：</p><h4 id="获取特定的optionValue"><a href="#获取特定的optionValue" class="headerlink" title="获取特定的optionValue"></a>获取特定的optionValue</h4><p>使用<code>cf.get(section, option)</code>即可获取特定的option的值<br>例如，有一个<code>example.ini</code>内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[126mail_login]</span><br><span class="line">loginPage.frame = id &gt; x-URS-iframe</span><br><span class="line">loginPage.username = xpath &gt; //input[@name=&quot;email&quot;]</span><br><span class="line">loginPage.password = xpath &gt; //input[@name=&quot;password&quot;]</span><br><span class="line">loginPage.loginbutton = id &gt; dologin</span><br></pre></td></tr></table></figure></p><p>想要获取切换到登录frame的定位方式及表达式，只需要：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frame126 = cf.get(&quot;126mail_login&quot;, &quot;loginPage.frame&quot;)</span><br><span class="line">print(frame126)</span><br></pre></td></tr></table></figure></p><p>打印出定位方式及表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id &gt; x-URS-iframe</span><br></pre></td></tr></table></figure></p><h4 id="获取指定section下的所有option"><a href="#获取指定section下的所有option" class="headerlink" title="获取指定section下的所有option"></a>获取指定section下的所有option</h4><p>使用<code>cf.items(section)</code>即可获取该section下的所有option，返回的是一个列表，包含option以及对应的value<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">options = cf.items(&quot;126mail_login&quot;)</span><br><span class="line">print(options)</span><br></pre></td></tr></table></figure></p><p>返回结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(&apos;loginpage.frame&apos;, &apos;id &gt; x-URS-iframe&apos;), (&apos;loginpage.username&apos;, &apos;xpath &gt; //input[@name=&quot;email&quot;]&apos;), (&apos;loginpage.password&apos;, &apos;xpath &gt; //input[@name=&quot;password&quot;]&apos;), (&apos;loginpage.loginbutton&apos;, &apos;id &gt; dologin&apos;)]</span><br></pre></td></tr></table></figure></p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>由于日常的开发环境是windows，系统的默认编码是<strong>gbk</strong>，所有在windows下使用<code>configparser</code>来读取配置文件时，有的时候会报编码错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnicodeDecodeError: &apos;gbk&apos; codec can&apos;t decode byte 0xae in position 272: illegal multibyte sequence</span><br></pre></td></tr></table></figure></p><h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>解决方法很简单，直接看<code>cf.read()</code>的源码，源码是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">def read(self, filenames, encoding=None):</span><br><span class="line">    &quot;&quot;&quot;Read and parse a filename or a list of filenames.</span><br><span class="line"></span><br><span class="line">    Files that cannot be opened are silently ignored; this is</span><br><span class="line">    designed so that you can specify a list of potential</span><br><span class="line">    configuration file locations (e.g. current directory, user&apos;s</span><br><span class="line">    home directory, systemwide directory), and all existing</span><br><span class="line">    configuration files in the list will be read.  A single</span><br><span class="line">    filename may also be given.</span><br><span class="line"></span><br><span class="line">    Return list of successfully read files.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if isinstance(filenames, str):</span><br><span class="line">        filenames = [filenames]</span><br><span class="line">    read_ok = []</span><br><span class="line">    for filename in filenames:</span><br><span class="line">        try:</span><br><span class="line">            with open(filename, encoding=encoding) as fp:</span><br><span class="line">                self._read(fp, filename)</span><br><span class="line">        except OSError:</span><br><span class="line">            continue</span><br><span class="line">        read_ok.append(filename)</span><br><span class="line">    return read_ok</span><br></pre></td></tr></table></figure></p><p>默认的<code>read()</code>是没有指定编码的<code>encoding=None</code>，所以只需要指定编码为<code>utf-8</code>即可解决：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cf.read(pageElementLocatorPath, encoding=&apos;utf-8&apos;)</span><br></pre></td></tr></table></figure></p><p>其中pageElementLocatorPath为<code>example.ini</code>文件</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>生活不就是不断的折腾嘛，墙了继续试，大不了你再墙嘛~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随波逐流，还是不停的瞎折腾~&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://tokyle.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="selenium" scheme="http://tokyle.com/tags/selenium/"/>
    
      <category term="自动化测试" scheme="http://tokyle.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="lives" scheme="http://tokyle.com/tags/lives/"/>
    
  </entry>
  
  <entry>
    <title>写在2018新年来临</title>
    <link href="http://tokyle.com/2018/02/12/%E5%86%99%E5%9C%A82018%E6%96%B0%E5%B9%B4%E6%9D%A5%E4%B8%B4/"/>
    <id>http://tokyle.com/2018/02/12/写在2018新年来临/</id>
    <published>2018-02-12T02:42:29.000Z</published>
    <updated>2018-02-12T03:18:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>写在春节来临之际<br>农历2017年最后一个工作日，明天就要回家过春节了，想想，2017，好像过去的挺快的。来篇流水账，写写，我的2017。</p><a id="more"></a><p>活在苏州：<br><img src="http://ww1.sinaimg.cn/large/a025e134gy1fodg98px0aj20zk0qo0xr.jpg" alt="山塘夕阳"></p><h3 id="工作篇"><a href="#工作篇" class="headerlink" title="工作篇"></a>工作篇</h3><p>有苦有甜才是生活，作为占据我一天一半时间的大头，首先还是想看看在这上面，我的2017到底发生了些什么。<br>工作内容还是日常的做个<code>行走的BUG</code>，以做一个开发及其烦躁的<strong>tester</strong>为荣，并在这条道上，坚定的走到黑！</p><h4 id="安硕生涯"><a href="#安硕生涯" class="headerlink" title="安硕生涯"></a>安硕生涯</h4><p>2016年7月来到安硕，工作了也有段时间，工作方式，好歹是从个外人眼中看来，测试就是定点点的工作转换成了性能测试做的多一点的，入门级性能测试工程师。日常工作，积累了一套性能需求分析-脚本编写-结果分析-瓶颈定位-性能调优的性能测试步骤，说起来，做的还是有点乐此不疲的，就是记忆力有点差，mysql性能调优经常忘。。（(ಥ_ಥ) ）<br>同时，接触到了大数据相关，虽然和我的关联不是特别大，最多就是帮着测测规则，测测数据，好歹是打开了另一扇窗；眼界不是来自于期刊杂志，有真正自己去接触了，才是有自己的感受，所以，还是挺感激这段经历。<br>然后2017年9月，离开了安硕。</p><h4 id="新的开始"><a href="#新的开始" class="headerlink" title="新的开始"></a>新的开始</h4><p>2017年9月21日，正式从安硕来到了这，正式开始了测试带队（虽然手下就一人~~~），也正式捡起了放下一年半的python。刚毕业那会，和舍友选语言，他选了python做爬虫，我选了java，后来兜兜转转，我的java技术还是那么菜，压根入门都没达到就半路夭折，好在，还有补牢的机会，重新拿起python，做起了自动化。<br>9月至今，python书籍看完两本，简陋自动化框架搭建完成一个，算是还对的起自己。路还在脚下，当慢慢走。</p><h3 id="生活篇"><a href="#生活篇" class="headerlink" title="生活篇"></a>生活篇</h3><p>2017年的生活，不再那么浑浑噩噩，上班下班，周末宅；生活中发生了好几件大事。<br>2017年5月13日，在苏州买了房，从此开始房奴生涯（o(╥﹏╥)o）<br>2017年5月23日，回句容领了证，从此告别一个人的时光（(｀・ω・´)）<br>7月，失去了一位亲人..<br>总的来说，2017，算是翻天覆地的一年，本命年的我，经历了也就这些。<br>人间烟火，不过是比落叶还轻的生活；<br>该开的开，山野鲜花依然澎湃；该来的来，路上精彩还在等待。</p><h3 id="玩乐篇"><a href="#玩乐篇" class="headerlink" title="玩乐篇"></a>玩乐篇</h3><p>换个心情，回忆点轻松的，作为一个从小就喜欢满田野疯的“野孩子”，整年不出门去看看那是不现实的。<br><strong>3月</strong>，的确是个赏樱花的季节，<code>无锡-鼋头渚</code></p><p><img src="http://ww1.sinaimg.cn/large/a025e134gy1fodgazgujjj234028jb2a.jpg" alt="水墨江南"><br>原谅手残，技术不到家，樱花实在没拍的好，照片只能待在自己手机没事用来傻笑~<br><strong>4月</strong>，好像是万条垂下绿丝绦的时节了，<code>杭州-西湖</code><br><code>九溪烟树</code>，<code>云栖竹径</code>，<code>苏堤春晓</code>，<code>柳浪闻莺</code>，<code>梅坞春早</code>，<code>钱塘江</code>，<code>龙井村</code>等等，带着个小胖子，也有过一天翻越无数山头，暴走30公里的经历。（杭州之行，照片太丑，不拿出来丢人。。。）<br><strong>8月</strong>，拿着婚假，怀着点点感伤，踏上了川藏线的朝圣之路，<code>成都-&gt;拉萨</code><br>成都遇上海燕和莉儿，一行，10天，成都出发，终点拉萨。南方的孩子，还是应该在8月到雪山上去看看雪的，不是吗~<br>感芸芸众生，人世无常，茫茫大海，谁可争流；不如步入山野，凭栏远眺，闲庭信步，观云卷云舒。</p><p><img src="http://ww1.sinaimg.cn/large/a025e134gy1fodge4m00tj23vc2kwhdz.jpg" alt="川藏线一角"></p><p>竺法渐传三界远，<br>盛音近绕佛堂前。<br>达布拉宫，只有亲眼看见，才知道，眼前，真的就是一幅画。</p><p><img src="http://ww1.sinaimg.cn/large/a025e134gy1fodgghppwvj23vc2kwb2d.jpg" alt="夜间布达拉"></p><p>然后，<strong>12月</strong>，前往丽江拍婚纱照，天和西藏一样蓝，就是商业气息过于浓重了点，小憩可以，不宜久居。时间有限，没去成泸沽湖，没机会去洱海，都算是遗憾，谁说不是呢，有遗憾，才是真正的活着嘛。（照片，在相机，忘了传手机了。。。）</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>不大不小，24周岁，不多不少，两个人了；愿能够笑看沧桑，轻盈过往；淡看流年烟火，细品岁月静好。<br>花有花的灿烂，云有云的诗意，淡然的面对生命的一切逝去，在似水流年间细细品味每一个过往，每一种滋味，每一份流逝。</p><p>最后，最后一天了，祝所有，在未来的日子里，恬然，静候花开。</p><p><img src="http://ww1.sinaimg.cn/large/a025e134gy1fodgr5k11fj20u01hc7pr.jpg" alt="水墨江南"></p><p>（原谅通篇流水账~~~太久不会写文字了￣□￣｜｜）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在春节来临之际&lt;br&gt;农历2017年最后一个工作日，明天就要回家过春节了，想想，2017，好像过去的挺快的。来篇流水账，写写，我的2017。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://tokyle.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="lives" scheme="http://tokyle.com/tags/lives/"/>
    
  </entry>
  
  <entry>
    <title>python3完成mysql操作</title>
    <link href="http://tokyle.com/2018/02/11/python3%E5%AE%8C%E6%88%90mysql%E6%93%8D%E4%BD%9C/"/>
    <id>http://tokyle.com/2018/02/11/python3完成mysql操作/</id>
    <published>2018-02-11T07:33:08.000Z</published>
    <updated>2018-03-08T07:11:50.483Z</updated>
    
    <content type="html"><![CDATA[<p>python3使用pymysql操作mysql5.7</p><a id="more"></a><p>版本信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MYSQL 5.7.21</span><br><span class="line">PYTHON 3.6</span><br><span class="line">pymysql 0.8.0</span><br><span class="line">WIN 10</span><br></pre></td></tr></table></figure></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先，老样子，安装。<br>windows控制台直接执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure></p><p>即可，<code>pipenv</code>进行类包管理，控制台中进入工程所在目录下，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install pymysql</span><br></pre></td></tr></table></figure></p><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><p>sql.py文件，包含初始化数据库，创建库，创建表所有sql：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 创建gloryroad数据库</span><br><span class="line">create_database = &apos;CREATE DATABASE IF NOT EXISTS gloryroad DEFAULT CHARSET utf8 COLLATE utf8_general_ci;&apos;</span><br><span class="line"></span><br><span class="line"># 创建testdata表</span><br><span class="line">drop_table = &apos;drop table if exists TESTDATA;&apos;</span><br><span class="line">create_table = &quot;&quot;&quot;CREATE TABLE TESTDATA (</span><br><span class="line">         id INT NOT NULL,</span><br><span class="line">         bookname VARCHAR(40) NOT NULL UNIQUE,</span><br><span class="line">         author VARCHAR(30) NOT NULL)&quot;&quot;&quot;</span><br><span class="line">primary_sql = &apos;alter table testdata add primary key(id);&apos;</span><br><span class="line">alter_id = &apos;alter table testdata change id id int AUTO_INCREMENT NOT NULL;&apos;</span><br></pre></td></tr></table></figure></p><p>创建表时候，我们在mysql控制台，或者在类似<code>Navicat for mysql</code>这样的数据库连接工具中直接执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `testdata` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `bookname` varchar(40) NOT NULL,</span><br><span class="line">  `author` varchar(30) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `bookname` (`bookname`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure></p><p>即可创建包含主键，唯一键，自增字段等属性的<code>testdata</code>表，但是不知道为啥，我直接在pycharm中执行，一直报错，又不想耗在这上面，就拆开来了，先创建表，再增加主键，修改字段等操作。</p><h3 id="pymysql创建数据库及表"><a href="#pymysql创建数据库及表" class="headerlink" title="pymysql创建数据库及表"></a>pymysql创建数据库及表</h3><h4 id="创建库和表"><a href="#创建库和表" class="headerlink" title="创建库和表"></a>创建库和表</h4><p>pymysql对mysql的操作，基本可以总结为几步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">建立连接（connect）</span><br><span class="line">打开游标（cursor）</span><br><span class="line">执行sql（execute）</span><br><span class="line">提交事务（commit）</span><br><span class="line">关闭游标（close cursor）</span><br><span class="line">关闭连接（connect close）</span><br></pre></td></tr></table></figure></p><p>所以进行创建数据库和表操作时，一步一步执行即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2018/2/11 13:06</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from SQL import *</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DataBaseInit(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    1、数据库初始化</span><br><span class="line">    2、创建数据库及表，并向表中插入测试数据</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def __init__(self, host, port, dbName, username, password, charset):</span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.db = dbName</span><br><span class="line">        self.username = username</span><br><span class="line">        self.password = password</span><br><span class="line">        self.charset = charset</span><br><span class="line"></span><br><span class="line">    def creaete(self):</span><br><span class="line">        # 建库及表</span><br><span class="line">        try:</span><br><span class="line">            # 连接mysql数据库</span><br><span class="line">            conn = pymysql.connect(</span><br><span class="line">                host = self.host,</span><br><span class="line">                port = self.port,</span><br><span class="line">                user = self.username,</span><br><span class="line">                passwd = self.password,</span><br><span class="line">                charset = self.charset</span><br><span class="line">            )</span><br><span class="line">            # 获取数据库游标</span><br><span class="line">            cur = conn.cursor()</span><br><span class="line">            # 创建数据库</span><br><span class="line">            cur.execute(create_database)</span><br><span class="line">            # 选择创建好的数据库</span><br><span class="line">            conn.select_db(&quot;gloryroad&quot;)</span><br><span class="line">            # 建表并更改字段</span><br><span class="line">            cur.execute(drop_table)</span><br><span class="line">            cur.execute(create_table)</span><br><span class="line">            cur.execute(primary_sql)</span><br><span class="line">            cur.execute(alter_id)</span><br><span class="line">        except pymysql.Error as e:</span><br><span class="line">            raise e</span><br><span class="line">        else:</span><br><span class="line">            # 关闭游标</span><br><span class="line">            cur.close()</span><br><span class="line">            # commit</span><br><span class="line">            conn.commit()</span><br><span class="line">            # 关闭连接</span><br><span class="line">            conn.close()</span><br><span class="line">            print(u&quot;创建数据库及表成功&quot;)</span><br></pre></td></tr></table></figure></p><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><p>插入数据也是正常步骤即可，当插入不止一条数据，可以使用<code>executemany()</code>来一次插入多条数据，配合<code>insert into table (col1, col2) values (%s, %s)</code>可以完成参数化一次插入大量数据；插入数据方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">def insertData(self):</span><br><span class="line">    # 插入数据</span><br><span class="line">    try:</span><br><span class="line">        # 连接具体某个库</span><br><span class="line">        conn = pymysql.connect(</span><br><span class="line">            host=self.host,</span><br><span class="line">            port=self.port,</span><br><span class="line">            db=self.db,</span><br><span class="line">            user=self.username,</span><br><span class="line">            passwd=self.password,</span><br><span class="line">            charset=self.charset</span><br><span class="line">        )</span><br><span class="line">        # 打开游标</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        # 插入数据</span><br><span class="line">        sql = &quot;insert into testdata (bookname, author) values (%s, %s)&quot;</span><br><span class="line">        cur.executemany(sql, [</span><br><span class="line">            [&apos;FACE TO FACE WITH FARE&apos;, &apos;Amana Trobe&apos;],</span><br><span class="line">            [&apos;Relationship&apos;, &apos;Christopher benas Meng&apos;],</span><br><span class="line">            [&apos;ZOO&apos;, &apos;Yiyi&apos;]</span><br><span class="line">        ])</span><br><span class="line">    except pymysql.Error as e:</span><br><span class="line">        raise e</span><br><span class="line">    else:</span><br><span class="line">        conn.commit()</span><br><span class="line">        print(u&quot;初始化数据插入成功&quot;)</span><br><span class="line">        # 确认插入成功</span><br><span class="line">        # cur.execute(&quot;select * from testdata;&quot;)</span><br><span class="line">        # for i in cur.fetchall():</span><br><span class="line">        #     print(i[1], i[2])</span><br><span class="line">        cur.close()</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure></p><h3 id="从mysql获取数据"><a href="#从mysql获取数据" class="headerlink" title="从mysql获取数据"></a>从mysql获取数据</h3><p>很简单，一步一步走即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def getDataFromDataBases(self):</span><br><span class="line">    # 从testdata表获取测试数据</span><br><span class="line">    # bookname作为testdata，author作为expectdata</span><br><span class="line">    self.cur.execute(&quot;select bookname, author from testdata;&quot;)</span><br><span class="line">    # 取查询结果</span><br><span class="line">    datasTuple = self.cur.fetchall()</span><br><span class="line">    return datasTuple</span><br><span class="line"></span><br><span class="line">def closeDatabase(self):</span><br><span class="line">    # 数据库后续操作</span><br><span class="line">    self.cur.close()</span><br><span class="line">    self.conn.commit()</span><br><span class="line">    self.conn.close()</span><br></pre></td></tr></table></figure></p><p>至此，就可以完成测试数据存在mysql中，从数据库表中完成测试数据的读取以及断言判断等操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python3使用pymysql操作mysql5.7&lt;/p&gt;
    
    </summary>
    
      <category term="python基础" scheme="http://tokyle.com/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python3" scheme="http://tokyle.com/tags/python3/"/>
    
      <category term="mysql" scheme="http://tokyle.com/tags/mysql/"/>
    
      <category term="pymysql" scheme="http://tokyle.com/tags/pymysql/"/>
    
  </entry>
  
  <entry>
    <title>基于python3的UI自动化框架搭建系列（二）</title>
    <link href="http://tokyle.com/2018/02/09/%E5%9F%BA%E4%BA%8Epython3%E7%9A%84UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://tokyle.com/2018/02/09/基于python3的UI自动化测试框架搭建系列（二）/</id>
    <published>2018-02-09T09:26:34.000Z</published>
    <updated>2018-02-09T09:42:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>自动化测试框架雏形搭建完成<br><a id="more"></a></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>框架终于差不多完成了，包含了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">自定义日志</span><br><span class="line">自定义测试报告</span><br><span class="line">实时邮件发送</span><br></pre></td></tr></table></figure></p><p>等模块。<br>目前可以实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">测试过程中控制台实时打印日志</span><br><span class="line">测试过程中实时写日志入自定义log文件</span><br><span class="line">测试过程中发生断言失败，实时截图，并且将堆栈日志打印到指定log文件</span><br><span class="line">测试完成自动生成html格式测试报告</span><br><span class="line">测试完成自动发送邮件</span><br></pre></td></tr></table></figure></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下是实现的简单的从excel中读取数据进行自动化测试的实例（测试用例使用excel编写）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2018/2/9 15:30</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from ExcelUtil import GetDataFromExcel</span><br><span class="line">from selenium.common.exceptions import NoSuchElementException</span><br><span class="line">from Log import *</span><br><span class="line">from MailSend import MailSend</span><br><span class="line">from ReportTemplate import htmlTemplate</span><br><span class="line">from nose.tools import assert_true</span><br><span class="line">from MakeDirs import *</span><br><span class="line">import time,traceback</span><br><span class="line">import sys,ddt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># excel路径，sheet名</span><br><span class="line">path = &quot;G:/workstation/py_workstation/DataDriverTest/DdtData/testData.xlsx&quot;</span><br><span class="line">sheetname = &quot;search_data&quot;</span><br><span class="line">excel = GetDataFromExcel(path, sheetname)</span><br><span class="line">@ddt.ddt</span><br><span class="line">class TestDdtByExcel():</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def setUpClass(cls):</span><br><span class="line">        TestDdtByExcel.trStr = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    def setUp(self):</span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line">        # 设置测试状态及结果标志</span><br><span class="line">        self.status = None</span><br><span class="line">        self.flag = 0</span><br><span class="line"></span><br><span class="line">    @ddt.data(* excel.getData())</span><br><span class="line">    def test_ddtbyexcel(self, data):</span><br><span class="line">        # 声明全局变量</span><br><span class="line">        global start, starttime</span><br><span class="line">        # 定义执行结果的颜色</span><br><span class="line">        flagDict = &#123;0: &apos;red&apos;, 1: &apos;00AC4E&apos;&#125;</span><br><span class="line">        # 获取测试用例名称</span><br><span class="line">        casename = sys._getframe().f_code.co_name</span><br><span class="line">        testdata, expectdata = tuple(data)</span><br><span class="line">        url = &quot;https://www.baidu.com&quot;</span><br><span class="line">        self.browser.get(url)</span><br><span class="line">        self.browser.implicitly_wait(10)</span><br><span class="line">        try:</span><br><span class="line">            # 获取当前时间戳</span><br><span class="line">            start = time.time()</span><br><span class="line">            # 获取当前时间</span><br><span class="line">            starttime = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime())</span><br><span class="line">            # 搜索</span><br><span class="line">            self.browser.find_element_by_id(&apos;kw&apos;).send_keys(testdata)</span><br><span class="line">            self.browser.find_element_by_id(&apos;su&apos;).click()</span><br><span class="line">            # 休眠3s</span><br><span class="line">            time.sleep(3)</span><br><span class="line">            # 断言</span><br><span class="line">            assert_true(expectdata in self.browser.page_source)</span><br><span class="line">        except NoSuchElementException as e:</span><br><span class="line">            error(u&quot;页面元素不存在：&quot; +</span><br><span class="line">                  str(traceback.print_exc(</span><br><span class="line">                      file=open(&quot;G:/workstation/py_workstation/DataDriverTest/Logs/Error/DdtTest.log&quot;, &quot;a&quot;))))</span><br><span class="line">            self.flag = 0</span><br><span class="line">            self.status = &apos;fail&apos;</span><br><span class="line">            takeScreenShot(self.browser)</span><br><span class="line">        except AssertionError as e:</span><br><span class="line">            error(u&quot;搜索“&#123;0&#125;，期望“&#123;1&#125;”，失败”&quot;.format(testdata, expectdata) +</span><br><span class="line">                  str(traceback.print_exc(</span><br><span class="line">                      file=open(&quot;G:/workstation/py_workstation/DataDriverTest/Logs/Error/DdtTest.log&quot;, &quot;a&quot;))))</span><br><span class="line">            self.flag = 0</span><br><span class="line">            self.status = &apos;fail&apos;</span><br><span class="line">            takeScreenShot(self.browser)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            error(u&quot;未知错误：&quot; +</span><br><span class="line">                  str(traceback.print_exc(</span><br><span class="line">                      file=open(&quot;G:/workstation/py_workstation/DataDriverTest/Logs/Error/DdtTest.log&quot;, &quot;a&quot;))))</span><br><span class="line">            self.flag = 0</span><br><span class="line">            self.status = &apos;fail&apos;</span><br><span class="line">            takeScreenShot(self.browser)</span><br><span class="line">        else:</span><br><span class="line">            info(u&quot;搜索“&#123;0&#125;，期望“&#123;1&#125;”，通过”&quot;.format(testdata, expectdata))</span><br><span class="line">            self.status = &apos;pass&apos;</span><br><span class="line">            self.flag = 1</span><br><span class="line">        # 计算消耗时间</span><br><span class="line">        # 10位时间戳，单位为s</span><br><span class="line">        spends = time.time() - start - 3</span><br><span class="line">        # 取两位小数</span><br><span class="line">        spendtime = &quot;%.2f&quot; %spends</span><br><span class="line">        # 报告中添加数据</span><br><span class="line">        TestDdtByExcel.trStr += u&apos;&apos;&apos;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;&#123;0&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;1&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;2&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;3&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;4&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td style=&quot;color: &#123;5&#125;&quot;&gt;&#123;6&#125;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &apos;&apos;&apos;.format(casename, testdata, expectdata, starttime, spendtime, flagDict[self.flag], self.status)</span><br><span class="line"></span><br><span class="line">    def tearDown(self):</span><br><span class="line">        self.browser.quit()</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def tearDownClass(cls):</span><br><span class="line">        # 写自定义报告</span><br><span class="line">        htmlTemplate(TestDdtByExcel.trStr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    os.system(&quot;nosetests  -s -v &#123;0&#125;&quot;.format(__file__))</span><br><span class="line">    info(u&quot;*****测试报告开始发送*****&quot;)</span><br><span class="line">    report_file = &quot;G:/workstation/py_workstation/DataDriverTest/Report/DDTByExcel.html&quot;</span><br><span class="line">    mail_subject = &quot;NoseTest测试报告_&#123;0&#125;&quot;.format(dt.now().strftime(&quot;%Y%m%d&quot;))</span><br><span class="line">    mailsend = MailSend(mail_subject, report_file)</span><br><span class="line">    mailsend.sendMail()</span><br><span class="line">    info(u&quot;~~~测试报告发送完成，请注意查收~~~&quot;)</span><br></pre></td></tr></table></figure></p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>粗略结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">project</span><br><span class="line">|—— coding（主要代码）</span><br><span class="line">|—— DdtConf（一些配置，包括邮箱（.ini），日志(logger.conf)等）</span><br><span class="line">|—— DdtData（测试数据（excel，xml，json）等）</span><br><span class="line">|—— DdtTools（工具类（生成html文件，创建文件夹，截图，邮件发送，从文件读数据））等）</span><br><span class="line">|—— Logs（日志）</span><br><span class="line">    |—— Info</span><br><span class="line">    |—— Error</span><br><span class="line">|—— Pictures（断言失败的截图）</span><br><span class="line">|—— Report（测试报告）</span><br></pre></td></tr></table></figure></p><p>后期再慢慢改进，可以修改的地方还有很多！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自动化测试框架雏形搭建完成&lt;br&gt;
    
    </summary>
    
      <category term="自动化测试框架" scheme="http://tokyle.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="selenium" scheme="http://tokyle.com/tags/selenium/"/>
    
      <category term="自动化测试" scheme="http://tokyle.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="python3" scheme="http://tokyle.com/tags/python3/"/>
    
      <category term="nose" scheme="http://tokyle.com/tags/nose/"/>
    
      <category term="ddt" scheme="http://tokyle.com/tags/ddt/"/>
    
  </entry>
  
  <entry>
    <title>windows安装mysql5.7</title>
    <link href="http://tokyle.com/2018/02/09/windows%E5%AE%89%E8%A3%85mysql5-7/"/>
    <id>http://tokyle.com/2018/02/09/windows安装mysql5-7/</id>
    <published>2018-02-09T07:06:20.000Z</published>
    <updated>2018-02-09T07:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>winwods环境安装配置mysql5.7</p><a id="more"></a><p>版本信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">win 10</span><br><span class="line">mysql 5.7.21</span><br></pre></td></tr></table></figure></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>直接上官网下载：</p><blockquote><p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">mysql下载官网</a></p></blockquote><p>以前官网上的下载是有<code>.msi</code>格式的安装包的，现在好像没怎么找到（也可能是眼睛花了。。），现在下载的是<code>.zip</code>压缩包，也就是直接解压缩就可以了。</p><h3 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>将压缩包下载到本地，解压缩到你自定义的目录下，如我下载的是<code>mysql-5.7.21-winx64.zip</code>文件，解压缩到我本地软件安装盘：<code>E:\Test\</code></p><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>解压完成之后，进行日常操作，配置环境变量，将你解压完成之后的mysql的<strong>bin</strong>目录所在路径添加到系统环境变量<strong>path</strong>中，另外可以新建一个<code>MYSQL_HOME</code>的环境变量，变量值也是你的bin目录所在路径，例如我的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path</span><br><span class="line">E:\Test\mysql-5.7.21-winx64\bin</span><br><span class="line">MYSQL_HOME</span><br><span class="line">E:\Test\mysql-5.7.21-winx64\bin</span><br></pre></td></tr></table></figure></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h5><p>在你的mysql目录下，新建<code>my.ini</code>文件，来完成windows系统服务的注册，内容可参考我的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">#解压目录</span><br><span class="line">basedir=E:\Test\mysql-5.7.21-winx64</span><br><span class="line">#解压目录下data目录</span><br><span class="line">datadir=E:\Test\mysql-5.7.21-winx64\data</span><br><span class="line">port=3306</span><br><span class="line">character_set_server=utf8</span><br><span class="line">#导出mysql数据的目录</span><br><span class="line">secure_file_priv =E:\Test\mysql-5.7.21-winx64\data</span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line">#开启查询缓存</span><br><span class="line">explicit_defaults_for_timestamp=true</span><br><span class="line">#skip-grant-tables</span><br><span class="line"></span><br><span class="line">[WinMySQLAdmin]</span><br><span class="line">E:\Test\mysql-5.7.21-winx64\bin\mysql.exe</span><br></pre></td></tr></table></figure></p><h5 id="DATA文件夹"><a href="#DATA文件夹" class="headerlink" title="DATA文件夹"></a>DATA文件夹</h5><p>在mysql 5.6版本之前，默认就是在<code>E:\Test\mysql-5.7.21-winx64</code>下就有<code>data</code>文件夹，现在没有了，需要自己手动新建<code>E:\Test\mysql-5.7.21-winx64\data</code><br>新建完成之后，右键<strong>管理员</strong>打开<code>cmd</code>，进入mysql的bin目录下（<code>E:\Test\mysql-5.7.21-winx64\bin</code>），执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize</span><br></pre></td></tr></table></figure></p><p>运行完成之后，在data目录下就有生成一些初始化的文件，里面有个<code>你的机器.err</code>格式的文件，用文本编辑器打开之后，可以看见随机生成的root的密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-02-09T01:51:43.117196Z 1 [Note] A temporary password is generated for root@localhost: PaFe#w##v6zD</span><br></pre></td></tr></table></figure></p><h4 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h4><p>管理员模式打开的cmd中，进入\mysql\bin目录下，输入服务安装命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld -install</span><br></pre></td></tr></table></figure></p><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>安装没有报错情况下，可以选择在windows的服务中手动起服务，也可以命令行起：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure></p><p>打印信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;lamb&#125; net start mysql</span><br><span class="line">MySQL 服务正在启动 .</span><br><span class="line">MySQL 服务已经启动成功。</span><br></pre></td></tr></table></figure></p><p>表明mysql服务已经成功启动。</p><h3 id="mysql操作"><a href="#mysql操作" class="headerlink" title="mysql操作"></a>mysql操作</h3><p>mysql服务启动之后，用root用户登录(密码在前步生成的xxx.err文件中)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p密码</span><br></pre></td></tr></table></figure></p><p>进入mysql控制台。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 4</span><br><span class="line">Server version: 5.7.21 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p>表示成功进入控制台。</p><h4 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h4><p>控制台下执行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;新密码&apos;;</span><br></pre></td></tr></table></figure></p><p>回车即可。<br>用新密码重新登录进控制台，随意看看mysql吧（关于数据库的操作就不提了，教程一大堆，用多了就熟悉了）~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use sys;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------------------------------------+</span><br><span class="line">| Tables_in_sys                                 |</span><br><span class="line">+-----------------------------------------------+</span><br><span class="line">| host_summary                                  |</span><br><span class="line">| host_summary_by_file_io                       |</span><br><span class="line">| host_summary_by_file_io_type                  |</span><br><span class="line">| host_summary_by_stages</span><br></pre></td></tr></table></figure><p>慢查询及版本信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;</span><br><span class="line">mysql&gt; show variables like &quot;%slow%&quot;;</span><br><span class="line">+---------------------------+-----------------------------------------------------------+</span><br><span class="line">| Variable_name             | Value                                                     |</span><br><span class="line">+---------------------------+-----------------------------------------------------------+</span><br><span class="line">| log_slow_admin_statements | OFF                                                       |</span><br><span class="line">| log_slow_slave_statements | OFF                                                       |</span><br><span class="line">| slow_launch_time          | 2                                                         |</span><br><span class="line">| slow_query_log            | OFF                                                       |</span><br><span class="line">| slow_query_log_file       | E:\Test\mysql-5.7.21-winx64\data\DESKTOP-PBQIU7V-slow.log |</span><br><span class="line">+---------------------------+-----------------------------------------------------------+</span><br><span class="line">5 rows in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;  show variables like &quot;%version%&quot;;</span><br><span class="line">+-------------------------+------------------------------+</span><br><span class="line">| Variable_name           | Value                        |</span><br><span class="line">+-------------------------+------------------------------+</span><br><span class="line">| innodb_version          | 5.7.21                       |</span><br><span class="line">| protocol_version        | 10                           |</span><br><span class="line">| slave_type_conversions  |                              |</span><br><span class="line">| tls_version             | TLSv1,TLSv1.1                |</span><br><span class="line">| version                 | 5.7.21                       |</span><br><span class="line">| version_comment         | MySQL Community Server (GPL) |</span><br><span class="line">| version_compile_machine | x86_64                       |</span><br><span class="line">| version_compile_os      | Win64                        |</span><br><span class="line">+-------------------------+------------------------------+</span><br><span class="line">8 rows in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;winwods环境安装配置mysql5.7&lt;/p&gt;
    
    </summary>
    
      <category term="skill" scheme="http://tokyle.com/categories/skill/"/>
    
    
      <category term="mysql" scheme="http://tokyle.com/tags/mysql/"/>
    
      <category term="windows" scheme="http://tokyle.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>python3操作excel</title>
    <link href="http://tokyle.com/2018/02/09/python3%E6%93%8D%E4%BD%9Cexcel/"/>
    <id>http://tokyle.com/2018/02/09/python3操作excel/</id>
    <published>2018-02-09T06:30:44.000Z</published>
    <updated>2018-03-08T07:10:28.308Z</updated>
    
    <content type="html"><![CDATA[<p>python3使用openpyxl完成excel数据读和写</p><a id="more"></a><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>python3操作excel数据，对于excel 2007及以上版本，一般使用<code>openpyxl</code>来进行操作；windows下，只需要控制台执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure></p><p>即可，若是使用<code>pipenv</code>进行类库管理的，控制台下进入工程所在目录（<code>Pipfile</code>所在路径），执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install openpyxl</span><br></pre></td></tr></table></figure></p><p>即可。对于<code>pipenv</code>在之前的一篇博客中有提及：</p><blockquote><p><a href="http://tokyle.com/2018/01/18/python%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-pipenv/">python项目依赖管理工具</a></p></blockquote><p>安装完成之后，执行命令<code>python</code>进入python交互环境，引包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import openpyxl</span><br></pre></td></tr></table></figure></p><p>不报错则安装成功</p><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 引包</span><br><span class="line">import openpyxl</span><br><span class="line"></span><br><span class="line"># excel文件路径</span><br><span class="line">file = &quot;G:\workstation\py_workstation\DataDriverTest\DdtData\testData.xlsx&quot;</span><br><span class="line"># 打开excel</span><br><span class="line">wb = openpyxl.load_workbook(file)</span><br><span class="line"># 获取指定sheet页，名称：“search_data”</span><br><span class="line">sheet = wb[&quot;search_data&quot;]</span><br><span class="line"># 获取所有sheet的名称</span><br><span class="line">sheets = wb.sheetnames</span><br><span class="line"></span><br><span class="line"># 获取行数</span><br><span class="line">nrow = sheet.max_row</span><br><span class="line"># 获取列数</span><br><span class="line">ncol = sheet.max_column</span><br><span class="line"># 获取单元格值</span><br><span class="line">cell_1 = sheet.cell(row=2, column=2).value</span><br><span class="line"># 单元格赋值</span><br><span class="line">cell_2 = sheet.cell(row=2, column=2, value=&quot;YIDA&quot;)</span><br><span class="line"></span><br><span class="line"># 保存excel</span><br><span class="line">wb.save(file)</span><br></pre></td></tr></table></figure><h3 id="读写excel"><a href="#读写excel" class="headerlink" title="读写excel"></a>读写excel</h3><p>进行ddt时，有的时候测试数据，甚至测试用例是在excel中，如下表，标示出了测试数据，预期结果。</p><p>number&emsp;&emsp;testdata    &emsp;&emsp;&emsp;expectdata<br>1&emsp;&emsp;&emsp;&emsp;&ensp;Jordan&emsp;&emsp;&emsp;&emsp;&ensp;DRFSA<br>2&emsp;&emsp;&emsp;&emsp;&ensp;Garnett&emsp;&emsp;&emsp;&emsp;&ensp;Kevin<br>3&emsp;&emsp;&emsp;&emsp;&ensp;Oneal&emsp;&emsp;&emsp;&emsp;&emsp;Shaquille<br>4&emsp;&emsp;&emsp;&emsp;&ensp;Nowitzki&emsp;&emsp;&emsp;&emsp;rsdffd<br>5&emsp;&emsp;&emsp;&emsp;&ensp;Duncan&emsp;&emsp;&emsp;&emsp;Tim</p><p>首先是尝试使用python3 把数据写入excel</p><h4 id="写数据"><a href="#写数据" class="headerlink" title="写数据"></a>写数据</h4><p>直接上代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2018/2/9 13:25</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import openpyxl</span><br><span class="line"></span><br><span class="line">file = &quot;G:/workstation/py_workstation/DataDriverTest/DdtData/test.xlsx&quot;</span><br><span class="line">wb = openpyxl.load_workbook(file)</span><br><span class="line">sheet = wb.active</span><br><span class="line">sheet.title = &quot;search_data&quot;</span><br><span class="line"></span><br><span class="line">value = [</span><br><span class="line">    [&quot;number&quot;, &quot;testdata&quot;, &quot;expectdata&quot;],</span><br><span class="line">    [&quot;1&quot;, &quot;Jordan&quot;, &quot;DRFSA&quot;],</span><br><span class="line">    [&quot;2&quot;, &quot;Garnett&quot;, &quot;Kevin&quot;]</span><br><span class="line">]</span><br><span class="line">for i in range(0, 3):</span><br><span class="line">    for j in range(0, len(value[i])):</span><br><span class="line">        sheet.cell(row=i+1, column=j+1, value=str(value[i][j]))</span><br><span class="line">wb.save(file)</span><br></pre></td></tr></table></figure></p><h4 id="读数据"><a href="#读数据" class="headerlink" title="读数据"></a>读数据</h4><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2018/2/9 14:15</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import openpyxl</span><br><span class="line"></span><br><span class="line"># 打开excel</span><br><span class="line">wb = openpyxl.load_workbook(&quot;G:/workstation/py_workstation/DataDriverTest/DdtData/testData.xlsx&quot;)</span><br><span class="line"># 获取指定sheet页</span><br><span class="line">sheet = wb[&quot;search_data&quot;]</span><br><span class="line"></span><br><span class="line"># 获取列表中最大行数和最大列数</span><br><span class="line">nrows = sheet.max_row</span><br><span class="line">ncol = sheet.max_column</span><br><span class="line"></span><br><span class="line">testdata = []</span><br><span class="line"></span><br><span class="line"># 获取2到6行</span><br><span class="line">for i in list(range(2,nrows+1)):</span><br><span class="line">    tmplist = []</span><br><span class="line">    tmplist.append(sheet.cell(row=i, column=2).value) #2,2</span><br><span class="line">    tmplist.append(sheet.cell(row=i, column=3).value) #2,3</span><br><span class="line">    testdata.append(tmplist)</span><br><span class="line">print(testdata)</span><br></pre></td></tr></table></figure></p><p>完成！！！</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>估计是快过年，快放假了，都没什么心思敲了；真的是弄了好久才读出数据。。。python3操作excel是真的跟python2很不一样，网上的教程很多都不能用，最明显的就是:<br>python2可以遍历工作表区域每一行，跳过第一行，直接写成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for row in sheet.rows[1:]:</span><br></pre></td></tr></table></figure></p><p>但是python3实现不了。。<br>不过自己能折腾出来，感觉还是有点小小的成就感的~</p><p>附环境版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python  3.6</span><br><span class="line">openpyxl 2.5.0</span><br><span class="line">win 10</span><br><span class="line">office 2013</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python3使用openpyxl完成excel数据读和写&lt;/p&gt;
    
    </summary>
    
      <category term="python基础" scheme="http://tokyle.com/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python3" scheme="http://tokyle.com/tags/python3/"/>
    
      <category term="openpyxl" scheme="http://tokyle.com/tags/openpyxl/"/>
    
      <category term="ddt" scheme="http://tokyle.com/tags/ddt/"/>
    
  </entry>
  
  <entry>
    <title>自定义测试报告</title>
    <link href="http://tokyle.com/2018/02/08/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
    <id>http://tokyle.com/2018/02/08/自定义测试报告/</id>
    <published>2018-02-08T10:00:04.000Z</published>
    <updated>2018-02-09T00:54:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>解决自动化测试中捕获断言之后，测试报告展示为ok无法查看具体哪条用例执行失败的问题</p><a id="more"></a><p>问题来自之前博客中折腾的单元测试异常捕获问题：<a href="http://tokyle.com/2018/02/08/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/#more">自动化测试断言捕获</a><br>当时折腾出的解决方案是自定义测试报告的模板，定义<code>status</code>状态位，作为测试用例执行结果的状态标志，一旦发生断言异常捕获，将<code>status</code>状态为置为<code>fail</code>，最后体现在测试报告上。</p><h3 id="自定义报告"><a href="#自定义报告" class="headerlink" title="自定义报告"></a>自定义报告</h3><p>自定义报告模块，参考nose生成的报告，又东拼西凑折腾出了这份最简单的测试报告，最终报告生成原理就是：首先html文件中创建表格，预留html的尾部，在后续执行自动化测试过程中，将生成的测试数据拼接到不完整的html文件中，最终生成完成的html文件作为测试报告。</p><p><code>ReportTemplate.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2018/2/8 11:21</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">def htmlTemplate(trData):</span><br><span class="line">    &quot;&quot;&quot;自定义测试报告样式&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    htmlStr = u&apos;&apos;&apos;</span><br><span class="line">        &lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Unit Test Report&lt;/title&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    body&#123;</span><br><span class="line">        width: 80%;                 /* 整个body区域占浏览器百分比 */</span><br><span class="line">        margin: 40px auto;          /* 整个body区域相对浏览器窗口摆放位置（左右，上下）*/、</span><br><span class="line">        font-weight: bold;          /* 整个body区域字体加粗 */</span><br><span class="line">        font-family: Calibri, &quot;Trebuchet MS&quot;, sans-serif;       /* 表格中文字的字体类型 */</span><br><span class="line">        font-size: 18px;            /* 字体大小 */</span><br><span class="line">        color: #000;</span><br><span class="line">    &#125;</span><br><span class="line">    table&#123;</span><br><span class="line">        border-spacing: 0;          /* 表格边框宽度 */</span><br><span class="line">        width: 100%;                /* 整个表格相对父元素的宽度 */</span><br><span class="line">    &#125;</span><br><span class="line">    .tableStyle&#123;</span><br><span class="line">        border-style: outset;       /* 整个表格外边框样式 */</span><br><span class="line">        border-width: 2px;          /* 整个表格外边框宽度 */</span><br><span class="line">        border-color: blue;         /* 整个表格外边框颜色 */</span><br><span class="line">    &#125;</span><br><span class="line">    .tableStyle tr:hover&#123;</span><br><span class="line">        background: rgb(173,216,230);       /* 鼠标滑过一行，动态显示的颜色 */</span><br><span class="line">    &#125;</span><br><span class="line">    .tableStyle td&#123;</span><br><span class="line">        border-left: solid 1px rgb(146,208,80);     /* 表格的竖线颜色 */</span><br><span class="line">        border-top: 1px solid rgb(146,208,80);      /* 表格的横线颜色 */</span><br><span class="line">        padding: 15px;                              /* 表格内边框尺寸 */</span><br><span class="line">        text-align: center;                         /* 表格内容显示位置 */</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">    &#125;</span><br><span class="line">    .tableStyle th&#123;</span><br><span class="line">        border-left: solid 1px rgb(146,208,80);</span><br><span class="line">        border-top: 1px solid rgb(146,208,80);</span><br><span class="line">        padding: 15px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">    &#125;</span><br><span class="line">    .tableStyle th&#123;</span><br><span class="line">        padding: 15px;                              /* 表格标题栏，字体尺寸 */</span><br><span class="line">        background-color: rgb(146,208,80);          /* 表格标题栏背景颜色 */</span><br><span class="line">        /* 标题栏设置渐变色 */</span><br><span class="line">        background-image: -webkit-gradient(linear, left top, left bottom, from(#92D050), to(#A2D668));</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;center&gt;&lt;h1&gt;TestReport&lt;/h1&gt;&lt;/center&gt;&lt;br /&gt;</span><br><span class="line">        &lt;table class=&quot;tableStyle&quot;&gt;</span><br><span class="line">            &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;CaseName&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;TestData&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;ExpectData&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;StartTime&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;SpendTime&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;Result&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;/thead&gt;</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    endStr = u&apos;&apos;&apos;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">    &lt;/html&gt;</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    # 拼接成完整html文件</span><br><span class="line">    htmlf_file = htmlStr + trData + endStr</span><br><span class="line">    with open(r&quot;D:/bug_things/selenium/report/DDTByObj.html&quot;, &quot;w&quot;, encoding=&apos;utf-8&apos;) as f_obj:</span><br><span class="line">        f_obj.write(htmlf_file)</span><br><span class="line">    #f.close()</span><br></pre></td></tr></table></figure><h3 id="ddt数据驱动"><a href="#ddt数据驱动" class="headerlink" title="ddt数据驱动"></a>ddt数据驱动</h3><p>使用ddt进行自动化测试，单元测试框架使用nose，实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2018/2/8 14:07</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from ReportTemplate import htmlTemplate</span><br><span class="line">from selenium.common.exceptions import NoSuchElementException</span><br><span class="line">from DdtTools.Log import *</span><br><span class="line">from DdtTools.MailSend import MailSend</span><br><span class="line">from datetime import datetime as dt</span><br><span class="line">from nose.tools import assert_true</span><br><span class="line">import sys</span><br><span class="line">import ddt</span><br><span class="line">import time</span><br><span class="line">import traceback</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@ddt.ddt</span><br><span class="line">class TestDdtByJson():</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def setUpClass(cls):</span><br><span class="line">        # 只调一次</span><br><span class="line">        TestDdtByJson.trStr = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    def setUp(self):</span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line">        # 存放测试结果状态，失败为fail，成功为pass</span><br><span class="line">        self.status = None</span><br><span class="line">        # 数据驱动测试结果的标志，成功置1，失败置0</span><br><span class="line">        self.flag = 0</span><br><span class="line"></span><br><span class="line">    @ddt.file_data(&quot;G:/workstation/py_workstation/DataDriverTest/DdtData/test_data_list.json&quot;)</span><br><span class="line">    def test_ddtbyjson(self, value):</span><br><span class="line">        global start, starttime</span><br><span class="line">        # 获取当前测试用例名</span><br><span class="line">        casename = sys._getframe().f_code.co_name</span><br><span class="line">        # 确定报告中状态单元格中内容颜色</span><br><span class="line">        flagDict = &#123;0: &apos;red&apos;, 1: &apos;#00AC4E&apos;&#125;</span><br><span class="line"></span><br><span class="line">        url = &quot;https://www.baidu.com&quot;</span><br><span class="line">        self.browser.get(url)</span><br><span class="line">        #self.browser.maximize_window()</span><br><span class="line">        # 将json中测试数据用“||”分隔成测试数据及期望结果</span><br><span class="line">        testdata, expectdata = tuple(value.strip().split(&quot;||&quot;))</span><br><span class="line">        self.browser.implicitly_wait(10)</span><br><span class="line">        try:</span><br><span class="line">            # 获取当前时间时间戳，用于计算耗时</span><br><span class="line">            start = time.time()</span><br><span class="line">            # 获取当前时间</span><br><span class="line">            starttime = time.strftime(&quot;%Y-%m-%d %H:%M%S&quot;, time.localtime())</span><br><span class="line">            # 开始搜索</span><br><span class="line">            self.browser.find_element_by_id(&apos;kw&apos;).send_keys(testdata)</span><br><span class="line">            self.browser.find_element_by_id(&apos;su&apos;).click()</span><br><span class="line">            time.sleep(3)</span><br><span class="line">            # 断言</span><br><span class="line">            assert_true(expectdata in self.browser.page_source)</span><br><span class="line">        except NoSuchElementException as e:</span><br><span class="line">            error(u&quot;页面元素不存在：&quot; +</span><br><span class="line">                  str(traceback.print_exc(file=(open(&quot;D:/bug_things/selenium/logs/errors/DdtTest.log&quot;, &apos;a&apos;)))))</span><br><span class="line">            self.status = &apos;fail&apos;</span><br><span class="line">            self.flag = 0</span><br><span class="line">        except AssertionError as e:</span><br><span class="line">            error(u&apos;搜索“&#123;0&#125;”，期望“&#123;1&#125;”，失败&apos;.format(testdata, expectdata) +</span><br><span class="line">                  str(traceback.print_exc(file=open(&quot;D:/bug_things/selenium/logs/errors/DdtTest.log&quot;, &apos;a&apos;))))</span><br><span class="line">            self.status = &apos;fail&apos;</span><br><span class="line">            self.flag = 0</span><br><span class="line">        except Exception as e:</span><br><span class="line">            error(u&quot;未知错误：&quot; +</span><br><span class="line">                  str(traceback.print_exc(file=open(&quot;D:/bug_things/selenium/logs/errors/DdtTest.log&quot;, &apos;a&apos;))))</span><br><span class="line">            self.status = &apos;fail&apos;</span><br><span class="line">            self.flag = 0</span><br><span class="line">        else:</span><br><span class="line">            info(u&apos;搜索“&#123;0&#125;”，期望“&#123;1&#125;”，通过&apos;.format(testdata, expectdata))</span><br><span class="line">            self.status = &apos;pass&apos;</span><br><span class="line">            self.flag = 1</span><br><span class="line">        # 计算消耗时间</span><br><span class="line">        # 时间戳相减(10位时间戳单位为s)</span><br><span class="line">        spends = time.time() - start - 3</span><br><span class="line">        # 取两位小数</span><br><span class="line">        spendtime = &quot;%.2f&quot; %spends</span><br><span class="line">        # 报告中添加测试数据</span><br><span class="line">        TestDdtByJson.trStr += u&apos;&apos;&apos;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&#123;0&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;1&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;2&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;3&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;4&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td style=&quot;color: &#123;5&#125;&quot;&gt;&#123;6&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &apos;&apos;&apos;.format(casename, testdata, expectdata, starttime, spendtime, flagDict[self.flag], self.status)</span><br><span class="line"></span><br><span class="line">    def tearDown(self):</span><br><span class="line">        self.browser.quit()</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def tearDownClass(cls):</span><br><span class="line">        # 写自定义测试报告</span><br><span class="line">        htmlTemplate(TestDdtByJson.trStr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    os.system(&quot;nosetests  -s -v &#123;0&#125;&quot;.format(__file__))</span><br><span class="line">    info(u&quot;测试报告开始发送&quot;)</span><br><span class="line">    report_file = &quot;D:/bug_things/selenium/report/DDTByObj.html&quot;</span><br><span class="line">    mail_subject = &quot;UnitTest测试报告_&#123;0&#125;&quot;.format(dt.now().strftime(&quot;%Y%m%d&quot;))</span><br><span class="line">    mailsend = MailSend(mail_subject, report_file)</span><br><span class="line">    mailsend.sendMail()</span><br><span class="line">    info(u&quot;测试报告发送完成&quot;)</span><br></pre></td></tr></table></figure></p><p>其中涉及到的邮件发送模块和日志模块可以参照以前的博客：</p><blockquote><p><a href="http://tokyle.com/2018/02/01/%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE%E5%88%86%E7%A6%BB/">邮件模块</a><br><a href="http://tokyle.com/2018/02/02/logging%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/">日志配置</a></p></blockquote><p>其中日志模块增加了对error级别的日志的配置，很简单，和info级别类似，就不多说了。<br>最终实现效果，测试过程中在控制台以及<code>D:/bug_things/selenium/logs/info/AutoDDT.log</code>中实时写入<strong>info</strong>以及<strong>error</strong>的日志，当出现堆栈错误，写入<code>D:/bug_things/selenium/logs/errors/DdtTest.log</code>文件中，两个日志文件的写入方式都是<code>append</code>，测试完成之后邮件发送包含html附件的测试报告到指定邮箱；同时邮件正文中展示包含测试结果的表格，出现<code>fail</code>状态，可直接前往<code>D:/bug_things/selenium/logs/errors/DdtTest.log</code>日志中查看具体出错，以及具体出错行。<br>需要改进的是，<code>D:/bug_things/selenium/logs/errors/DdtTest.log</code>文件没有明显对各个用例的区分，甚至没有空格行来让显示更明确，还是需要自己去搜索。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>现在终于是完成了自动化测试的基本模块，日志和测试报告真的是折腾了…后期自己前端知识丰富之后，还需要优化测试报告。接下来，除了完成从excel和数据库中读取测试数据之外，就真的开始搭建自己的框架了（这几天这牛角尖钻的，解决之后还是挺舒服的~）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解决自动化测试中捕获断言之后，测试报告展示为ok无法查看具体哪条用例执行失败的问题&lt;/p&gt;
    
    </summary>
    
      <category term="自动化测试" scheme="http://tokyle.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="python3" scheme="http://tokyle.com/tags/python3/"/>
    
      <category term="nose" scheme="http://tokyle.com/tags/nose/"/>
    
      <category term="ddt" scheme="http://tokyle.com/tags/ddt/"/>
    
  </entry>
  
  <entry>
    <title>单元测试异常捕获</title>
    <link href="http://tokyle.com/2018/02/08/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/"/>
    <id>http://tokyle.com/2018/02/08/单元测试异常捕获/</id>
    <published>2018-02-08T03:12:49.000Z</published>
    <updated>2018-02-08T03:18:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于自动化测试执行期间断言的异常的选择迷茫</p><a id="more"></a><p>大概是这段时间有点压抑，昨天下午就不知道怎么钻在了单元测试断言失败需不需要捕获异常这个问题上。<br>大家都知道，进行单元测试时，加入断言验证单元测试结果，断言失败会报错，通过会打印<code>ok</code>标识。</p><h3 id="nose进行单元测试"><a href="#nose进行单元测试" class="headerlink" title="nose进行单元测试"></a>nose进行单元测试</h3><p>使用nose进行单元测试示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from nose.tools import assert_equal</span><br><span class="line"></span><br><span class="line">def test_sum():</span><br><span class="line">    a = 1</span><br><span class="line">    b = 2</span><br><span class="line">    res = 5</span><br><span class="line">    assert_equal(res, a+b)</span><br></pre></td></tr></table></figure></p><p>控制台执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nosetests -v -s Testexec.py</span><br></pre></td></tr></table></figure></p><p>打印信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Testexec.test_sum ... FAIL</span><br><span class="line"></span><br><span class="line">======================================================================</span><br><span class="line">FAIL: Testexec.test_sum</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;g:\skills\python36\lib\site-packages\nose\case.py&quot;, line 198, in runTest</span><br><span class="line">    self.test(*self.arg)</span><br><span class="line">  File &quot;G:\workstation\py_workstation\DataDriverTest\Testexec.py&quot;, line 17, in test_sum</span><br><span class="line">    assert_equal(res, a+b)</span><br><span class="line">AssertionError: 5 != 3</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 1 test in 0.007s</span><br><span class="line"></span><br><span class="line">FAILED (failures=1)</span><br></pre></td></tr></table></figure></p><p>可以看出，断言失败了，控制台也打印出了断言失败的信息。但是在进行自动化测试过程中，如果你想加入日志模块，在执行过程中就在控制台或者文件中打印日志，例如：<code>Testexec.test_sum ... 断言失败，3不等于5</code>这样的信息，很明显，直接用上述写法是不会走到打印失败信息这一步，所以就需要将断言失败的异常捕获，类似这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from nose.tools import assert_equal</span><br><span class="line"></span><br><span class="line">def test_sum():</span><br><span class="line">    try:</span><br><span class="line">        a = 1</span><br><span class="line">        b = 2</span><br><span class="line">        res = 5</span><br><span class="line">        assert_equal(res, a+b)</span><br><span class="line">    except AssertionError as e:</span><br><span class="line">        print(&quot;断言失败，&#123;0&#125;不等于&#123;1&#125;&quot;.format(a+b, res))</span><br></pre></td></tr></table></figure></p><p>这种写法执行单元测试，结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;lamb&#125; nosetests -v -s Testexec.py</span><br><span class="line">Testexec.test_sum ... 断言失败，3不等于5</span><br><span class="line">ok</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 1 test in 0.002s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure></p><p>可以看见在断言失败的情况下，打印出了自定义的断言失败信息，这样也就满足进行自动化测试时，实时有日志生成，方便查看，但是这样有个问题，<strong>你一旦把断言失败的异常捕获了，那该条测试执行结果就是OK状态，到最后统计时候就不容易看出是哪条执行失败了，只能查看日志</strong>；而且日志中也没有展示具体在哪一行有报错，所以这样的方式需要改进。</p><h3 id="打印堆栈信息"><a href="#打印堆栈信息" class="headerlink" title="打印堆栈信息"></a>打印堆栈信息</h3><p>在断言失败时，把异常捕获，此时不会展示具体断言错误的信息，所以就需要添加堆栈信息打印：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def test_sum():</span><br><span class="line">    try:</span><br><span class="line">        a = 1</span><br><span class="line">        b = 2</span><br><span class="line">        res = 5</span><br><span class="line">        assert_equal(res, a+b)</span><br><span class="line">    except AssertionError as e:</span><br><span class="line">        logging.error(&quot;断言失败，&#123;0&#125;不等于&#123;1&#125;&quot;.format(a+b, res) +</span><br><span class="line">              str(traceback.print_exc())</span><br></pre></td></tr></table></figure></p><p>这样就可以获取堆栈信息，可以查看具体哪一行有报错，<strong>但是，这样堆栈的日志也只会打印在控制台上，不利于查看</strong>，好<code>traceback.print_exc()</code>可以指定日志输出路径，所以只需要修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def test_sum():</span><br><span class="line">    try:</span><br><span class="line">        a = 1</span><br><span class="line">        b = 2</span><br><span class="line">        res = 5</span><br><span class="line">        assert_equal(res, a+b)</span><br><span class="line">    except AssertionError as e:</span><br><span class="line">        logging.error(&quot;断言失败，&#123;0&#125;不等于&#123;1&#125;&quot;.format(a+b, res) +</span><br><span class="line">              str(traceback.print_exc(file=open(&apos;test.log&apos;, &apos;a&apos;))))</span><br></pre></td></tr></table></figure></p><p>这样就可以完成，错误日志打印到文件中，其中<code>a</code>表示append。</p><h3 id="邮件附件"><a href="#邮件附件" class="headerlink" title="邮件附件"></a>邮件附件</h3><p>在进行自动化测试时，我们经常不仅需要日志文件，更多用到的是测试报告，在自动化用例执行完成之后以邮件形式发送到指定邮箱，只需要查看邮件的附件，就可以知晓用例执行情况；但是使用<code>unittest</code>或者<code>nose</code>时，一旦把断言异常捕获，那该条用例结果就是ok状态，实际上我们知道这条用例其实是执行失败了，这样，使用<code>HTMLTestRunner</code>或者是<code>nosetests --with-html --html-file</code>生成的html文件中，用例执行状态就都是<code>success</code>状态，很显然是不正确的。</p><p>所以我考虑的是，自己写自定义的测试报告样式，定义一个状态标志<code>status</code>，初始状态为<code>success</code>，在用例执行过程中，一旦捕获了断言异常，就将状态更新为<code>fail</code>，在测试报告中，执行结果栏展示的是该状态，这样就可以实现结果查看了。</p><p>自定义测试报告样式。。现在还是只有这个想法，未完待续，待实现了再来更新！（前端知识匮乏啊，越来越觉得自己弱。。。）</p><p>断言捕获，可以生成日志，在屏幕和日志文件中打印显示，但是，这样，所有的单元测试都是通过状态，没有一条fail；</p><p>断言不捕获，直接邮件发送结果，可以在邮件中看出具体哪条用例执行失败，可以点开失败，查看具体失败信息</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于自动化测试执行期间断言的异常的选择迷茫&lt;/p&gt;
    
    </summary>
    
      <category term="自动化测试" scheme="http://tokyle.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="自动化测试" scheme="http://tokyle.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="python3" scheme="http://tokyle.com/tags/python3/"/>
    
      <category term="单元测试" scheme="http://tokyle.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>nose执行顺序</title>
    <link href="http://tokyle.com/2018/02/07/nose%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>http://tokyle.com/2018/02/07/nose执行顺序/</id>
    <published>2018-02-07T05:30:13.000Z</published>
    <updated>2018-03-08T07:09:15.173Z</updated>
    
    <content type="html"><![CDATA[<p>nose单元测试执行顺序</p><a id="more"></a><p>nose和unittest一样，都可以在用例中指定<code>setUp()</code>和<code>tearDown()</code>（用户测试初始化以及测试结束后的操作），在nose中，package、module、class都可以设置setup()和teardown()；</p><h3 id="package中设置"><a href="#package中设置" class="headerlink" title="package中设置"></a>package中设置</h3><p>在package中设置，整个测试的运行期间只会执行一次（新建python package时，会生成一个<strong>init</strong>.py文件，在其中设置setUp()以及tearDown()即可）</p><h3 id="用例中每次都执行setup及teardown"><a href="#用例中每次都执行setup及teardown" class="headerlink" title="用例中每次都执行setup及teardown"></a>用例中每次都执行setup及teardown</h3><p>在模块、类中执行顺序示例：<br>新建Testexec.py文件，内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2018/2/7 10:39</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from nose.plugins.skip import SkipTest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestClass():</span><br><span class="line"></span><br><span class="line">    def setUp(self):</span><br><span class="line">        print(&quot;=============-My Testcase is setup-===========&quot;)</span><br><span class="line"></span><br><span class="line">    def tearDown(self):</span><br><span class="line">        print(&quot;============My Testcase is teardown===========&quot;)</span><br><span class="line"></span><br><span class="line">    def test_fun1(self):</span><br><span class="line">        print(&quot;This is test_fun1*******&quot;)</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def test_fun2(self):</span><br><span class="line">        print(&quot;This is test_fun2=====&quot;)</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def test_fun3(self):</span><br><span class="line">        print(&quot;This is test_fun3~~~~~~~~~&quot;)</span><br><span class="line">        raise SkipTest</span><br><span class="line"></span><br><span class="line">    def test_Fun1(self):</span><br><span class="line">        print(&quot;This is test_Fun1***====***&quot;)</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure></p><p>命令行执行nosetests：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nosetests -v -s Testexec.py</span><br></pre></td></tr></table></figure></p><p>执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;lamb&#125; nosetests -v -s Testexec.py                                               </span><br><span class="line">Testexec.TestClass.test_Fun1 ... =============-My Testcase is setup-===========  </span><br><span class="line">This is test_Fun1***====***                                                      </span><br><span class="line">============My Testcase is teardown===========                                   </span><br><span class="line">ok                                                                               </span><br><span class="line">Testexec.TestClass.test_fun1 ... =============-My Testcase is setup-===========  </span><br><span class="line">This is test_fun1*******                                                         </span><br><span class="line">============My Testcase is teardown===========                                   </span><br><span class="line">ok                                                                               </span><br><span class="line">Testexec.TestClass.test_fun2 ... =============-My Testcase is setup-===========  </span><br><span class="line">This is test_fun2=====                                                           </span><br><span class="line">============My Testcase is teardown===========                                   </span><br><span class="line">ok                                                                               </span><br><span class="line">Testexec.TestClass.test_fun3 ... =============-My Testcase is setup-===========  </span><br><span class="line">This is test_fun3~~~~~~~~~                                                       </span><br><span class="line">============My Testcase is teardown===========                                   </span><br><span class="line">SKIP                                                                             </span><br><span class="line">                                                                                 </span><br><span class="line">----------------------------------------------------------------------           </span><br><span class="line">Ran 4 tests in 0.005s                                                            </span><br><span class="line">                                                                                 </span><br><span class="line">OK (SKIP=1)</span><br></pre></td></tr></table></figure></p><p>可以看见在对每一个函数进行测试时，都执行了一次<code>setUp()</code>以及<code>tearDown()</code>；且用例执行顺序是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test_Fun1 -&gt; test_fun1 -&gt; test_fun2 -&gt; test_fun3</span><br></pre></td></tr></table></figure></p><p>其中<code>test_fun3</code>跳过了测试，执行顺序是按照先大写字母，再小写字母，然后再按阿拉伯数字排列的。</p><h3 id="用例中只执行一次setup及teardown"><a href="#用例中只执行一次setup及teardown" class="headerlink" title="用例中只执行一次setup及teardown"></a>用例中只执行一次setup及teardown</h3><p>只需要在<code>setUpClass()</code>及<code>tearDownClass()</code>前加修饰器<code>@classmethod</code>即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2018/2/7 10:39</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from nose.plugins.skip import SkipTest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestClass():</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def setUpClass(cls):</span><br><span class="line">        print(&quot;只初始化一次setup=======&quot;)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def tearDownClass(cls):</span><br><span class="line">        print(&quot;只teardown一次***********&quot;)</span><br><span class="line"></span><br><span class="line">    def setUp(self):</span><br><span class="line">        print(&quot;=============-My Testcase is setup-===========&quot;)</span><br><span class="line"></span><br><span class="line">    def tearDown(self):</span><br><span class="line">        print(&quot;============My Testcase is teardown===========&quot;)</span><br><span class="line"></span><br><span class="line">    def test_fun1(self):</span><br><span class="line">        print(&quot;This is test_fun1*******&quot;)</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def test_fun2(self):</span><br><span class="line">        print(&quot;This is test_fun2=====&quot;)</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def test_fun3(self):</span><br><span class="line">        print(&quot;This is test_fun3~~~~~~~~~&quot;)</span><br><span class="line">        raise SkipTest</span><br><span class="line"></span><br><span class="line">    def test_Fun1(self):</span><br><span class="line">        print(&quot;This is test_Fun1***====***&quot;)</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure></p><p>执行测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nosetests -v -s Testexec.py</span><br></pre></td></tr></table></figure></p><p>执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;lamb&#125; nosetests -v -s Testexec.py                                                   </span><br><span class="line">只初始化一次setup=======                                                                   </span><br><span class="line">Testexec.TestClass.test_Fun1 ... =============-My Testcase is setup-===========      </span><br><span class="line">This is test_Fun1***====***                                                          </span><br><span class="line">============My Testcase is teardown===========                                       </span><br><span class="line">ok                                                                                   </span><br><span class="line">Testexec.TestClass.test_fun1 ... =============-My Testcase is setup-===========      </span><br><span class="line">This is test_fun1*******                                                             </span><br><span class="line">============My Testcase is teardown===========                                       </span><br><span class="line">ok                                                                                   </span><br><span class="line">Testexec.TestClass.test_fun2 ... =============-My Testcase is setup-===========      </span><br><span class="line">This is test_fun2=====                                                               </span><br><span class="line">============My Testcase is teardown===========                                       </span><br><span class="line">ok                                                                                   </span><br><span class="line">Testexec.TestClass.test_fun3 ... =============-My Testcase is setup-===========      </span><br><span class="line">This is test_fun3~~~~~~~~~                                                           </span><br><span class="line">============My Testcase is teardown===========                                       </span><br><span class="line">SKIP                                                                                 </span><br><span class="line">只teardown一次***********                                                               </span><br><span class="line">                                                                                     </span><br><span class="line">----------------------------------------------------------------------               </span><br><span class="line">Ran 4 tests in 0.006s                                                                </span><br><span class="line">                                                                                     </span><br><span class="line">OK (SKIP=1)</span><br></pre></td></tr></table></figure></p><p>可以看见，<code>setUpClass()</code>以及<code>tearDownClass</code>都只执行了一次。在自动化测试中，可用来加载配置信息，只需要加载一次即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nose单元测试执行顺序&lt;/p&gt;
    
    </summary>
    
      <category term="python基础" scheme="http://tokyle.com/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="nose" scheme="http://tokyle.com/tags/nose/"/>
    
      <category term="单元测试" scheme="http://tokyle.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>基于python3的UI自动化框架搭建系列（一）</title>
    <link href="http://tokyle.com/2018/02/07/%E5%9F%BA%E4%BA%8Epython3%E7%9A%84UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://tokyle.com/2018/02/07/基于python3的UI自动化测试框架搭建系列（一）/</id>
    <published>2018-02-07T01:40:24.000Z</published>
    <updated>2018-02-09T09:37:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于python3搭建appium ui自动化测试框架尝试系列（一）</p><a id="more"></a><h3 id="框架实现目标"><a href="#框架实现目标" class="headerlink" title="框架实现目标"></a>框架实现目标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">自动找设备，连接设备</span><br><span class="line">自动启动appium server</span><br><span class="line">使用yml编写用例</span><br><span class="line">配置信息储存在ini文件或conf文件中</span><br><span class="line">自定义log，断言失败截图</span><br><span class="line">用例框架使用unittest或者nose</span><br><span class="line">用例报告html，用例执行完成邮件发送，附件测试报告</span><br><span class="line">多线程执行用例，失败重跑机制</span><br><span class="line">android自动监控权限弹窗</span><br><span class="line">执行过程红性能捕获（adb或者其他形式）</span><br></pre></td></tr></table></figure><h3 id="基于ddt和nose的简单尝试"><a href="#基于ddt和nose的简单尝试" class="headerlink" title="基于ddt和nose的简单尝试"></a>基于ddt和nose的简单尝试</h3><p>当前我能实现的appium自动化测试还是需要手动去起<code>appium server</code>，这点后面需要改善，github上有很多已经实现了的框架，但是不是很想直接拿来用，还是希望能够自己去一点一点的搭建。</p><p>即使是简单的尝试，还是想尽量实现多模块。</p><h4 id="配置模块"><a href="#配置模块" class="headerlink" title="配置模块"></a>配置模块</h4><p>邮箱配置：包含邮件收发件人，密码，服务器等信息配置；<br>日志配置：包含日志级别，时间格式，流处理器等；<br>文件夹创建：包含获取当前日期，时间，创建文件夹等；</p><p>其实在之前的博客中已经实现，就不再贴代码了：</p><blockquote><p><a href="http://tokyle.com/2018/02/01/%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE%E5%88%86%E7%A6%BB/">邮箱配置</a><br><a href="http://tokyle.com/2018/02/02/logging%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/">日志配置</a></p></blockquote><p>文件夹创建是为了在测试过程中，出现断言失败的场景进行截图保存，文件夹使用两层，上一层为当前日期，下一层为当前时间，截图保存名字为断言失败的名字：<br><code>MakeDirs.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2018/2/7 10:17</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import time,os</span><br><span class="line">import traceback</span><br><span class="line">from datetime import datetime as dt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getCurrentDate():</span><br><span class="line">    &quot;&quot;&quot;获取当前日期&quot;&quot;&quot;</span><br><span class="line">    date  = time.localtime()</span><br><span class="line">    today = str(date.tm_year) + &quot;-&quot; + str(date.tm_mon) + &quot;-&quot; + str(date.tm_mday)</span><br><span class="line">    return today</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getCurrentTime():</span><br><span class="line">    &quot;&quot;&quot;获取当前时间&quot;&quot;&quot;</span><br><span class="line">    time_str = dt.now()</span><br><span class="line">    now = time_str.strftime(&apos;%H-%M-%S&apos;)</span><br><span class="line">    return now</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def createDir():</span><br><span class="line">    &quot;&quot;&quot;获取当前文件所在路径绝对路径&quot;&quot;&quot;</span><br><span class="line">    current_path = os.path.abspath(&apos;.&apos;)</span><br><span class="line">    # 获取当前日期</span><br><span class="line">    today = getCurrentDate()</span><br><span class="line">    # 构造以今天日期命名的目录的绝对路径</span><br><span class="line">    date_dir = os.path.join(current_path, today)</span><br><span class="line">    print(date_dir)</span><br><span class="line"></span><br><span class="line">    if not os.path.exists(date_dir):</span><br><span class="line">        # 如果以今天日期命名的目录不存在则创建</span><br><span class="line">        os.mkdir(date_dir)</span><br><span class="line">        # 获取当前时间字符串</span><br><span class="line">        now = getCurrentTime()</span><br><span class="line">        # 构造以当前时间命名的目录的绝对路径</span><br><span class="line">        time_dir = os.path.join(date_dir, now)</span><br><span class="line">        print(time_dir)</span><br><span class="line">        if not os.path.exists(time_dir):</span><br><span class="line">            # 如果以当前时间命名的目录不存在则创建</span><br><span class="line">            os.mkdir(time_dir)</span><br><span class="line">        return time_dir</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def takeScreenShot(driver, save_path, pic_name):</span><br><span class="line">    &quot;&quot;&quot;截屏&quot;&quot;&quot;</span><br><span class="line">    pic_path = os.path.join(save_path, str(pic_name) + &quot;.png&quot;)</span><br><span class="line">    try:</span><br><span class="line">        driver.get_screenshot_as_file(pic_path)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(traceback.print_exc(), e)</span><br></pre></td></tr></table></figure><h4 id="执行模块"><a href="#执行模块" class="headerlink" title="执行模块"></a>执行模块</h4><p>实现思路是<code>ddt</code>获取数据对象，进行测试数据和代码分离，数据对象包含输入数据以及预期结果，对预期结果进行断言，实现测试实现。<br>以百度搜索测试为例:<br><code>DataDriverByObj.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import ddt,time</span><br><span class="line">import traceback,logging</span><br><span class="line">from DdtTools.Log import *</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from nose.tools import assert_true</span><br><span class="line">from selenium.common.exceptions import NoSuchElementException</span><br><span class="line">from datetime import datetime as dt</span><br><span class="line">from DdtTools.MailSend import MailSend</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@ddt.ddt</span><br><span class="line">class TestDDTByObj():</span><br><span class="line">    &quot;&quot;&quot;数据驱动测试&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        &quot;&quot;&quot;初始化&quot;&quot;&quot;</span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">    @ddt.data(</span><br><span class="line">        [u&quot;龙猫&quot;, &quot;宫崎骏&quot;],</span><br><span class="line">        [u&quot;大话西游之月光宝盒&quot;, &quot;周星驰&quot;],</span><br><span class="line">        [u&quot;卧虎藏龙&quot;, &quot;李安&quot;]</span><br><span class="line">    )</span><br><span class="line">    @ddt.unpack</span><br><span class="line">    def test_dataDrivenByObj(self, testdata, expectdata):</span><br><span class="line">        url = &quot;https://www.baidu.com&quot;</span><br><span class="line">        self.browser.get(url)</span><br><span class="line">        # 隐式等待10s</span><br><span class="line">        self.browser.implicitly_wait(10)</span><br><span class="line">        try:</span><br><span class="line">            # 定位搜索输入框，并输入测试数据</span><br><span class="line">            self.browser.find_element_by_id(&apos;kw&apos;).send_keys(testdata)</span><br><span class="line">            # 定位搜索按键，单击</span><br><span class="line">            self.browser.find_element_by_id(&apos;su&apos;).click()</span><br><span class="line">            time.sleep(3)</span><br><span class="line">            # 断言期望结果是否出现在页面源码中</span><br><span class="line">            assert_true(expectdata in self.browser.page_source)</span><br><span class="line">        except NoSuchElementException as e:</span><br><span class="line">            logging.error(u&quot;查找的页面元素不存在，异常堆栈信息：&quot; + str(traceback.print_exc()))</span><br><span class="line"></span><br><span class="line">        except AssertionError as e:</span><br><span class="line">            info(u&quot;搜索：&#123;0&#125;，期望：&#123;1&#125;，失败&quot;.format(testdata, expectdata))</span><br><span class="line">        except Exception as e:</span><br><span class="line">            logging.error(u&quot;未知错误，错误信息：&quot; + str(traceback.print_exc()))</span><br><span class="line">        else:</span><br><span class="line">            info(u&quot;搜索：&#123;0&#125;，期望：&#123;1&#125;，通过&quot;.format(testdata, expectdata))</span><br><span class="line"></span><br><span class="line">        time.sleep(2)</span><br><span class="line">        self.browser.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # mail_subject, report_file</span><br><span class="line">    mail_subject = &apos;NoseTests_测试报告_&#123;0&#125;&apos;.format(dt.now().strftime(&apos;%Y%m%d&apos;))</span><br><span class="line">    report_file = &apos;D:/bug_things/selenium/report/DDTByObj.html&apos;</span><br><span class="line">    mailsend = MailSend(mail_subject, report_file)</span><br><span class="line"></span><br><span class="line">    print(&apos;开始执行自动化测试...&apos;)</span><br><span class="line">    os.system(&apos;nosetests -v &#123;0&#125; --with-html --html-file=&#123;1&#125;&apos;.format(__file__, report_file))</span><br><span class="line">    # 发送测试报告邮件</span><br><span class="line">    print(&apos;开始发送测试报告...&apos;)</span><br><span class="line">    mailsend.sendMail()</span><br><span class="line">    print(&apos;测试报告发送完成...&apos;)</span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>差不多现在还是实现到现在的程度，后面至少可以优化，测试数据从<code>xls</code>，<code>xml</code>，<code>excel</code>，<code>mysql</code>中读取。<br>（感觉自己现在实现的还是好弱。。。）</p><p>附上github上已经实现的框架，供参考，建议还是自己去一点一点的搭建，直接用个人觉得是有点功利的做法了，写代码，还是慢慢来的好。</p><blockquote><p><a href="https://github.com/NetEaseGame/ATX" target="_blank" rel="noopener">ATX</a><br><a href="https://github.com/ztwo/Auto_Analysis" target="_blank" rel="noopener">Auto_Analysis</a><br><a href="https://github.com/Louis-me/appium" target="_blank" rel="noopener">APPIUM</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于python3搭建appium ui自动化测试框架尝试系列（一）&lt;/p&gt;
    
    </summary>
    
      <category term="自动化测试框架" scheme="http://tokyle.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="自动化测试" scheme="http://tokyle.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="appium" scheme="http://tokyle.com/tags/appium/"/>
    
      <category term="python3" scheme="http://tokyle.com/tags/python3/"/>
    
      <category term="nose" scheme="http://tokyle.com/tags/nose/"/>
    
      <category term="ddt" scheme="http://tokyle.com/tags/ddt/"/>
    
  </entry>
  
  <entry>
    <title>【转】python实现chrome伪装成M站</title>
    <link href="http://tokyle.com/2018/02/06/%E3%80%90%E8%BD%AC%E3%80%91python%E5%AE%9E%E7%8E%B0chrome%E4%BC%AA%E8%A3%85%E6%88%90M%E7%AB%99/"/>
    <id>http://tokyle.com/2018/02/06/【转】python实现chrome伪装成M站/</id>
    <published>2018-02-06T03:29:28.000Z</published>
    <updated>2018-02-06T03:32:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>selenium实现Chrome伪装成M站，模拟手机端浏览器，并完成页面操作</p><a id="more"></a><p>原理：<br>通过<code>--user-agent=&quot;xxx&quot;</code>来修改HTTP请求头部的Agent字符串，设置个人代理，使得PC端的Chrome浏览器伪装成手机浏览器，可以在地址栏输入”about:version”查看修改效果。</p><p>代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from Log import *</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestMobile():</span><br><span class="line">    &quot;&quot;&quot;测试chrome伪装成手机M站&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def test_iPadChrome(self):</span><br><span class="line">        # 添加chrome设置</span><br><span class="line">        info(u&quot;===========伪装成ipad==========&quot;)</span><br><span class="line">        info(u&quot;=====开始设置ipad个人代理=====&quot;)</span><br><span class="line">        options = webdriver.ChromeOptions()</span><br><span class="line">        options.add_argument(</span><br><span class="line">            &apos;--user-agent=Mozilla/5.0(iPad; CPU OS 5_0 like Mac OS X)&apos;</span><br><span class="line">            &apos;AppleWebKit/534.46(KHTML, like Gecko) Version/5.1&apos;</span><br><span class="line">            &apos;Mobile/9A334 Safari/7534.48.3&apos;</span><br><span class="line">        )</span><br><span class="line">        browser = webdriver.Chrome(chrome_options=options)</span><br><span class="line">        browser.get(&quot;https://www.baidu.com&quot;)</span><br><span class="line">        time.sleep(3)</span><br><span class="line">        browser.find_element_by_id(&apos;kw&apos;).send_keys(&quot;iPad&quot;)</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        # 通过在Chrome浏览器地址栏输入about:version，查看伪装效果</span><br><span class="line">        browser.get(&quot;about:version&quot;)</span><br><span class="line">        # 人工确认“用户代理”项配置信息是否和设置一致</span><br><span class="line">        time.sleep(10)</span><br><span class="line">        info(u&quot;==========伪装ipad成功==========&quot;)</span><br><span class="line">        browser.quit()</span><br><span class="line"></span><br><span class="line">    def test_iPhoneChrome(self):</span><br><span class="line">        # 添加chrome配置</span><br><span class="line">        info(u&quot;==========测伪装成iphone==========&quot;)</span><br><span class="line">        info(u&quot;=====设置iphone个人代理=====&quot;)</span><br><span class="line">        options = webdriver.ChromeOptions()</span><br><span class="line">        options.add_argument(</span><br><span class="line">            &apos;--user-agent=Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X)&apos;</span><br><span class="line">            &apos;AppleWebKit/534.46(KHTML, like Gecko) Version/5.1&apos;</span><br><span class="line">            &apos;Mobile/9A334 Safari/7534.48.3&apos;</span><br><span class="line">        )</span><br><span class="line">        browser = webdriver.Chrome(chrome_options=options)</span><br><span class="line">        browser.get(&quot;https://www.baidu.com&quot;)</span><br><span class="line">        time.sleep(3)</span><br><span class="line">        # 定位搜索框</span><br><span class="line">        browser.find_element_by_id(&quot;index-kw&quot;).send_keys(&quot;iPhone&quot;)</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        browser.get(&quot;about:version&quot;)</span><br><span class="line">        time.sleep(10)</span><br><span class="line">        info(u&quot;==========伪装成iphone成功==========&quot;)</span><br><span class="line">        browser.quit()</span><br><span class="line"></span><br><span class="line">    def testAndroid236Chrome(self):</span><br><span class="line">        info(u&quot;==========测试伪装成android2.3.6==========&quot;)</span><br><span class="line">        info(u&quot;=====设置android2.3.6个人代理=====&quot;)</span><br><span class="line">        options = webdriver.ChromeOptions()</span><br><span class="line">        options.add_argument(</span><br><span class="line">            &apos;--user-agent=Mozilla/5.0 (Linux; U; Android 2.3.5; en-us)&apos;</span><br><span class="line">            &apos;Nexus S Build/GRK39F) AppleWebKit/533.1&apos;</span><br><span class="line">            &apos;(KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&apos;</span><br><span class="line">        )</span><br><span class="line">        brower = webdriver.Chrome(chrome_options=options)</span><br><span class="line">        brower.get(&quot;https://www.baidu.com&quot;)</span><br><span class="line">        # 定位搜索输入框</span><br><span class="line">        brower.find_element_by_id(&quot;index-kw&quot;).send_keys(&quot;Android 2.3.6&quot;)</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        brower.get(&quot;about:version&quot;)</span><br><span class="line">        time.sleep(10)</span><br><span class="line">        info(u&quot;==========伪装成android2.3.6成功==========&quot;)</span><br><span class="line">        brower.quit()</span><br><span class="line"></span><br><span class="line">    def testAndroid402Chrome(self):</span><br><span class="line">        info(u&quot;==========测试伪装成android4.0.2==========&quot;)</span><br><span class="line">        info(u&quot;=====设置android4.0.2个人代理&quot;)</span><br><span class="line">        options = webdriver.ChromeOptions()</span><br><span class="line">        options.add_argument(</span><br><span class="line">            &apos;--user-agent=Mozilla/5.0 (Linux; U; Android 4.0.2;&apos;</span><br><span class="line">            &apos;en-us; Galaxy Nexus Build/ICL53F) AppleWebKit/534.30&apos;</span><br><span class="line">            &apos;(KHTML, like Gecko) Version/4.0 Mobile Safari/534.30&apos;</span><br><span class="line">        )</span><br><span class="line">        browser = webdriver.Chrome(chrome_options=options)</span><br><span class="line">        browser.get(&quot;http://www.baidu.com&quot;)</span><br><span class="line">        time.sleep(3)</span><br><span class="line">        browser.find_element_by_id(&quot;index-kw&quot;).send_keys(&quot;Android 4.0.2&quot;)</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        browser.get(&quot;about:version&quot;)</span><br><span class="line">        time.sleep(10)</span><br><span class="line">        info(u&quot;==========伪装成android4.0.2成功==========&quot;)</span><br><span class="line">        browser.quit()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    testmobile = TestMobile()</span><br><span class="line">    testmobile.testAndroid402Chrome()</span><br><span class="line">    testmobile.testAndroid236Chrome()</span><br><span class="line">    testmobile.test_iPhoneChrome()</span><br><span class="line">    testmobile.test_iPadChrome()</span><br></pre></td></tr></table></figure></p><p>偶然看见这个实现，目前没想到应用场景。。直接使用appium进行移动自动化好像也能实现啊。。（可能工作中遇见的太少了）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;selenium实现Chrome伪装成M站，模拟手机端浏览器，并完成页面操作&lt;/p&gt;
    
    </summary>
    
      <category term="selenium" scheme="http://tokyle.com/categories/selenium/"/>
    
    
      <category term="自动化测试" scheme="http://tokyle.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="python3" scheme="http://tokyle.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>logging模块使用简介</title>
    <link href="http://tokyle.com/2018/02/02/logging%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/"/>
    <id>http://tokyle.com/2018/02/02/logging模块使用简介/</id>
    <published>2018-02-02T09:17:58.000Z</published>
    <updated>2018-02-05T03:47:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>python3日志模块，logging使用简介</p><a id="more"></a><h3 id="日志打印"><a href="#日志打印" class="headerlink" title="日志打印"></a>日志打印</h3><p>python3使用<code>logging</code>进行日志打印，很简单，直接引<code>logging</code>包即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.warning(&quot;This is warning message&quot;)</span><br><span class="line">logging.critical(&quot;This is critical message&quot;)</span><br><span class="line">logging.error(&quot;This is error message&quot;)</span><br><span class="line"># 打印结果</span><br><span class="line">WARNING:root:This is warning message</span><br><span class="line">CRITICAL:root:This is critical message</span><br><span class="line">ERROR:root:This is error message</span><br></pre></td></tr></table></figure></p><p>默认情况下只显示了大于等于WARNING级别的日志。<br><strong>日志级别</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">critical(50) &gt; error(40) &gt; warning(30) &gt; info(20) &gt; debug(10)</span><br></pre></td></tr></table></figure></p><h3 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h3><p>通过<code>logging.basicConfig</code>函数对日志的输出格式及方式做相关配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    filename=&apos;test.log&apos;,</span><br><span class="line">    format=&apos;%(asctime)s - %(name)s - %(levelname)s - %(module)s: %(message)s&apos;,</span><br><span class="line">    datefmt=&apos;%Y-%m-%d %H-%M-%S&apos;,</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    #level=10</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">logging.critical(&quot;This ia critical message&quot;)</span><br><span class="line">logging.error(&quot;This is error message&quot;)</span><br><span class="line">logging.warning(&quot;This is warning message&quot;)</span><br><span class="line">logging.info(&quot;This is info message&quot;)</span><br><span class="line">logging.debug(&quot;This is debug message&quot;)</span><br></pre></td></tr></table></figure></p><p><strong>logging.basicConfig</strong>函数各参数</p><p>1.filename：指定日志文件名<br>2.filemode：和file函数意义相同，指定日志文件的打开模式，’w’或’a’；默认为’a’表示“append”。<br>3.format：指定输出的格式和内容，format可以输出很多有用信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">format参数中可能用到的格式化串：</span><br><span class="line">%(name)s Logger的名字</span><br><span class="line">%(levelno)s 数字形式的日志级别</span><br><span class="line">%(levelname)s 文本形式的日志级别</span><br><span class="line">%(pathname)s 调用日志输出函数的模块的完整路径名，可能没有</span><br><span class="line">%(filename)s 调用日志输出函数的模块的文件名</span><br><span class="line">%(module)s 调用日志输出函数的模块名</span><br><span class="line">%(funcName)s 调用日志输出函数的函数名</span><br><span class="line">%(lineno)d 调用日志输出函数的语句所在的代码行</span><br><span class="line">%(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示</span><br><span class="line">%(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数</span><br><span class="line">%(asctime)s 字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒</span><br><span class="line">%(thread)d 线程ID。可能没有</span><br><span class="line">%(threadName)s 线程名。可能没有</span><br><span class="line">%(process)d 进程ID。可能没有</span><br><span class="line">%(message)s用户输出的消息</span><br></pre></td></tr></table></figure><p>4.datefmt：指定时间格式，同time.strftime()<br>5.level：设置日志级别，默认为logging.WARNING<br>6.stream：指定将日志的输出流，可以指定输出到<code>sys.stderr</code>，<code>sys.stdout</code>或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略</p><h3 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h3><p>若要对logging进行更多灵活的控制，必须了解Logger，Handler，Formatter，Filter的概念：<br>logger提供了应用程序可以直接使用的接口；<br>handle将（logger创建的）日志记录发送到合适的目的输出；<br>filter提供了细度设备来决定输出哪条日志记录；<br>formatter决定日志记录的最终输出格式；</p><h4 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h4><p>每个程序在输出信息之前都要获得一个Logger。Logger通常对应了程序的模块名，比如聊天工具的图形界面模块可以这样获得它的Logger：<br>LOG=logging.getLogger(”chat.gui”)<br>而核心模块可以这样：<br>LOG=logging.getLogger(”chat.kernel”)</p><p>Logger.setLevel(lel):指定最低的日志级别，低于lel的级别将被忽略。debug是最低的内置级别，critical为最高<br>Logger.addFilter(filt)、Logger.removeFilter(filt):添加或删除指定的filter<br>Logger.addHandler(hdlr)、Logger.removeHandler(hdlr)：增加或删除指定的handler<br>Logger.debug()、Logger.info()、Logger.warning()、Logger.error()、Logger.critical()：可以设置的日志级别</p><h4 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h4><p>handler对象负责发送相关的信息到指定目的地。Python的日志系统有多种Handler可以使用。有些Handler可以把信息输出到控制台，有些Logger可以把信息输出到文件，还有些Handler可以把信息发送到网络上。如果觉得不够用，还可以编写自己的Handler。可以通过addHandler()方法添加多个多handler<br>Handler.setLevel(lel):指定被处理的信息级别，低于lel级别的信息将被忽略<br>Handler.setFormatter()：给这个handler选择一个格式<br>Handler.addFilter(filt)、Handler.removeFilter(filt)：新增或删除一个filter对象</p><p>每个Logger可以附加多个Handler。接下来我们就来介绍一些常用的Handler：</p><h5 id="1-logging-StreamHandler"><a href="#1-logging-StreamHandler" class="headerlink" title="1) logging.StreamHandler"></a>1) logging.StreamHandler</h5><p>使用这个Handler可以向类似与sys.stdout或者sys.stderr的任何文件对象(file object)输出信息。它的构造函数是:StreamHandler([strm])<br>其中strm参数是一个文件对象。默认是sys.stderr</p><h5 id="2-logging-FileHandler"><a href="#2-logging-FileHandler" class="headerlink" title="2) logging.FileHandler"></a>2) logging.FileHandler</h5><p>和StreamHandler类似，用于向一个文件输出日志信息。不过FileHandler会帮你打开这个文件。它的构造函数是：FileHandler(filename[,mode])<br>filename是文件名，必须指定一个文件名。<br>mode是文件的打开方式。参见Python内置函数open()的用法。默认是’a’，即添加到文件末尾。</p><h5 id="3-logging-handlers-RotatingFileHandler"><a href="#3-logging-handlers-RotatingFileHandler" class="headerlink" title="3) logging.handlers.RotatingFileHandler"></a>3) logging.handlers.RotatingFileHandler</h5><p>这个Handler类似于上面的FileHandler，但是它可以管理文件大小。当文件达到一定大小之后，它会自动将当前日志文件改名，然后创建 一个新的同名日志文件继续输出。比如日志文件是chat.log。当chat.log达到指定的大小之后，RotatingFileHandler自动把文件改名为chat.log.1。不过，如果chat.log.1已经存在，会先把chat.log.1重命名为chat.log.2。。。最后重新创建 chat.log，继续输出日志信息。它的构造函数是：<br>RotatingFileHandler( filename[, mode[, maxBytes[, backupCount]]])<br>其中filename和mode两个参数和FileHandler一样。<br>maxBytes用于指定日志文件的最大文件大小。如果maxBytes为0，意味着日志文件可以无限大，这时上面描述的重命名过程就不会发生。<br>backupCount用于指定保留的备份文件的个数。比如，如果指定为2，当上面描述的重命名过程发生时，原有的chat.log.2并不会被更名，而是被删除。</p><h5 id="4-logging-handlers-TimedRotatingFileHandler"><a href="#4-logging-handlers-TimedRotatingFileHandler" class="headerlink" title="4) logging.handlers.TimedRotatingFileHandler"></a>4) logging.handlers.TimedRotatingFileHandler</h5><p>这个Handler和RotatingFileHandler类似，不过，它没有通过判断文件大小来决定何时重新创建日志文件，而是间隔一定时间就 自动创建新的日志文件。重命名的过程与RotatingFileHandler类似，不过新的文件不是附加数字，而是当前时间。它的构造函数是：<br>TimedRotatingFileHandler( filename [,when [,interval [,backupCount]]])<br>其中filename参数和backupCount参数和RotatingFileHandler具有相同的意义。<br>interval是时间间隔。<br>when参数是一个字符串。表示时间间隔的单位，不区分大小写。它有以下取值：<br>S 秒<br>M 分<br>H 小时<br>D 天<br>W 每星期（interval==0时代表星期一）<br>midnight 每天凌晨</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>日志的一般操作顺序为：<br>1.创建一个流类型handler用于输出日志到控制台(控制器)<br>2.定义输出日志级别<br>3.定义handler的输出格式formatter<br>4.将handler添加到logging对象</p><h4 id="同时输出日志到控制台和文件"><a href="#同时输出日志到控制台和文件" class="headerlink" title="同时输出日志到控制台和文件"></a>同时输出日志到控制台和文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    filename=&apos;test.log&apos;,</span><br><span class="line">    format=&apos;%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s&apos;,</span><br><span class="line">    datefmt=&apos;%Y-%m-%d %H-%M-%S&apos;,</span><br><span class="line">    level=10</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 定义一个StreamHandler(日志流处理器)，将INFO级别或更高的日志信息打印到标准错误，并将其添加到当前的日志处理对象</span><br><span class="line">console = logging.StreamHandler()</span><br><span class="line">console.setLevel(logging.INFO)</span><br><span class="line"># 格式化，设置控制台的日志输出格式</span><br><span class="line">formatter = logging.Formatter(&apos;%(name)-12s: %(levelname)-8s %(message)s&apos;)</span><br><span class="line"># 定义控制器的日志输出格式</span><br><span class="line">console.setFormatter(formatter)</span><br><span class="line"># 将控制器添加到logging对象</span><br><span class="line">logging.getLogger(&apos;&apos;).addHandler(console)</span><br><span class="line"></span><br><span class="line">logging.critical(&quot;This is critical message&quot;)</span><br><span class="line">logging.error(&quot;This is error message&quot;)</span><br><span class="line">logging.warning(&quot;This is warning message&quot;)</span><br><span class="line">logging.info(&quot;This is info message&quot;)</span><br><span class="line">logging.debug(&quot;This is debug message&quot;)</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>用法类似于java中的log4j的logging.config，我们也可以自己配置<code>logger.conf</code>文件：</p><h4 id="Logger-conf"><a href="#Logger-conf" class="headerlink" title="Logger.conf"></a>Logger.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">###############################################</span><br><span class="line">[loggers]</span><br><span class="line">keys=root,example01,example02</span><br><span class="line"></span><br><span class="line">[logger_root]</span><br><span class="line">level=DEBUG</span><br><span class="line"></span><br><span class="line">handlers=hand01,hand02</span><br><span class="line"></span><br><span class="line">[logger_example01]</span><br><span class="line">handlers=hand01,hand02</span><br><span class="line">qualname=example01</span><br><span class="line">propagate=0</span><br><span class="line"></span><br><span class="line">[logger_example02]</span><br><span class="line">handlers=hand01,hand03</span><br><span class="line">qualname=example02</span><br><span class="line">propagate=0</span><br><span class="line">###############################################</span><br><span class="line">[handlers]</span><br><span class="line">keys=hand01,hand02,hand03</span><br><span class="line"></span><br><span class="line">[handler_hand01]</span><br><span class="line">class=StreamHandler</span><br><span class="line">level=INFO</span><br><span class="line">formatter=form02</span><br><span class="line">args=(sys.stderr,)</span><br><span class="line"></span><br><span class="line">[handler_hand02]</span><br><span class="line">class=FileHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=form01</span><br><span class="line">args=(&apos;D:/bug_things/selenium/logs/AutoTest.log&apos;, &apos;a&apos;, &apos;utf-8&apos;)</span><br><span class="line"></span><br><span class="line">[handler_hand03]</span><br><span class="line">class=handlers.RotatingFileHandler</span><br><span class="line">level=INFO</span><br><span class="line">formatter=form02</span><br><span class="line">args=(&apos;D:/bug_things/selenium/logs/AutoTest.log&apos;, &apos;a&apos;, 10*1024*1024, 5, &apos;utf-8&apos;)</span><br><span class="line">###############################################</span><br><span class="line">[formatters]</span><br><span class="line">keys=form01,form02</span><br><span class="line"></span><br><span class="line">[formatter_form01]</span><br><span class="line">format=%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s</span><br><span class="line">datefmt=%a, %d %b %Y %H:%M:%S</span><br><span class="line"></span><br><span class="line">[formatter_form02]</span><br><span class="line">format=%(name)-12s: %(levelname)-8s %(message)s</span><br><span class="line">datefmt=%Y %m %d %H %M %S</span><br></pre></td></tr></table></figure><h4 id="封装方法"><a href="#封装方法" class="headerlink" title="封装方法"></a>封装方法</h4><p>将配置文件中定义的日志打印的配置进行封装，生成<code>debug</code>，<code>info</code>，<code>message</code>方法：<br>Log.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import logging.config</span><br><span class="line"></span><br><span class="line">logging.config.fileConfig(&quot;Logger.conf&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def debug(message):</span><br><span class="line">    # 打印debug级别的日志方法</span><br><span class="line">    logging.debug(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def warning(message):</span><br><span class="line">    # 打印warning级别的日志方法</span><br><span class="line">    logging.warning(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def info(message):</span><br><span class="line">    # 打印info级别的日志方法</span><br><span class="line">    logging.info(message)</span><br></pre></td></tr></table></figure></p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>以百度搜索为例:<br>BaiDu.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from Log import *</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestBaiDuSearch():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 启动浏览器</span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">    def test_baidu_search(self):</span><br><span class="line">        info(u&quot;===================搜索====================&quot;)</span><br><span class="line">        url = &quot;https://www.baidu.com&quot;</span><br><span class="line">        self.browser.get(url)</span><br><span class="line">        info(u&quot;访问百度首页&quot;)</span><br><span class="line">        self.browser.find_element_by_id(&apos;kw&apos;).send_keys(u&quot;自动化测试&quot;)</span><br><span class="line">        info(u&quot;在输入框中搜索关键字“自动化测试”&quot;)</span><br><span class="line">        self.browser.find_element_by_id(&apos;su&apos;).click()</span><br><span class="line">        info(u&quot;单击搜索按键&quot;)</span><br><span class="line">        info(u&quot;=================测试执行结束================&quot;)</span><br><span class="line"></span><br><span class="line">        time.sleep(3)</span><br><span class="line">        self.browser.quit()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    testbaidu = TestBaiDuSearch()</span><br><span class="line">    testbaidu.test_baidu_search()</span><br></pre></td></tr></table></figure></p><p>执行BaiDu.py文件，在<code>D:/bug_things/selenium/logs</code>目录下会生成<code>AutoTest.log</code>日志文件，文件内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Fri, 02 Feb 2018 17:10:52 Log.py[line:20] INFO ===================搜索====================</span><br><span class="line">Fri, 02 Feb 2018 17:10:53 Log.py[line:20] INFO 访问百度首页</span><br><span class="line">Fri, 02 Feb 2018 17:10:53 Log.py[line:20] INFO 在输入框中搜索关键字“自动化测试”</span><br><span class="line">Fri, 02 Feb 2018 17:10:53 Log.py[line:20] INFO 单击搜索按键</span><br><span class="line">Fri, 02 Feb 2018 17:10:53 Log.py[line:20] INFO =================测试执行结束================</span><br></pre></td></tr></table></figure></p><p>同时控制台打印信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root        : INFO     ===================搜索====================</span><br><span class="line">root        : INFO     访问百度首页</span><br><span class="line">root        : INFO     在输入框中搜索关键字“自动化测试”</span><br><span class="line">root        : INFO     单击搜索按键</span><br><span class="line">root        : INFO     =================测试执行结束================</span><br></pre></td></tr></table></figure></p><blockquote><p><a href="http://blog.csdn.net/a953713428/article/details/78648298" target="_blank" rel="noopener">参考文章</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python3日志模块，logging使用简介&lt;/p&gt;
    
    </summary>
    
      <category term="python黑科技" scheme="http://tokyle.com/categories/python%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="selenium" scheme="http://tokyle.com/tags/selenium/"/>
    
      <category term="python3" scheme="http://tokyle.com/tags/python3/"/>
    
      <category term="logging" scheme="http://tokyle.com/tags/logging/"/>
    
  </entry>
  
  <entry>
    <title>字符编码简单总结</title>
    <link href="http://tokyle.com/2018/02/02/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/"/>
    <id>http://tokyle.com/2018/02/02/字符编码简单总结/</id>
    <published>2018-02-02T05:14:36.000Z</published>
    <updated>2018-03-08T07:08:31.870Z</updated>
    
    <content type="html"><![CDATA[<p>python字符串和编码</p><a id="more"></a><p>首先，字符串是一种数据类型，我们还经常会用到，然后，最常见的字符串问题就是字符编码问题，经常会看见文件打开一堆乱码，然后手工转<code>utf-8</code>啥的。</p><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><h4 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h4><p>计算机能够处理的只有数字，所以其他类型的数据想要被计算机识别并处理，首先要进行的就是字符编码，转换成数字之后处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是(11111111,二进制的255)，如果要表示更大的整数，就必须更多的字节，比如两个字节可以表示最大整数是65535。</p><p>上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为 ASCII 码，一直沿用至今。<br>ASCII 码一共规定了128个字符的编码，比如空格SPACE是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的一位统一规定为0。</p><h4 id="字库表"><a href="#字库表" class="headerlink" title="字库表"></a>字库表</h4><p>字库表是一个相当于所有可读或者可显示字符的数据库，字库表决定了整个字符集能够展现表示的所有字符的范围。</p><h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><p>字符集是一个系统支持的所有抽象字符的集合。常见的字符集有<code>ASCII</code>，<code>UTF-8</code>，<code>UTG-16</code>，<code>GB2313</code>等。</p><h4 id="字符编码-1"><a href="#字符编码-1" class="headerlink" title="字符编码"></a>字符编码</h4><p>字符编码可以看成是一套规则，目的就是在符号集合和数字系统直接建立对应关系。常见的字符编码有<code>Unicode</code>，<code>ASCII</code>，<code>UTF-8</code>等</p><h4 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h4><p>字库表可以看成是一个全球统一的可读可用的字符库，但是实际使用过程中，很少需要用到这么多字符，例如，中文系统基本就用不到日文的字符，所以也就不需要日文字符的那一部分集合；因此就会诞生一个个的类似于定制的字符集合，这就是字符集，集合中包含了数据和字母的一个个对应关系，这就是字符编码。以ASCII为例：</p><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本EASCII则可以勉强显示其他西欧语言。它是现今最通用的单字节编码系统（但是有被Unicode追上的迹象），并等同于国际标准ISO/IEC 646。</p><p>ASCII字符集：主要包括控制字符（回车键、退格、换行键等）；可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</p><p>ASCII编码：将ASCII字符集转换为计算机可以接受的数字系统的数的规则。使用7位（bits）表示一个字符，共128字符；但是7位编码的字符集只能支持128个字符，为了表示更多的欧洲常用字符对ASCII进行了扩展，ASCII扩展字符集使用8位（bits）表示一个字符，共256字符。</p><h3 id="python字符编码"><a href="#python字符编码" class="headerlink" title="python字符编码"></a>python字符编码</h3><p>ASCII是出现比较早的字符编码，但是其中只包含了数字和英文大小写字符，对于中文，日文等字符就不适用了，国内学者为了能够完成中文编码，就指定了<code>GB2312</code>编码，同样的，很多国家都有指定自己的编码，这样就会遇到一个问题，中文编码到日文编码的环境查看，会发生乱码，因为根本就不支持这样的字符，为了解决这个问题，一个统一的编码就诞生了<code>Unicode</code>，Unicode编码不同于ASCII的使用一个字节表示一个字符，它使用的是两个字节表示一个字符（中文至少需要两个字节），生僻字符就需要4个字符。<br>字母’A’用ASCII编码，十进制是<code>65</code>，二进制是<code>01000001</code>；用Unicode编码结果是<code>00000000 01000001</code>。<br>当全部都使用Unicode编码时，乱码问题肯定是得到解决了，但是有个问题，Unicode编码时连个字节表示的一个字符，那么就会比原来使用ASCII编码多出了至少一倍的内存空间占用，怎么都觉得很亏。<br>所以，为了节约内存空间，又出现了把Unicode编码转换为“可变长编码”的<code>utf-8</code>编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间。</p><p>下面来弄清楚python的字符编码：<br>在python3中，字符串是以Unicode编码的，也就是说，支持多语言。由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。<br><strong>Python对bytes类型的数据用带b前缀的单引号或双引号表示</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = b&apos;ABC&apos;</span><br></pre></td></tr></table></figure></p><p>注意区分’ABC’和b’ABC’，前者是str，后者虽然内容显示得和前者一样，但bytes的每个字符都只占用一个字节。<br>纯英文的str可以用ASCII编码为bytes，内容是一样的，含有中文的str可以用UTF-8编码为bytes。含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错。</p><h3 id="编码及解码"><a href="#编码及解码" class="headerlink" title="编码及解码"></a>编码及解码</h3><p>首先python使用的是Unicode编码，字符串进行网络或者磁盘存储时，需要先编码成指定类型<code>bytes</code>，使用<code>encode()</code>方法即可。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;中文&apos;.encode(&apos;utf-8&apos;))</span><br><span class="line">b&apos;\xe4\xb8\xad\xe6\x96\x87&apos;</span><br></pre></td></tr></table></figure></p><p>反过来，从网络或者磁盘上读取字节流，那么读到的数据是<code>bytes</code>，要把<code>bytes</code>转换为<code>str</code>，就需要使用<code>decode()</code>方法进行解码，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(b&apos;\xe4\xb8\xad\xe6\x96\x87&apos;.decode(&apos;utf-8&apos;))</span><br><span class="line">中文</span><br></pre></td></tr></table></figure></p><p>在进行日常python编程中，在操作字符串时，我们经常遇到<code>str</code>和<code>bytes</code>的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对<code>str</code>和<code>bytes</code>进行转换。</p><p>由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br></pre></td></tr></table></figure></p><p>pycharm设置方法：<br><code>File-Settings-Editor-File and Code Templates-Python Script</code>设置中添加上这两行即可。</p><p>以前曾经写过一篇博，关于设置python编码的:<a href="http://tokyle.com/2017/12/13/python%E7%BC%96%E7%A0%81/">python编码</a></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><blockquote><p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000" target="_blank" rel="noopener">廖雪峰的python教程</a><br><a href="https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html" target="_blank" rel="noopener">字符集合字符编码</a></p></blockquote><p>后记：由于昨天公司发生的很无语加无理取闹的一些事，整个办公室氛围都是压抑的，网上的教程资料也没怎么细致的看进去，写出来的总结也就是乱七八糟的，估计静下来之后我自己都看不懂。。。以后再来修改吧。唉，做技术的，干嘛不追求技术的进步，弄一些有的没的办公室政治呢，有意思吗？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python字符串和编码&lt;/p&gt;
    
    </summary>
    
      <category term="python基础" scheme="http://tokyle.com/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python3" scheme="http://tokyle.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>实现断言失败截图</title>
    <link href="http://tokyle.com/2018/02/02/%E5%AE%9E%E7%8E%B0%E6%96%AD%E8%A8%80%E5%A4%B1%E8%B4%A5%E6%88%AA%E5%9B%BE/"/>
    <id>http://tokyle.com/2018/02/02/实现断言失败截图/</id>
    <published>2018-02-02T02:18:12.000Z</published>
    <updated>2018-02-02T02:27:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>python基于selenium进行自动化测试，实现断言失败进行截图</p><a id="more"></a><p>进行自动化测试过程中，经常会遇见断言失败，时候补查失败的场景，要么是保存日志，要么就是保存失败的截图。尝试实现，在断言失败时候，加入实时截图：</p><h3 id="编码出错"><a href="#编码出错" class="headerlink" title="编码出错"></a>编码出错</h3><p>遇到问题：<br>截图文件名编码格式转换时候，会报错（以下写法在python 2.7可以使用）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pic_path = os.path.join(save_path, str(pic_name).decode(&quot;utf-8&quot;).encode(&quot;gbk&quot;) + &quot;.png&quot;)</span><br></pre></td></tr></table></figure></p><p>报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: &apos;str&apos; object has no attribute &apos;decode&apos;</span><br></pre></td></tr></table></figure></p><p>查找原因：<br>既然<code>python 2.7</code>可以正常执行，那就应该是<code>python 3</code>对于编码进行了变更。</p><p><code>Stack Overflow</code>上大家好像都是经常踩我踩过的所有坑..又找到答案了：<br>这位大哥的回答：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Begin with Python 3, all string is unicode object.</span><br><span class="line">  a = &apos;Happy New Year&apos; # Python 3</span><br><span class="line">  b = unicode(&apos;Happy New Year&apos;) # Python 2</span><br><span class="line">the code before are same. So I think you should remove the .decode(&apos;utf-8&apos;). Because you have already get the unicode object.</span><br></pre></td></tr></table></figure></p><p>python3的普通字符串是str，所以python3的str就相当于python2的Unicode。大致意思好像就是python3使用的str类型并不关心你最终是什么编码，无论是utf-8还是gb2312，它只是用Unicode字符集编码来表示每一个字符，直到输出到文件流，需要转换为<code>bytes</code>类型时，才用encode指定具体的编码实现方式。</p><p>python的中间编码是Unicode，所以python2就需要先进行解码（decode）到中间编码，再进行编码（encode）到指定编；，而python3直接可以转换到指定编码（encode）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在python3中，str-- encode -&gt; bytes-- decode -&gt; str</span><br></pre></td></tr></table></figure></p><h3 id="python3编码"><a href="#python3编码" class="headerlink" title="python3编码"></a>python3编码</h3><p>系统编码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"># 系统默认编码</span><br><span class="line">print(sys.getdefaultencoding())</span><br><span class="line"># 字符串编码</span><br><span class="line">s = &quot;中文&quot;</span><br><span class="line">s_utf8 = s.encode(&apos;utf-8&apos;)</span><br><span class="line">print(type(s))</span><br><span class="line">print(type(s_utf8))</span><br><span class="line"></span><br><span class="line">utf-8</span><br><span class="line">&lt;class &apos;str&apos;&gt;</span><br><span class="line">&lt;class &apos;bytes&apos;&gt;</span><br></pre></td></tr></table></figure></p><p>可以看到，python3的系统编码就是<code>utf-8</code>，为了避免自找麻烦，牢记使用<code>utf-8</code>即可！<br>所以上述报错代码可以更改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pic_path = os.path.join(save_path, str(pic_name) + &quot;.png&quot;)</span><br></pre></td></tr></table></figure></p><h3 id="断言失败截图实例"><a href="#断言失败截图实例" class="headerlink" title="断言失败截图实例"></a>断言失败截图实例</h3><p>实现目标是在进行自动化测试过程中，一旦发生断言失败，就根据当前时间，在工程下创建名称为当前日期的目录，，目录下创建名称为当前时间的文件夹，文件夹中保存断言失败的屏幕截图</p><h4 id="获取当前日期和时间"><a href="#获取当前日期和时间" class="headerlink" title="获取当前日期和时间"></a>获取当前日期和时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import time</span><br><span class="line">from datetime import datetime as dt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">用于获取当前的日期以及时间</span><br><span class="line">用于生成保存截图文件目录名</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">def current_date():</span><br><span class="line">    date = time.localtime()</span><br><span class="line">    # 构造今天的日期字符串</span><br><span class="line">    today = str(date.tm_year) + &quot;-&quot; + str(date.tm_mon) + &quot;-&quot; + str(date.tm_mday)</span><br><span class="line">    return today</span><br><span class="line"></span><br><span class="line">def current_time():</span><br><span class="line">    time_str = dt.now()</span><br><span class="line">    # 构建当期时间字符串</span><br><span class="line">    now = time_str.strftime(&apos;%H-%M-%S&apos;)</span><br><span class="line">    return now</span><br></pre></td></tr></table></figure><h4 id="创建目录和文件夹"><a href="#创建目录和文件夹" class="headerlink" title="创建目录和文件夹"></a>创建目录和文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from DateUtil import current_time, current_date</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">用于创建目录，用于存放异常截图</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">def create_dir():</span><br><span class="line">    # 获得当前文件所在目录的绝对路径</span><br><span class="line">    current_path = os.path.abspath(&apos;.&apos;)</span><br><span class="line">    # 获取今天的日期字符串</span><br><span class="line">    today = current_date()</span><br><span class="line">    # 构造以今天日期命名的目录的绝对路径</span><br><span class="line">    date_dir = os.path.join(current_path, today)</span><br><span class="line">    print(date_dir)</span><br><span class="line"></span><br><span class="line">    if not os.path.exists(date_dir):</span><br><span class="line">        # 如果以今天日期命名的目录不存在则创建</span><br><span class="line">        os.mkdir(date_dir)</span><br><span class="line">        # 获取当前的时间字符串</span><br><span class="line">        now = current_time()</span><br><span class="line">        # 构造以当前时间命名的目录的绝对路径</span><br><span class="line">        time_dir = os.path.join(date_dir, now)</span><br><span class="line">        print(time_dir)</span><br><span class="line">        if not os.path.exists(time_dir):</span><br><span class="line">            # 如果以当前时间命名的目录不存在则创建</span><br><span class="line">            os.mkdir(time_dir)</span><br><span class="line">        return time_dir</span><br></pre></td></tr></table></figure><h4 id="百度搜索示例"><a href="#百度搜索示例" class="headerlink" title="百度搜索示例"></a>百度搜索示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from FileUtil import create_dir</span><br><span class="line">from nose.tools import assert_true</span><br><span class="line">import time,os</span><br><span class="line">import traceback</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建存放异常截图的目录，并得到本次实例中存放图片目录的绝对路径，作为全局变量，供本次所有测试用例调用</span><br><span class="line">pic_dir = create_dir()</span><br><span class="line"></span><br><span class="line">def take_screenshot(driver, save_path, pic_name):</span><br><span class="line">    # 封装截屏方法</span><br><span class="line">    # 构造屏幕截图路径及图片名</span><br><span class="line">    # 因为windows默认编码是GBK，而传入的图片名是utf-8编码，所以需要进行转码，以便让图片名中的中文字符能够正常显示</span><br><span class="line">    pic_path = os.path.join(save_path, str(pic_name) + &quot;.png&quot;)</span><br><span class="line">    try:</span><br><span class="line">        # 调用webdriver提供的get_screenshot_as_file()方法，将截取的屏幕图片保存为本地文件</span><br><span class="line">        driver.get_screenshot_as_file(pic_path)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(traceback.print_exc(), e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestFailCaptureScreen():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        &quot;&quot;&quot;启动浏览器&quot;&quot;&quot;</span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">    def test_baidu_search(self):</span><br><span class="line">        url = &quot;https://www.baidu.com&quot;</span><br><span class="line">        self.browser.get(url)</span><br><span class="line">        try:</span><br><span class="line">            self.browser.find_element_by_id(&apos;kw&apos;).send_keys(u&quot;自动化测试&quot;)</span><br><span class="line">            self.browser.find_element_by_id(&apos;su&apos;).click()</span><br><span class="line">            time.sleep(3)</span><br><span class="line">            # 断言页面的代码中是否存在“自动化测试框架_百度百科”这几个字</span><br><span class="line">            assert_true(u&quot;纯净方糖&quot; in self.browser.page_source)</span><br><span class="line">            # 页面中没有断言的几个字，所以会触发except语句的执行，并触发截图操作</span><br><span class="line">        except AssertionError as e:</span><br><span class="line">            take_screenshot(self.browser, pic_dir, e)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            take_screenshot(self.browser, pic_dir, e)</span><br><span class="line"></span><br><span class="line">        time.sleep(2)</span><br><span class="line">        self.browser.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    testfailscreen = TestFailCaptureScreen()</span><br><span class="line">    testfailscreen.test_baidu_search()</span><br></pre></td></tr></table></figure><p>感觉是时候研究一波python字符编码了…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python基于selenium进行自动化测试，实现断言失败进行截图&lt;/p&gt;
    
    </summary>
    
      <category term="自动化测试" scheme="http://tokyle.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="自动化测试" scheme="http://tokyle.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="python3" scheme="http://tokyle.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>实现自动化测试数据分离</title>
    <link href="http://tokyle.com/2018/02/01/%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE%E5%88%86%E7%A6%BB/"/>
    <id>http://tokyle.com/2018/02/01/实现自动化测试数据分离/</id>
    <published>2018-02-01T05:48:19.000Z</published>
    <updated>2018-02-06T06:35:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用数据分离自动化测试，测试执行完成自动邮件发送</p><a id="more"></a><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>配置文件中的内容为工程所有配置信息，各个模块的元素定位的方法以及值，服务器（应用服务器和数据库服务器）配置信息，用户账号密码等信息</p><p>实例，cashier.ini</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[login]</span><br><span class="line">storeNo = id &gt; com.anmav.cashierdesk:id/etStoreNo</span><br><span class="line">username = id &gt; com.anmav.cashierdesk:id/login_accountEdt</span><br><span class="line">pwd = id &gt; com.anmav.cashierdesk:id/login_paswEdt</span><br><span class="line">login = id &gt; com.anmav.cashierdesk:id/tvLogin</span><br><span class="line">login_store = ***</span><br><span class="line">login_user = ***</span><br><span class="line">login_pwd = ***</span><br><span class="line"></span><br><span class="line">[mailmsg]</span><br><span class="line">mail_user = ***</span><br><span class="line">mail_pwd = ***</span><br><span class="line">mail_to = ***</span><br><span class="line">mail_host = ***</span><br></pre></td></tr></table></figure><p>该配置文件包含了<code>login</code>模块进行元素定位需要的方法以及值，在工程中进行元素定位值，只需要使用<code>configparser</code>模块完成配置文件读取即可。</p><h3 id="邮件发送数据分离"><a href="#邮件发送数据分离" class="headerlink" title="邮件发送数据分离"></a>邮件发送数据分离</h3><p>封装数据分离之后的邮件发送类(MailSend.py)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.mime.multipart import MIMEMultipart</span><br><span class="line">import smtplib</span><br><span class="line">import configparser</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MailSend():</span><br><span class="line">    &quot;&quot;&quot;邮件发送&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, mail_subject, report_file):</span><br><span class="line">        self.mail_subject = mail_subject</span><br><span class="line">        self.report_file = report_file</span><br><span class="line">        self.settings = os.path.abspath(&apos;..&apos;) + &quot;\cashier_conf\cashier_setting.ini&quot;</span><br><span class="line"></span><br><span class="line">    def send_mail(self):</span><br><span class="line">        &quot;&quot;&quot;读取测试报告&quot;&quot;&quot;</span><br><span class="line">        cf = configparser.ConfigParser()</span><br><span class="line">        cf.read(self.settings)</span><br><span class="line">        cf.sections()</span><br><span class="line"></span><br><span class="line">        # 获取邮箱发件人，密码，收件人，邮件服务器</span><br><span class="line">        mail_user = cf.get(&apos;mailmsg&apos;, &apos;mail_user&apos;)</span><br><span class="line">        mail_pwd = cf.get(&apos;mailmsg&apos;, &apos;mail_pwd&apos;)</span><br><span class="line">        mail_to = cf.get(&apos;mailmsg&apos;, &apos;mail_to&apos;)</span><br><span class="line">        mail_host = cf.get(&apos;mailmsg&apos;, &apos;mail_host&apos;)</span><br><span class="line"></span><br><span class="line">        # 发送邮件配置</span><br><span class="line">        with open(self.report_file, &apos;r&apos;, encoding=&apos;utf-8&apos;) as f_obj:</span><br><span class="line">            content = f_obj.read()</span><br><span class="line">        msg = MIMEMultipart(&apos;mixed&apos;)</span><br><span class="line">        # 添加邮件内容</span><br><span class="line">        msg_html = MIMEText(content, &apos;html&apos;, &apos;utf-8&apos;)</span><br><span class="line">        msg.attach(msg_html)</span><br><span class="line"></span><br><span class="line">        # 添加附件</span><br><span class="line">        msg_attachment = MIMEText(content, &apos;html&apos;, &apos;utf-8&apos;)</span><br><span class="line">        msg_attachment[&quot;Content-Disposition&quot;] = &apos;attachment; filename=&#123;0&#125;&apos;.format(self.report_file)</span><br><span class="line">        msg.attach(msg_attachment)</span><br><span class="line"></span><br><span class="line">        msg[&apos;Subject&apos;] = self.mail_subject</span><br><span class="line">        msg[&apos;Form&apos;] = mail_user</span><br><span class="line">        msg[&apos;To&apos;] = mail_to</span><br><span class="line">        try:</span><br><span class="line">            # 连接邮箱服务器</span><br><span class="line">            s = smtplib.SMTP()</span><br><span class="line">            s.connect(mail_host)</span><br><span class="line">            # 登录</span><br><span class="line">            s.login(mail_user, mail_pwd)</span><br><span class="line">            # 发送邮件</span><br><span class="line">            s.sendmail(mail_user, mail_to, msg.as_string())</span><br><span class="line">            s.quit()</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;发送邮件异常：&quot;, e)</span><br></pre></td></tr></table></figure></p><h3 id="元素定位数据分离"><a href="#元素定位数据分离" class="headerlink" title="元素定位数据分离"></a>元素定位数据分离</h3><p>封装了元素定位的方法（find_element_by…），实现在工程中进行元素定位时，直接调用方法(GetElement.py)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from selenium.webdriver.support.ui import WebDriverWait</span><br><span class="line">import os</span><br><span class="line">import configparser</span><br><span class="line">import traceback</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GetElement():</span><br><span class="line">    &quot;&quot;&quot;获取元素定位方法和值&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 读取配置文件</span><br><span class="line">        self.settings = os.path.abspath(&apos;..&apos;) + &quot;/cashier_conf/cashier_setting.ini&quot;</span><br><span class="line">        self.cf = configparser.ConfigParser()</span><br><span class="line">        self.cf.read(self.settings)</span><br><span class="line">        self.cf.sections()</span><br><span class="line"></span><br><span class="line">    def get_elementId(self, driver, webSiteName, webelement):</span><br><span class="line">        try:</span><br><span class="line">            # 获取配置文件中的定位方法以及定位元素</span><br><span class="line">            webElemnt = self.cf.get(webSiteName, webelement).split(&apos;&gt;&apos;)</span><br><span class="line">            webelement_method = webElemnt[0].strip()</span><br><span class="line">            webelement_expression = webElemnt[1].strip()</span><br><span class="line">            element = WebDriverWait(driver, 10).until\</span><br><span class="line">                (lambda x: x.find_element(webelement_method, webelement_expression))</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(traceback.print_exc(), e)</span><br><span class="line">        else:</span><br><span class="line">            return element</span><br></pre></td></tr></table></figure></p><h3 id="自动化测试实现数据分离"><a href="#自动化测试实现数据分离" class="headerlink" title="自动化测试实现数据分离"></a>自动化测试实现数据分离</h3><p>使用数据分离的方式完成<strong>系统登录</strong>的自动化测试，方便维护，后期只需要维护<code>cashier_setting.ini</code>文件即可(testlogin.py)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import configparser, os</span><br><span class="line">import traceback</span><br><span class="line">from datetime import datetime as dt</span><br><span class="line">from appium import webdriver</span><br><span class="line">from nose.tools import assert_true</span><br><span class="line">from selenium.webdriver.support.ui import WebDriverWait</span><br><span class="line">from selenium.common.exceptions import NoSuchElementException,TimeoutException</span><br><span class="line">from cashier_tools.GetElement import GetElement</span><br><span class="line">from cashier_tools.MailSend import MailSend</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Login():</span><br><span class="line">    &quot;&quot;&quot;登录&quot;&quot;&quot;</span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 初始化，配置环境</span><br><span class="line">        self.desired_caps = &#123;&#125;</span><br><span class="line">        self.desired_caps[&apos;platformName&apos;] = &apos;Android&apos;</span><br><span class="line">        self.desired_caps[&apos;platformVersion&apos;] = &apos;5.1&apos;</span><br><span class="line">        self.desired_caps[&apos;deviceName&apos;] = &apos;Android Emulator&apos;</span><br><span class="line">        self.desired_caps[&apos;noReset&apos;] = True</span><br><span class="line">        self.desired_caps[&apos;appPackage&apos;] = &apos;com.anmav.cashierdesk&apos;</span><br><span class="line">        self.desired_caps[&apos;appActivity&apos;] = &apos;com.anmav.cashierdesk.login.activity.LoginActivity&apos;</span><br><span class="line"></span><br><span class="line">        self.driver = webdriver.Remote(&apos;http://localhost:4723/wd/hub&apos;, self.desired_caps)</span><br><span class="line">        self.elementid = GetElement()</span><br><span class="line"></span><br><span class="line">    def test_login(self):</span><br><span class="line">        settings = os.path.abspath(&apos;..&apos;) + &quot;/cashier_conf/cashier_setting.ini&quot;</span><br><span class="line">        cf = configparser.ConfigParser()</span><br><span class="line">        cf.read(settings)</span><br><span class="line">        cf.sections()</span><br><span class="line"></span><br><span class="line">        # 定位门店编号输入框</span><br><span class="line">        storeno = self.elementid.get_elementId(self.driver, &apos;login&apos;, &apos;storeNo&apos;)</span><br><span class="line">        storeno.click()</span><br><span class="line">        storeno.clear()</span><br><span class="line">        store_no = cf.get(&apos;login&apos;, &apos;login_store&apos;)</span><br><span class="line">        storeno.send_keys(store_no)</span><br><span class="line">        self.driver.hide_keyboard()</span><br><span class="line"></span><br><span class="line">        # 定位用户名</span><br><span class="line">        username = self.elementid.get_elementId(self.driver, &apos;login&apos;, &apos;username&apos;)</span><br><span class="line">        username.click()</span><br><span class="line">        username.clear()</span><br><span class="line">        user = cf.get(&apos;login&apos;, &apos;login_user&apos;)</span><br><span class="line">        username.send_keys(user)</span><br><span class="line">        self.driver.hide_keyboard()</span><br><span class="line"></span><br><span class="line">        # 定位密码</span><br><span class="line">        pwd = self.elementid.get_elementId(self.driver, &apos;login&apos;, &apos;pwd&apos;)</span><br><span class="line">        pwd.click()</span><br><span class="line">        pwd.clear()</span><br><span class="line">        password = cf.get(&apos;login&apos;, &apos;login_pwd&apos;)</span><br><span class="line">        pwd.send_keys(password)</span><br><span class="line">        self.driver.hide_keyboard()</span><br><span class="line"></span><br><span class="line">        # 登录</span><br><span class="line">        self.elementid.get_elementId(self.driver, &apos;login&apos;, &apos;login&apos;).click()</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            # 显示等待，门店名称出现</span><br><span class="line">            WebDriverWait(self.driver, 10).until(lambda x:x.find_element_by_id(cf.get(&apos;order&apos;, &apos;store_name&apos;)))</span><br><span class="line">            # 断言登录成功</span><br><span class="line">            assert_true(u&quot;点餐&quot; in self.driver.page_source)</span><br><span class="line">        except NoSuchElementException as e:</span><br><span class="line">            print(traceback.print_exc(), e)</span><br><span class="line">        except TimeoutException as e:</span><br><span class="line">            print(traceback.print_exc(), e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    mail_subject = &apos;NoseTests_测试报告_&#123;0&#125;&apos;.format(dt.now().strftime(&apos;%Y%m%d&apos;))</span><br><span class="line">    report_file = &apos;Login.html&apos;</span><br><span class="line">    mailsend = MailSend(mail_subject, report_file)</span><br><span class="line"></span><br><span class="line">    print(&apos;开始执行自动化测试...&apos;)</span><br><span class="line">    os.system(&apos;nosetests -v &#123;0&#125; --with-html --html-file=&#123;1&#125;&apos;.format(__file__, report_file))</span><br><span class="line"></span><br><span class="line">    # 发送测试报告邮件</span><br><span class="line">    print(&apos;开始发送测试报告...&apos;)</span><br><span class="line">    mailsend.send_mail()</span><br><span class="line">    print(&apos;测试报告发送成功&apos;)</span><br></pre></td></tr></table></figure></p><p>单独的邮件发送模块可参照之前一篇：<a href="http://tokyle.com/2018/01/23/python%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A%E9%82%AE%E4%BB%B6%E5%AE%9E%E6%97%B6%E5%8F%91%E9%80%81/">python实现自动化测试报告邮件实时发送</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用数据分离自动化测试，测试执行完成自动邮件发送&lt;/p&gt;
    
    </summary>
    
      <category term="自动化测试" scheme="http://tokyle.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="自动化测试" scheme="http://tokyle.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="python3" scheme="http://tokyle.com/tags/python3/"/>
    
      <category term="数据分离" scheme="http://tokyle.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>【转】python元类介绍</title>
    <link href="http://tokyle.com/2018/01/31/%E3%80%90%E8%BD%AC%E3%80%91python%E5%85%83%E7%B1%BB%E4%BB%8B%E7%BB%8D/"/>
    <id>http://tokyle.com/2018/01/31/【转】python元类介绍/</id>
    <published>2018-01-31T07:26:59.000Z</published>
    <updated>2018-01-31T07:31:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>python元类</p><p>转自<code>stackoverflow</code> 神级人物<strong>e-satis</strong>的神级回复，以及国内翻译组汉化结果：</p><a id="more"></a><h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>经常在<code>stackoverflow</code>上看见一些神一般的回答，也看到过很多次创建<code>Foo</code>类，特意上<a href="https://zh.wikipedia.org/wiki/Foobar" target="_blank" rel="noopener">维基百科</a>搜了，解释如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foobar是计算机程序领域里的术语炒作，并无实际用途和参考意义。 在计算机程序设计与计算机技术的相关文档中，术语foobar是一个常见的无名氏化名，常被作为“伪变量”使用。单词“foobar”或分离的“foo”与“bar”常出现于程序设计的案例中，如同Hello World程序一样，它们常被用于向学习者介绍某种程序语言。</span><br><span class="line"></span><br><span class="line">“foo”常被作为函数／方法的名称，而“bar”则常被用作变量名。</span><br></pre></td></tr></table></figure></p><h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><h3 id="类也是对象（Classes-as-objects）"><a href="#类也是对象（Classes-as-objects）" class="headerlink" title="类也是对象（Classes as objects）"></a>类也是对象（Classes as objects）</h3><p>在理解元类之前，需要先掌握Python中的类。Python中类的概念借鉴于Smalltalk，这显得有些奇特。在大多数编程语言中，类就是一组用来描述如何生成一个对象的代码段。在Python中这一点仍然成立：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class ObjectCreator(object):</span><br><span class="line">    pass</span><br><span class="line">my_object = ObjectCreator()</span><br><span class="line">print(my_object)</span><br><span class="line"></span><br><span class="line">&lt;__main__.ObjectCreator object at 0x000001899B36E550&gt;</span><br></pre></td></tr></table></figure></p><p>但是python中的类远不止如此。类同样也是一种对象 <strong>这个对象（类）自身用创建对象（类实例）的能力，而这就是为什么它是一个类的原因</strong>。但是，它本质上仍然是一个对象，所以，你可以对它进行如下操作：<br>1、将它赋值给一个变量<br>2、拷贝它<br>3、为它增加属性<br>4、将它作为函数参数进行传递</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class ObjectCreator(object):</span><br><span class="line">    pass</span><br><span class="line"># 打印一个类，因为它其实也是一个对象</span><br><span class="line">print(ObjectCreator)</span><br><span class="line">&lt;class &apos;__main__.ObjectCreator&apos;&gt;</span><br><span class="line"># 将类作为参数传给函数</span><br><span class="line">def echo(o):</span><br><span class="line">    print(o)</span><br><span class="line">echo(ObjectCreator)</span><br><span class="line">&lt;class &apos;__main__.ObjectCreator&apos;&gt;</span><br><span class="line"># 为类增加属性</span><br><span class="line">print(hasattr(ObjectCreator, &apos;new_attribute&apos;))</span><br><span class="line">ObjectCreator.new_attribute = &apos;foo&apos;</span><br><span class="line">print(hasattr(ObjectCreator, &apos;new_attribute&apos;))</span><br><span class="line">print(ObjectCreator.new_attribute)</span><br><span class="line">False</span><br><span class="line">True</span><br><span class="line">foo</span><br><span class="line"># 将类赋值给一个变量</span><br><span class="line">ObjectCreatorMirror = ObjectCreator</span><br><span class="line">print(ObjectCreatorMirror())</span><br><span class="line">&lt;__main__.ObjectCreator object at 0x000002C21DF1E550&gt;</span><br></pre></td></tr></table></figure></p><h3 id="动态地创建类"><a href="#动态地创建类" class="headerlink" title="动态地创建类"></a>动态地创建类</h3><p>因为类也是对象，你可以在运行时动态地创建它们，就想其他任何时候一样。首先，你可以在函数中创建类，使用class关键字即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def choose_class(name):</span><br><span class="line">    if name == &apos;foo&apos;:</span><br><span class="line">        class Foo(object):</span><br><span class="line">            pass</span><br><span class="line">        return Foo</span><br><span class="line">    else:</span><br><span class="line">        class Bar(object):</span><br><span class="line">            pass</span><br><span class="line">        return Bar</span><br><span class="line">MyClass = choose_class(&apos;foo&apos;)</span><br><span class="line">print(MyClass)</span><br><span class="line">print(MyClass())</span><br><span class="line">&lt;class &apos;__main__.choose_class.&lt;locals&gt;.Foo&apos;&gt;</span><br><span class="line">&lt;__main__.choose_class.&lt;locals&gt;.Foo object at 0x000002B57928B518&gt;</span><br></pre></td></tr></table></figure></p><p>但这还不够动态，因为你仍然需要自己编写整个类的代码。由于类也是对象，所以它们必须是用过什么东西来生成的才对。当你使用class关键字时，Python解释器自动创建这个对象，但就和python中的大多数事情一样，python仍然提供给你手动处理的方法。內建函数type，可以让你知道一个对象的类型是什么：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(type(1))</span><br><span class="line">print(type(&quot;1&quot;))</span><br><span class="line">print(type(ObjectCreator))</span><br><span class="line">print(type(ObjectCreator()))</span><br><span class="line">&lt;class &apos;int&apos;&gt;</span><br><span class="line">&lt;class &apos;str&apos;&gt;</span><br><span class="line">&lt;class &apos;type&apos;&gt;</span><br><span class="line">&lt;class &apos;__main__.ObjectCreator&apos;&gt;</span><br></pre></td></tr></table></figure></p><p>这里，type有一种完全不同的能力，它也能动态的创建类。type可以接受一个类的描述作为参数，然后返回一个类（同一个函数拥有两种完全不同的用法是一件很傻的事情，但这在Python中是为了保持向后的兼容性）</p><p>type可以像这样工作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type(类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称知道）)</span><br></pre></td></tr></table></figure></p><p>比如如下的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class MyShinyClass(object):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></p><p>可以手动像这样创建：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 返回一个对象</span><br><span class="line">MyShinyClass = type(&apos;MyShinyClASS&apos;, (), &#123;&#125;)</span><br><span class="line">print(MyShinyClass)</span><br><span class="line">print(MyShinyClass())</span><br><span class="line">&lt;class &apos;__main__.MyShinyClASS&apos;&gt;</span><br><span class="line">&lt;__main__.MyShinyClASS object at 0x00000214ED6FE5F8&gt;</span><br></pre></td></tr></table></figure></p><p>type接受一个字典来为类定义属性，因此<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Foo(object):</span><br><span class="line">    bar = True</span><br></pre></td></tr></table></figure></p><p>可以翻译为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Foo = type(&apos;Foo&apos;, (), &#123;&apos;bar&apos;:True&#125;)</span><br></pre></td></tr></table></figure></p><p>并且可以将Foo当做一个普通的类一样使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(Foo)</span><br><span class="line">print(Foo.bar)</span><br><span class="line">f = Foo()</span><br><span class="line">print(f)</span><br><span class="line">print(f.bar)</span><br><span class="line">&lt;class &apos;__main__.Foo&apos;&gt;</span><br><span class="line">True</span><br><span class="line">&lt;__main__.Foo object at 0x000002C77F0FD4E0&gt;</span><br><span class="line">True</span><br></pre></td></tr></table></figure></p><p>当然，你可以向这个类继承，所以，如下的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class FooChild(Foo):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></p><p>就可以写成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FooChild = type(&apos;FooChild&apos;, (Foo,), &#123;&#125;)</span><br><span class="line">print(FooChild)</span><br><span class="line">print(FooChild.bar)</span><br></pre></td></tr></table></figure></p><h3 id="到底什么是元类"><a href="#到底什么是元类" class="headerlink" title="到底什么是元类"></a>到底什么是元类</h3><p>元类就是用来创建类的“东西”，你创建类就是为了创建类的实例对象，但是我们知道python中的类也是对象，而元类就是用来创建这些类（对象）的，所以，元类就是类的类，可以这样理解：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyClass = MetaClass()</span><br><span class="line">MyObject = MyClass()</span><br></pre></td></tr></table></figure></p><p>你可以看到了type可以让你像这样做：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyClass = type(&apos;MyClass&apos;, (), &#123;&#125;)</span><br></pre></td></tr></table></figure></p><p>这是因为函数type实际上是一个元类，type就是python背后用来创建所有类的元类，所以type为什么不写成Type也就知道了吧，或许就是为了和str保持一致性，str是用来创建字符串对象的类，而int是用来创建整数对象的类。type即使创建类对象的类。你可以通过<strong>class</strong>属性来看到这一点。Python中的所有的东西，注意，所有的东西——都是对象。这包含整数、字符串、函数和类。它们都是对象，而且它们都是从一个类创建来的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">age = 24</span><br><span class="line">print(age.__class__)</span><br><span class="line">name = &apos;bob&apos;</span><br><span class="line">print(name.__class__)</span><br><span class="line">def foo():</span><br><span class="line">    pass</span><br><span class="line">print(foo.__class__)</span><br><span class="line">&lt;class &apos;int&apos;&gt;</span><br><span class="line">&lt;class &apos;str&apos;&gt;</span><br><span class="line">&lt;class &apos;function&apos;&gt;</span><br></pre></td></tr></table></figure><p>现在，对于任何一个<strong>class</strong>的<strong>class</strong>属性又是什么呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(age.__class__.__class__)</span><br><span class="line">print(name.__class__.__class__)</span><br><span class="line">print(foo.__class__.__class__)</span><br><span class="line">&lt;class &apos;type&apos;&gt;</span><br><span class="line">&lt;class &apos;type&apos;&gt;</span><br><span class="line">&lt;class &apos;type&apos;&gt;</span><br></pre></td></tr></table></figure></p><p>因此，元类就是窗累类这种对象的东西，如果你喜欢的话，可以把元类称谓”类工厂”（不是工厂类）,<code>type</code>就是python內建的元类，当然了，你也可以创建自己的元类。</p><h3 id="metaclass-属性"><a href="#metaclass-属性" class="headerlink" title="__metaclass__属性"></a><code>__metaclass__</code>属性</h3><p>你可以在写一个类的时候为其添加<strong>metaclass</strong>属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Foo(object):</span><br><span class="line">    __metaclass__ = somethind,.,</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>如果你这么做了，python就会用元类来创建类Foo。这里面有技巧，你首先写下class Foo(object)，但是类对象Foo还没有在内存中创建。Python会在类的定义中寻找<code>__metaclass__</code>属性，如果找到了，Python就会用它创建类Foo，如果没找到，就会用內建的type来创建这个类。</p><p>当你写下如下代码时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Foo(Bar):</span><br><span class="line">pass</span><br></pre></td></tr></table></figure></p><p>Python做了如下的操作：</p><p>Foo中有<code>__metaclass__</code>这个属性吗？如果有，python会在内存中通过<code>__metaclass__</code>创建一个名字为Foo的类对象（注意是类对象）。如果python没有找到<code>__metaclass__</code>，它会继续在Bar（父类）中寻找<code>__metaclass__</code>属性，并尝试做和前面同样的操作。如果python在任何父类中都找不到<code>__metaclass__</code>，它就会在模块层面中去寻找<code>__metaclass__</code>，并尝试做同样的操作。如果还是找不到<code>__metaclass__</code>，python就会用内置的type来创建这个类对象。</p><p>现在的问题就是，你可以在<code>__metaclass__</code>中放置些什么代码呢？答案是：可以是可以创建一个类的东西。那什么可以用来创建一个类呢？<strong>type</strong>，或者任何使用到type或者子类化type的东西都可以。</p><h3 id="自定义元类"><a href="#自定义元类" class="headerlink" title="自定义元类"></a>自定义元类</h3><p>元类的主要目的就是为了<strong>当创建类时能够自动地改变类</strong>。通常，你会为API做这样的事情，你希望可以创建符合当前上下文的类。假想一个很傻的例子，你决定你的模块里所有的类的属性都应该是大写形式，有好几种方法可以实现，单其中一种就是通过在模块级别设定<code>__metaclass__</code>，采用这种方法，这个模块中的所有类都会通过这个元类来创建，我们只需要告诉元类把所有的属性都改写成大写形式就解决了。</p><p>幸运的是，<code>__metaclass__</code>实际上可以被任意调用，它并不需要是一个正式的类（我们都知道，名字里面带’class’的东西，并不一定是个class）</p><p>我们这里先以一个简单的函数作为例子开始：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 元类会自动将你通常传给&apos;type&apos;的参数作为自己的参数传入</span><br><span class="line">def upper_attr(future_class_name, future_class_parents, future_class_attr):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    返回一个类对象，将属性都转为大写形式</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 识别所有不以&apos;__&apos;开头的属性，将它转换为大写</span><br><span class="line">    uppercase_attr = &#123;&#125;</span><br><span class="line">    for name, val in future_class_attr.items():</span><br><span class="line">        if not name.startswith(&apos;__&apos;):</span><br><span class="line">            uppercase_attr[name.upper()] = val</span><br><span class="line">        else:</span><br><span class="line">            uppercase_attr[name] = val</span><br><span class="line"></span><br><span class="line">    # type创建这个类</span><br><span class="line">    return type(future_class_name, future_class_parents, uppercase_attr)</span><br><span class="line"></span><br><span class="line"># 这行会影响模块中的所有类</span><br><span class="line">__metaclass__ = upper_attr</span><br><span class="line"></span><br><span class="line">class Foo():</span><br><span class="line">    # 全局 __metaclass__不会和&apos;object&apos;一起生效，但是我们可以在这里定义__metaclass__来只对这个类生效</span><br><span class="line">    bar = &apos;bip&apos;</span><br><span class="line"></span><br><span class="line">print(hasattr(Foo, &apos;bar&apos;))</span><br><span class="line">print(hasattr(Foo, &apos;BAR&apos;))</span><br></pre></td></tr></table></figure></p><p>现在让我们再做一次，这一次用一个真正的class来当元类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 请记住，&apos;type&apos;实际上是一个类，就像&apos;str&apos;和&apos;int&apos;一样</span><br><span class="line"># 所以，你可以从type继承</span><br><span class="line">class UpperAttrMetaclass(type):</span><br><span class="line">    # __new__ 是在 __init__之前被调用的特殊方法</span><br><span class="line">    # __new__是用来创建对象并返回的方法</span><br><span class="line">    # __init__只是用来把传入的参数初始化给对象</span><br><span class="line">    # 你很少用到__new__，除非你希望能够控制对象的创建</span><br><span class="line">    # 这里，创建的对象是类，我们希望能够自定义它，所以我们这里改写__new__</span><br><span class="line">    # 如果你希望的话，你也可以在__init__中做些事情</span><br><span class="line">    # 还有一些高级的用法会涉及到改写__call__特殊方法，但是我们这里不用</span><br><span class="line">    def __new__(upperattr_metaclass, future_class_name,</span><br><span class="line">                future_class_parents, future_class_attr):</span><br><span class="line"></span><br><span class="line">        uppercase_attr = &#123;&#125;</span><br><span class="line">        for name, val in future_class_attr.items():</span><br><span class="line">            if not name.startswith(&apos;__&apos;):</span><br><span class="line">                uppercase_attr[name.upper()] = val</span><br><span class="line">            else:</span><br><span class="line">                uppercase_attr[name] = val</span><br><span class="line"></span><br><span class="line">        return type(future_class_name, future_class_parents, uppercase_at</span><br></pre></td></tr></table></figure></p><p>但是这不是OOP（Object-oriented programming，面向对象编程）。我们直接调用了type，而且我们没有改写父类的<strong>new</strong>方法。现在，我们这样去处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class UpperAttrMetaclass(type): </span><br><span class="line"></span><br><span class="line">    def __new__(upperattr_metaclass, future_class_name, </span><br><span class="line">                future_class_parents, future_class_attr):</span><br><span class="line"></span><br><span class="line">        uppercase_attr = &#123;&#125;</span><br><span class="line">        for name, val in future_class_attr.items():</span><br><span class="line">            if not name.startswith(&apos;__&apos;):</span><br><span class="line">                uppercase_attr[name.upper()] = val</span><br><span class="line">            else:</span><br><span class="line">                uppercase_attr[name] = val</span><br><span class="line"></span><br><span class="line">        # 复用type.__new__方法</span><br><span class="line">        # 这就是基本的OOP编程，没什么魔法</span><br><span class="line">        return type.__new__(upperattr_metaclass, future_class_name, </span><br><span class="line">                            future_class_parents, uppercase_attr)</span><br></pre></td></tr></table></figure></p><p>你可以已经注意到了有个额外的参数uppersttr_metaclass，这并没有什么特别的。类方法的第一个参数总是表示当前的实例，就想在普通的类方法中的self参数一样。当然了，为了清晰起见，这边将名字起的比较长。但是就想self一样，所有的参数都有它们的传统名称。因此，在真是的产品代码中一个元类应该像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class UpperAttrMetaclass(type): </span><br><span class="line"></span><br><span class="line">    def __new__(cls, clsname, bases, dct):</span><br><span class="line"></span><br><span class="line">        uppercase_attr = &#123;&#125;</span><br><span class="line">        for name, val in dct.items():</span><br><span class="line">            if not name.startswith(&apos;__&apos;):</span><br><span class="line">                uppercase_attr[name.upper()] = val</span><br><span class="line">            else:</span><br><span class="line">                uppercase_attr[name] = val</span><br><span class="line"></span><br><span class="line">        return type.__new__(cls, clsname, bases, uppercase_attr)</span><br></pre></td></tr></table></figure></p><p>如果使用super方法的话，我们还可以使它变得更清晰一些，这会缓解继承（是的，你可以拥有元类，从元类继承，从type继承）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class UpperAttrMetaclass(type): </span><br><span class="line"></span><br><span class="line">    def __new__(cls, clsname, bases, dct):</span><br><span class="line"></span><br><span class="line">        uppercase_attr = &#123;&#125;</span><br><span class="line">        for name, val in dct.items():</span><br><span class="line">            if not name.startswith(&apos;__&apos;):</span><br><span class="line">                uppercase_attr[name.upper()] = val</span><br><span class="line">            else:</span><br><span class="line">                uppercase_attr[name] = val</span><br><span class="line"></span><br><span class="line">        return super(UpperAttrMetaclass, cls).__new__(cls, clsname, bases, uppercase_attr)</span><br></pre></td></tr></table></figure></p><p>就是这样，除此之外，关于元类真的没有别的可说的了。使用到元类的代码比较复杂，这背后的原因倒不是因为元类本身，二十因为你通常会使用元类去做一些晦涩的事情，依赖于自省，控制继承等等。确实，用元类来搞些“黑魔法”是特别有用的，因而会搞出些复杂的东西来。但是元类本身而言，它们其实是很简单的：</p><p>1，拦截类的创建<br>2，修改类<br>3，返回修改之后的类</p><h3 id="为什么要用metaclass类而不是函数"><a href="#为什么要用metaclass类而不是函数" class="headerlink" title="为什么要用metaclass类而不是函数"></a>为什么要用metaclass类而不是函数</h3><p>由于<code>__metaclass__</code>可以接受任何可调用的对象，那为什么还要使用类呢，因为很显然使用类会更加复杂，这里有好几个原因：</p><p>1，意图会更加清晰，当你读到UpperAttrMetaclass(type)时，你知道接下来要发生什么<br>2，你可以使用OOP编程。元类可以从元类中继承，改写父类方法，甚至可以使用元类<br>3，你可以把代码组织的更好，当你使用元类的时候肯定不会像上述的简单场景，通常都是针对比较复杂的问题。将多个方法归总到一个类中会很有帮助，也会使得代码更容易阅读。<br>4，你可以使用<code>__new__</code>，<code>__init__</code>以及<code>__call__</code>这样的特殊方法。它们能帮你处理不同的任务。就算通常你可以把所有的东西都在<code>__new__</code>里处理掉，有些人还是觉得用<code>__init__</code>更舒服点。</p><h3 id="究竟为什么要使用元类"><a href="#究竟为什么要使用元类" class="headerlink" title="究竟为什么要使用元类"></a>究竟为什么要使用元类</h3><p>现在回到我们的大主题上来，究竟是为什么你会去使用这样一种容易出错且晦涩的特性？好吧，一般来说，根本用不上它：</p><p>“元类就是深度的魔法，99%的用户根本不必为此操心。如果你想搞清楚究竟是否需要用来元类，那么你就不需要它。那么实际用到元类的人都非常清楚地知道他们需要做什么，而且根本不需要解释为什么要用元类”  ——Python界的领袖Tim Peters</p><p>元类的主要用途是创建API，一个典型的例子是Django ORM。它允许你像这样定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Person(models.Model):</span><br><span class="line">  name = models.CharField(max_length=30)</span><br><span class="line">  age = models.IntegerField()</span><br></pre></td></tr></table></figure></p><p>但是如果你像这样做的话：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">guy  = Person(name=&apos;bob&apos;, age=&apos;35&apos;)</span><br><span class="line">print guy.age</span><br></pre></td></tr></table></figure></p><p>这并不会返回一个IntegerFied对象，而是会放回一个int，甚至可以直接从数据库中取出数据。这是有可能的，因为models.Model定义了<code>__metaclass__</code>，并且使用了一些魔法能够将你刚刚定义的简单的Person类转变成对数据库的一个复杂hook。Django框架将这些看起来很复杂的东西通过暴露出一个简单的使用元类的API将其化简，通过这个API重新创建代码，在背后完成真正的工作。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>首先，你知道了类其实是能够创建出类实例的对象。事实上，类本身也是实例，当然，它们是元类的实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Foo(object):</span><br><span class="line">    pass</span><br><span class="line">print(id(Foo))</span><br><span class="line">1973075749880</span><br></pre></td></tr></table></figure></p><p>Python中的一切都是对象，它们要么是类的实例，要么是元类的实例，除了type。type实际上是它自己的元类，在纯python环境中这可不是你能够做到的，这是通过在实现层面耍一些小手段做到的。其次，元类是很复杂的。对于非常简单的类，你可能不希望通过使用元类来对类做修改。你可以通过其他两种技术来修改类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Monkey patching</span><br><span class="line">class decorators</span><br></pre></td></tr></table></figure></p><p>当你需要动态修改类时，99%的时间里你最好使用上面这两种技术。当然，其实在99%的时间里你根本就不需要动态修改类。</p><h3 id="原链接"><a href="#原链接" class="headerlink" title="原链接"></a>原链接</h3><blockquote><p><a href="https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python" target="_blank" rel="noopener">stackoverflow原链接</a><br><a href="http://blog.jobbole.com/21351/" target="_blank" rel="noopener">国内翻译站</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python元类&lt;/p&gt;
&lt;p&gt;转自&lt;code&gt;stackoverflow&lt;/code&gt; 神级人物&lt;strong&gt;e-satis&lt;/strong&gt;的神级回复，以及国内翻译组汉化结果：&lt;/p&gt;
    
    </summary>
    
      <category term="python黑科技" scheme="http://tokyle.com/categories/python%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="python" scheme="http://tokyle.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>VPS重建记</title>
    <link href="http://tokyle.com/2018/01/24/VPS%E9%87%8D%E5%BB%BA%E8%AE%B0/"/>
    <id>http://tokyle.com/2018/01/24/VPS重建记/</id>
    <published>2018-01-24T07:07:13.000Z</published>
    <updated>2018-01-24T07:08:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>VPS重新部署日常环境，及hexo博客快速重建</p><a id="more"></a><h3 id="VPS受灾记"><a href="#VPS受灾记" class="headerlink" title="VPS受灾记"></a>VPS受灾记</h3><p>大早上来发现<code>stackoverflow</code>首页都打不开，对于天天科学上网的我来说，简直莫名其妙。</p><h4 id="本地网络原因"><a href="#本地网络原因" class="headerlink" title="本地网络原因"></a>本地网络原因</h4><p>本地windows PC机，控制台ping IP：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping VPS_IP</span><br></pre></td></tr></table></figure></p><p>直接就超时了，匪夷所思。。VPS服务器 ping自己：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 127.0.0.1</span><br></pre></td></tr></table></figure></p><p>好歹能通，那就是中间路由断了。</p><p>手机下载个网络工具，尝试在手机端ping VPS的IP（排除公司DNS搞的鬼），手机上ping也直接超时了，好吧，可以去检查是不是在某个不知名的时候自己把防火墙开了，还把22等端口关了。。</p><h4 id="VPS排查"><a href="#VPS排查" class="headerlink" title="VPS排查"></a>VPS排查</h4><p>我的VPS是在LA的<code>CENTOS7</code>主机，centos7查看防火墙状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd    --state</span><br></pre></td></tr></table></figure></p><p>发现是关着的。。。为了排除自己之前装过<code>iptables</code>的服务，查看<code>iptables.service</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status iptables.service</span><br></pre></td></tr></table></figure></p><p>这个果然是开着的，查看启用的端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure></p><p>该开的端口也都开了，好吧，无语了。</p><h4 id="大环境排查"><a href="#大环境排查" class="headerlink" title="大环境排查"></a>大环境排查</h4><p>基于大家都懂的网络环境，怀疑是IP被墙了，检测：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ping.chinaz.com</span><br></pre></td></tr></table></figure></p><p>果然，除了香港和国外，其他都ping不通VPS，好吧，可以下结论了:IP被墙了…</p><p>真的很想骂人啊！到底是哪个JR没事瞎玩，搞出个异常流量，害的无辜躺枪！！！<br>hexo还在VPS上，小飞机也在VPS上，没有梯子，科学上网个鬼啊！！！</p><p>骂人几轮，该弄得还是得弄，方案嘛，无非就是换IP，还好<code>Vultr</code>重建台服务还是很方便的。</p><h3 id="VPS重建"><a href="#VPS重建" class="headerlink" title="VPS重建"></a>VPS重建</h3><p><code>Vultr</code>重买服务器，这次比较幸运，居然有$2.5的，直接买：<br><a href="https://www.vultr.com/" target="_blank" rel="noopener">Vultr官网</a><br>拿到IP之后，第一件事，肯定是ping IP，还好，可以ping通，就是你了！</p><p>VPS简单设置</p><h4 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h4><p><code>xshell</code>远程连接上VPS之后，习惯性操作，第一步，更新<code>yum</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure></p><h5 id="firewall设置"><a href="#firewall设置" class="headerlink" title="firewall设置"></a>firewall设置</h5><p>由于centos7默认的防火墙服务时<code>firewalld</code>的，很不习惯，改！</p><p>查看防火墙状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd    --state</span><br></pre></td></tr></table></figure></p><p>关闭防火墙<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl  stop   firewalld.service</span><br></pre></td></tr></table></figure></p><p>禁止开机启动启动防火墙<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl   disable   firewalld.service</span><br></pre></td></tr></table></figure></p><h5 id="iptables设置"><a href="#iptables设置" class="headerlink" title="iptables设置"></a>iptables设置</h5><p>安装iptables服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install  iptables-services</span><br></pre></td></tr></table></figure></p><p>开启iptables防火墙:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl  start  iptables.service</span><br></pre></td></tr></table></figure></p><p>开启特定端口：<br>编辑文件：/etc/sysconfig/iptables，加入想要开放的端口即可，例如开放8090端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -p tcp -m tcp --dport 8090 -j ACCEPT</span><br></pre></td></tr></table></figure></p><p>保存，退出之后，重启防火墙完成设置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl  restart  iptables.service</span><br></pre></td></tr></table></figure></p><h4 id="ShadowsocksR（小飞机）配置"><a href="#ShadowsocksR（小飞机）配置" class="headerlink" title="ShadowsocksR（小飞机）配置"></a>ShadowsocksR（小飞机）配置</h4><p>科学上网必不可少的工具，<code>ShadowsocksR</code></p><p>安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</span><br><span class="line">chmod +x shadowsocksR.sh</span><br><span class="line">./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</span><br></pre></td></tr></table></figure></p><p>完成配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">服务器端口：自己设定（如不设定，默认为 8989）</span><br><span class="line">密码：自己设定（如不设定，默认为 teddysun.com）</span><br><span class="line">加密方式：自己设定（如不设定，默认为 aes-256-cfb）</span><br><span class="line">协议（Protocol）：自己设定（如不设定，默认为 origin）</span><br><span class="line">混淆（obfs）：自己设定（如不设定，默认为 plain）</span><br></pre></td></tr></table></figure></p><p>附上我的配置，仅供参考：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Your Server IP        :  ***.***.***.*** </span><br><span class="line">Your Server Port      :  ***** </span><br><span class="line">Your Password         :  ******* </span><br><span class="line">Your Protocol         :  auth_sha1_v4 </span><br><span class="line">Your obfs             :  tls1.2_ticket_auth </span><br><span class="line">Your Encryption Method:  aes-256-cfb</span><br></pre></td></tr></table></figure></p><p>配置完成之后就可以在本地PC机使用客户端进行梯子配置，完了就可以科学上网啦！！！<br><a href="https://pan.baidu.com/s/1dMkFYe" target="_blank" rel="noopener">客户端度娘盘链接</a></p><h3 id="Hexo重建"><a href="#Hexo重建" class="headerlink" title="Hexo重建"></a>Hexo重建</h3><p>预备动作：<strong>原来VPS上面的hexo所在目录，直接打成压缩包scp出来</strong></p><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p>首先安装gcc用于编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ kernel-devel</span><br></pre></td></tr></table></figure></p><p>开始安装node.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v4.5.0/node-v4.5.0.tar.gz</span><br><span class="line">tar -xf node-v4.5.0.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压缩之后，进入目录，编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd node-v4.5.0</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>完成！<br>验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm</span><br></pre></td></tr></table></figure></p><p>安装完成的是4.5的版本，升级：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g n</span><br><span class="line">n stable</span><br></pre></td></tr></table></figure></p><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><p>由于买的VPS已经集成了git，所以怎么安装，怎么配置环境变量啥的就不废话了。<br>1、VPS设置git：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure></p><p>邮箱和用户名都对应于github</p><p>2、生成ssh秘钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C example@163.com</span><br></pre></td></tr></table></figure></p><p>默认保存路径是/root/.ssh下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /root/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p><p>获取秘钥，然后到<code>github</code>的web页面将秘钥配置进去，完成！</p><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><p>1、安装hexo<br>创建目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog</span><br></pre></td></tr></table></figure></p><p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">#初始化</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure></p><p>2、安装插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-stylus --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></p><p>3、修改Hexo配置文件，完成！</p><p>或者，直接把原来VPS上面hexo的压缩包解压，再配置安装hexo即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure></p><h4 id="环境测试"><a href="#环境测试" class="headerlink" title="环境测试"></a>环境测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;安装测试&quot;</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>执行不报错，进入博客可以看见<code>安装测试</code>该文章，部署成功！</p><p>真的是坑啊，又重布环境，国内的网络环境啊，ε=(´ο｀*)))唉~</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><blockquote><p><a href="https://www.jianshu.com/p/0823e387c019" target="_blank" rel="noopener">centos搭建hexo博客</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VPS重新部署日常环境，及hexo博客快速重建&lt;/p&gt;
    
    </summary>
    
      <category term="skill" scheme="http://tokyle.com/categories/skill/"/>
    
    
      <category term="Hexo" scheme="http://tokyle.com/tags/Hexo/"/>
    
      <category term="Centos7" scheme="http://tokyle.com/tags/Centos7/"/>
    
  </entry>
  
</feed>
